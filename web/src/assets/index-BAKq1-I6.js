const __vite__mapDeps = (i, m = __vite__mapDeps, d = (m.f || (m.f = ["assets/index--_WPcRBS.js", "assets/semi-ui-C9AnQoBc.js", "assets/react-core-B_rT1BcQ.js", "assets/semi-ui-CUwE7aoL.css", "assets/tools--jVf5iHv.js", "assets/i18n-CErUK-Hy.js", "assets/react-components-DHMQhW6Z.js", "assets/semantic-Du-5yReK.js", "assets/index-DU0zzs9C.js", "assets/visactor-K-BgCAvg.js", "assets/index-B0knQSRf.js"]))) => i.map(i => d[i]);
import { j as e, S as Me, T as rt, g as ne, h as K, M as De, i as qt, k as jt, l as ye, B as $, F as he, m as Ue, D as Ct, n as tt, P as Ye, o as M, p as ft, L as Fe, I as Bn, q as wt, C as Re, r as mt, s as Qu, R as Ae, t as fe, u as Ge, v as Kt, A as Vn, w as $s, x as ht, y as Us, z as zs, E as Ws, G as qs, H as Gs, J as gn, K as Ks, N as pt, O as zn, Q as Yu, U as et, V as Zu, W as fn, X as Hs, Y as Vs, Z as Wn, $ as Cn, a0 as hu, a1 as Xu, a2 as es, a3 as pu, a4 as Js, a5 as Qs, a6 as Ys, a7 as ts, a8 as At, a9 as Zs, aa as Xs, ab as ea, ac as ns, ad as us, ae as ta, af as na, ag as ua, ah as sa, ai as aa, aj as ra, ak as ia, al as oa, am as la } from "./semi-ui-C9AnQoBc.js"; import { a as ca, r as i, u as it, N as da, R as kt, L as Qt, e as Sn, c as ha, g as ss, f as pa, h as as, i as ma, j as we, B as ga } from "./react-core-B_rT1BcQ.js"; import { c as fa, a as rs } from "./tools--jVf5iHv.js"; import { Q as Fa, _ as Lt, T as is, f as Pn, k as xa } from "./react-components-DHMQhW6Z.js"; import { i as Pe, u as Ce, B as ya, a as Ca } from "./i18n-CErUK-Hy.js"; import { M as zt, G as Wt, F as re, H as Le, D as He, a as cn, B as Rt, I as os, S as Jn, b as Ea, L as Ke, c as ba, d as ja } from "./semantic-Du-5yReK.js"; (function () { const u = document.createElement("link").relList; if (u && u.supports && u.supports("modulepreload")) return; for (const r of document.querySelectorAll('link[rel="modulepreload"]')) a(r); new MutationObserver(r => { for (const o of r) if (o.type === "childList") for (const c of o.addedNodes) c.tagName === "LINK" && c.rel === "modulepreload" && a(c) }).observe(document, { childList: !0, subtree: !0 }); function s(r) { const o = {}; return r.integrity && (o.integrity = r.integrity), r.referrerPolicy && (o.referrerPolicy = r.referrerPolicy), r.crossOrigin === "use-credentials" ? o.credentials = "include" : r.crossOrigin === "anonymous" ? o.credentials = "omit" : o.credentials = "same-origin", o } function a(r) { if (r.ep) return; r.ep = !0; const o = s(r); fetch(r.href, o) } })(); var qn = {}, mu = ca; qn.createRoot = mu.createRoot, qn.hydrateRoot = mu.hydrateRoot; const Da = "modulepreload", wa = function (n) { return "/" + n }, gu = {}, Qn = function (u, s, a) { let r = Promise.resolve(); if (s && s.length > 0) { document.getElementsByTagName("link"); const c = document.querySelector("meta[property=csp-nonce]"), h = (c == null ? void 0 : c.nonce) || (c == null ? void 0 : c.getAttribute("nonce")); r = Promise.allSettled(s.map(F => { if (F = wa(F), F in gu) return; gu[F] = !0; const g = F.endsWith(".css"), p = g ? '[rel="stylesheet"]' : ""; if (document.querySelector(`link[href="${F}"]${p}`)) return; const m = document.createElement("link"); if (m.rel = g ? "stylesheet" : Da, g || (m.as = "script"), m.crossOrigin = "", m.href = F, h && m.setAttribute("nonce", h), document.head.appendChild(m), g) return new Promise((d, E) => { m.addEventListener("load", d), m.addEventListener("error", () => E(new Error(`Unable to preload CSS for ${F}`))) }) })) } function o(c) { const h = new Event("vite:preloadError", { cancelable: !0 }); if (h.payload = c, window.dispatchEvent(h), !h.defaultPrevented) throw c } return r.then(c => { for (const h of c || []) h.status === "rejected" && o(h.reason); return u().catch(o) }) }, Ie = ({ prompt: n = "page" }) => e.jsxs(Me, { style: { height: 100 }, spinning: !0, children: ["加载", n, "中..."] }), Aa = fa(), _e = 10, Fn = [{ key: 1, text: "OpenAI", value: 1, color: "green", label: "OpenAI" }, { key: 2, text: "Midjourney Proxy", value: 2, color: "light-blue", label: "Midjourney Proxy" }, { key: 5, text: "Midjourney Proxy Plus", value: 5, color: "blue", label: "Midjourney Proxy Plus" }, { key: 36, text: "Suno API", value: 36, color: "purple", label: "Suno API" }, { key: 4, text: "Ollama", value: 4, color: "grey", label: "Ollama" }, { key: 14, text: "Anthropic Claude", value: 14, color: "indigo", label: "Anthropic Claude" }, { key: 33, text: "AWS Claude", value: 33, color: "indigo", label: "AWS Claude" }, { key: 41, text: "Vertex AI", value: 41, color: "blue", label: "Vertex AI" }, { key: 3, text: "Azure OpenAI", value: 3, color: "teal", label: "Azure OpenAI" }, { key: 34, text: "Cohere", value: 34, color: "purple", label: "Cohere" }, { key: 39, text: "Cloudflare", value: 39, color: "grey", label: "Cloudflare" }, { key: 43, text: "DeepSeek", value: 43, color: "blue", label: "DeepSeek" }, { key: 15, text: "百度文心千帆", value: 15, color: "blue", label: "百度文心千帆" }, { key: 17, text: "阿里通义千问", value: 17, color: "orange", label: "阿里通义千问" }, { key: 18, text: "讯飞星火认知", value: 18, color: "blue", label: "讯飞星火认知" }, { key: 16, text: "智谱 ChatGLM", value: 16, color: "violet", label: "智谱 ChatGLM" }, { key: 26, text: "智谱 GLM-4V", value: 26, color: "purple", label: "智谱 GLM-4V" }, { key: 24, text: "Google Gemini", value: 24, color: "orange", label: "Google Gemini" }, { key: 11, text: "Google PaLM2", value: 11, color: "orange", label: "Google PaLM2" }, { key: 25, text: "Moonshot", value: 25, color: "green", label: "Moonshot" }, { key: 19, text: "360 智脑", value: 19, color: "blue", label: "360 智脑" }, { key: 23, text: "腾讯混元", value: 23, color: "teal", label: "腾讯混元" }, { key: 31, text: "零一万物", value: 31, color: "green", label: "零一万物" }, { key: 35, text: "MiniMax", value: 35, color: "green", label: "MiniMax" }, { key: 37, text: "Dify", value: 37, color: "teal", label: "Dify" }, { key: 38, text: "Jina", value: 38, color: "blue", label: "Jina" }, { key: 40, text: "SiliconCloud", value: 40, color: "purple", label: "SiliconCloud" }, { key: 42, text: "Mistral AI", value: 42, color: "blue", label: "Mistral AI" }, { key: 8, text: "自定义渠道", value: 8, color: "pink", label: "自定义渠道" }, { key: 22, text: "知识库：FastGPT", value: 22, color: "blue", label: "知识库：FastGPT" }, { key: 21, text: "知识库：AI Proxy", value: 21, color: "purple", label: "知识库：AI Proxy" }], va = ({ htmlContent: n }) => e.jsx("div", { dangerouslySetInnerHTML: { __html: n } }); function Ve() { let n = localStorage.getItem("user"); return n ? (n = JSON.parse(n), n.role >= 10) : !1 } function ls() { let n = localStorage.getItem("user"); return n ? (n = JSON.parse(n), n.role >= 100) : !1 } function Yn() { let n = localStorage.getItem("system_name"); return n || "New API" } function kn() { let n = localStorage.getItem("logo"); return n || "/logo.png" } function Zn() { let n = localStorage.getItem("user"); return n ? (n = JSON.parse(n), n.id) : -1 } function Ba() { return localStorage.getItem("footer_html") } async function nt(n) { let u = !0; try { await navigator.clipboard.writeText(n) } catch { try { var s = window.document.createElement("input"); s.value = n, window.document.body.appendChild(s), s.select(), window.document.execCommand("Copy"), window.document.body.removeChild(s) } catch (r) { u = !1, console.error(r) } } return u } function ut() { return window.innerWidth <= 600 } let cs = { autoClose: !1 }; ut() && (cs.position = "top-center"); function b(n) { if (console.error(n), n.message) { if (n.name === "AxiosError") { switch (n.response.status) { case 401: window.location.href = "/login?expired=true"; break; case 429: rt.error("错误：请求次数过多，请稍后再试！"); break; case 500: rt.error("错误：服务器内部错误，请联系管理员！"); break; case 405: rt.info("本站仅作演示之用，无服务端！"); break; default: rt.error("错误：" + n.message) }return } rt.error("错误：" + n.message) } else rt.error("错误：" + n) } function ot(n) { rt.warning(n) } function ie(n) { rt.success(n) } function Te(n) { rt.info(n) } function fu(n, u = !1) { u ? Fa(e.jsx(va, { htmlContent: n }), cs) : rt.info(n) } function dn(n) { return n.endsWith("/") ? n.slice(0, -1) : n } function Sa() { var n = new Date; return n.setHours(0, 0, 0, 0), Math.floor(n.getTime() / 1e3) } function Xe(n) { let u = new Date(n * 1e3), s = u.getFullYear().toString(), a = (u.getMonth() + 1).toString(), r = u.getDate().toString(), o = u.getHours().toString(), c = u.getMinutes().toString(), h = u.getSeconds().toString(); return a.length === 1 && (a = "0" + a), r.length === 1 && (r = "0" + r), o.length === 1 && (o = "0" + o), c.length === 1 && (c = "0" + c), h.length === 1 && (h = "0" + h), s + "-" + a + "-" + r + " " + o + ":" + c + ":" + h } function Yo(n, u = "hour") { let s = new Date(n * 1e3), a = (s.getMonth() + 1).toString(), r = s.getDate().toString(), o = s.getHours().toString(); r === "24" && console.log("timestamp", n), a.length === 1 && (a = "0" + a), r.length === 1 && (r = "0" + r), o.length === 1 && (o = "0" + o); let c = a + "-" + r; if (u === "hour") c += " " + o + ":00"; else if (u === "week") { let h = new Date(n * 1e3 + 5184e5), F = (h.getMonth() + 1).toString(), g = h.getDate().toString(); F.length === 1 && (F = "0" + F), g.length === 1 && (g = "0" + g), c += " - " + F + "-" + g } return c } function ka(n, u) { let s = new Blob([n], { type: "text/plain;charset=utf-8" }), a = URL.createObjectURL(s), r = document.createElement("a"); r.href = a, r.download = u, r.click() } const gt = n => { try { JSON.parse(n) } catch { return !1 } return !0 }; function _a(n) { return !localStorage.getItem(`prompt-${n}`) } function ct(n, u) { const s = []; for (const a in n) n.hasOwnProperty(a) && u.hasOwnProperty(a) && n[a] !== u[a] && s.push({ key: a, oldValue: n[a], newValue: u[a] }); return s } let W = rs.create({ baseURL: "", headers: { "New-API-User": Zn(), "Cache-Control": "no-store" } }); function Nt() { W = rs.create({ baseURL: "", headers: { "New-API-User": Zn(), "Cache-Control": "no-store" } }) } W.interceptors.response.use(n => n, n => { b(n) }); function Yt(n) { if (n === "") return e.jsx(K, { size: "large", color: "orange", children: Pe.t("用户分组") }, "default"); const u = { vip: "yellow", pro: "yellow", svip: "red", premium: "red" }, s = n.split(",").sort(); return e.jsx("span", { children: s.map(a => e.jsx(K, { size: "large", color: u[a] || Xt(a), onClick: async r => { r.stopPropagation(), await nt(a) ? ie(Pe.t("已复制：") + a) : De.error({ title: t("无法复制到剪贴板，请手动复制"), content: a }) }, children: a }, a)) }, n) } function Ta(n) { let u = "green"; return n > 5 ? u = "red" : n > 3 ? u = "orange" : n > 1 && (u = "blue"), e.jsxs(K, { color: u, children: [n, "x ", Pe.t("倍率")] }) } const ds = n => { const { disabled: u, selected: s, label: a, value: r, focused: o, className: c, style: h, onMouseEnter: F, onClick: g, empty: p, emptyContent: m, ...d } = n, E = { display: "flex", justifyContent: "space-between", alignItems: "center", padding: "8px 16px", cursor: u ? "not-allowed" : "pointer", backgroundColor: o ? "var(--semi-color-fill-0)" : "transparent", opacity: u ? .5 : 1, ...s && { backgroundColor: "var(--semi-color-primary-light-default)" }, "&:hover": { backgroundColor: !u && "var(--semi-color-fill-1)" } }, _ = () => { !u && g && g() }, I = T => { !u && F && F(T) }; return e.jsxs("div", { style: E, onClick: _, onMouseEnter: I, children: [e.jsxs("div", { style: { display: "flex", flexDirection: "column", gap: "4px" }, children: [e.jsx(ne.Text, { strong: !0, type: u ? "tertiary" : void 0, children: r }), e.jsx(ne.Text, { type: "secondary", size: "small", children: a })] }), n.ratio && Ta(n.ratio)] }) }; function En(n) { return n >= 1e9 ? (n / 1e9).toFixed(1) + "B" : n >= 1e6 ? (n / 1e6).toFixed(1) + "M" : n >= 1e4 ? (n / 1e3).toFixed(1) + "k" : n } function Ia(n) { if (n === void 0) return ""; if (n = n.toFixed(2), n >= 1e5) { let u = n.toString(), s = u.indexOf("."), a = u, r = ""; return s !== -1 && (a = u.slice(0, s), r = u.slice(s)), a.slice(0, 2) + ".." + a.slice(-2) + r } return n } function hn() { let n = localStorage.getItem("quota_per_unit"); return n = parseFloat(n), n } function Pa(n) { let u = localStorage.getItem("quota_per_unit"); return u = parseFloat(u), n = parseFloat(n), u * n } function Zo(n, u = 6) { let s = localStorage.getItem("quota_per_unit"); return s = parseFloat(s), (n / s).toFixed(u) } function Ma(n) { let u = localStorage.getItem("display_in_currency"); return u = u === "true", u ? "$" + n : Pa(n) } function ve(n, u = 2) { let s = localStorage.getItem("quota_per_unit"), a = localStorage.getItem("display_in_currency"); return s = parseFloat(s), a = a === "true", a ? "$" + (n / s).toFixed(u) : En(n) } function Oa(n, u, s, a = -1, r, o) { if (a !== -1) return Pe.t("模型价格：${{price}} * 分组倍率：{{ratio}} = ${{total}}", { price: a, ratio: o, total: a * o }); { r === void 0 && (r = 0); let c = s * 2, h = s * 2 * r, F = n / 1e6 * c * o + u / 1e6 * h * o; return e.jsx(e.Fragment, { children: e.jsxs("article", { children: [e.jsx("p", { children: Pe.t("提示：${{price}} * {{ratio}} = ${{total}} / 1M tokens", { price: c, ratio: o, total: c * o }) }), e.jsx("p", { children: Pe.t("补全：${{price}} * {{ratio}} = ${{total}} / 1M tokens", { price: h, ratio: o, total: h * o }) }), e.jsx("p", {}), e.jsx("p", { children: Pe.t("提示 {{input}} tokens / 1M tokens * ${{price}} + 补全 {{completion}} tokens / 1M tokens * ${{compPrice}} * 分组 {{ratio}} = ${{total}}", { input: n, price: c, completion: u, compPrice: h, ratio: o, total: F.toFixed(6) }) }), e.jsx("p", { children: Pe.t("仅供参考，以实际扣费为准") })] }) }) } } function La(n, u = -1, s) { return u !== -1 ? Pe.t("价格：${{price}} * 分组：{{ratio}}", { price: u, ratio: s }) : Pe.t("模型: {{ratio}} * 分组: {{groupRatio}}", { ratio: n, groupRatio: s }) } function Ra(n, u, s, a = -1, r, o, c, h, F, g) { if (a !== -1) return "模型价格：$" + a + " * 分组倍率：" + g + " = $" + a * g; { r === void 0 && (r = 0), h = parseFloat(h).toFixed(6); let p = s * 2, m = s * 2 * r, d = n / 1e6 * p * g + u / 1e6 * m * g + o / 1e6 * p * h * g + c / 1e6 * p * h * F * g; return e.jsx(e.Fragment, { children: e.jsxs("article", { children: [e.jsx("p", { children: Pe.t("提示：${{price}} * {{ratio}} = ${{total}} / 1M tokens", { price: p, ratio: g, total: p * g }) }), e.jsx("p", { children: Pe.t("补全：${{price}} * {{ratio}} = ${{total}} / 1M tokens", { price: m, ratio: g, total: m * g }) }), e.jsx("p", { children: Pe.t("音频提示：${{price}} * {{ratio}} * {{audioRatio}} = ${{total}} / 1M tokens", { price: p, ratio: g, audioRatio: h, total: p * h * g }) }), e.jsx("p", { children: Pe.t("音频补全：${{price}} * {{ratio}} * {{audioRatio}} * {{audioCompRatio}} = ${{total}} / 1M tokens", { price: p, ratio: g, audioRatio: h, audioCompRatio: F, total: p * h * F * g }) }), e.jsx("p", { children: Pe.t("文字提示 {{input}} tokens / 1M tokens * ${{price}} + 文字补全 {{completion}} tokens / 1M tokens * ${{compPrice}} +", { input: n, price: p, completion: u, compPrice: m }) }), e.jsx("p", { children: Pe.t("音频提示 {{input}} tokens / 1M tokens * ${{price}} * {{audioRatio}} + 音频补全 {{completion}} tokens / 1M tokens * ${{price}} * {{audioRatio}} * {{audioCompRatio}}", { input: o, completion: c, price: p, audioRatio: h, audioCompRatio: F }) }), e.jsx("p", { children: Pe.t("（文字 + 音频）* 分组倍率 {{ratio}} = ${{total}}", { ratio: g, total: d.toFixed(6) }) }), e.jsx("p", { children: Pe.t("仅供参考，以实际扣费为准") })] }) }) } } function Zt(n, u) { let s = localStorage.getItem("display_in_currency"); return s = s === "true", s ? "|" + Pe.t("等价金额") + ": " + ve(n, u) : "" } const Fu = ["amber", "blue", "cyan", "green", "grey", "indigo", "light-blue", "lime", "orange", "pink", "purple", "red", "teal", "violet", "yellow"], Na = ["#1664FF", "#1AC6FF", "#FF8A00", "#3CC780", "#7442D4", "#FFC400", "#304D77", "#B48DEB", "#009488", "#FF7DDA"], $a = ["#1664FF", "#B2CFFF", "#1AC6FF", "#94EFFF", "#FF8A00", "#FFCE7A", "#3CC780", "#B9EDCD", "#7442D4", "#DDC5FA", "#FFC400", "#FAE878", "#304D77", "#8B959E", "#B48DEB", "#EFE3FF", "#009488", "#59BAA8", "#FF7DDA", "#FFCFEE"], xu = { "dall-e": "rgb(147,112,219)", "dall-e-3": "rgb(153,50,204)", "gpt-3.5-turbo": "rgb(184,227,167)", "gpt-3.5-turbo-0613": "rgb(60,179,113)", "gpt-3.5-turbo-1106": "rgb(32,178,170)", "gpt-3.5-turbo-16k": "rgb(149,252,206)", "gpt-3.5-turbo-16k-0613": "rgb(119,255,214)", "gpt-3.5-turbo-instruct": "rgb(175,238,238)", "gpt-4": "rgb(135,206,235)", "gpt-4-0613": "rgb(100,149,237)", "gpt-4-1106-preview": "rgb(30,144,255)", "gpt-4-0125-preview": "rgb(2,177,236)", "gpt-4-turbo-preview": "rgb(2,177,255)", "gpt-4-32k": "rgb(104,111,238)", "gpt-4-32k-0613": "rgb(61,71,139)", "gpt-4-all": "rgb(65,105,225)", "gpt-4-gizmo-*": "rgb(0,0,255)", "gpt-4-vision-preview": "rgb(25,25,112)", "text-ada-001": "rgb(255,192,203)", "text-babbage-001": "rgb(255,160,122)", "text-curie-001": "rgb(219,112,147)", "text-davinci-003": "rgb(219,112,147)", "text-davinci-edit-001": "rgb(255,105,180)", "text-embedding-ada-002": "rgb(255,182,193)", "text-embedding-v1": "rgb(255,174,185)", "text-moderation-latest": "rgb(255,130,171)", "text-moderation-stable": "rgb(255,160,122)", "tts-1": "rgb(255,140,0)", "tts-1-1106": "rgb(255,165,0)", "tts-1-hd": "rgb(255,215,0)", "tts-1-hd-1106": "rgb(255,223,0)", "whisper-1": "rgb(245,245,220)", "claude-3-opus-20240229": "rgb(255,132,31)", "claude-3-sonnet-20240229": "rgb(253,135,93)", "claude-3-haiku-20240307": "rgb(255,175,146)", "claude-2.1": "rgb(255,209,190)" }; function Xo(n) { if (xu[n]) return xu[n]; let u = 0; for (let r = 0; r < n.length; r++)u = (u << 5) - u + n.charCodeAt(r), u = u & u; u = Math.abs(u); const s = n.length > 10 ? $a : Na, a = u % s.length; return s[a] } function Xt(n) { let u = 0; for (let a = 0; a < n.length; a++)u += n.charCodeAt(a); let s = u % Fu.length; return Fu[s] } const Ua = n => { const u = { username: "", display_name: "", password: "" }, [s, a] = i.useState(u), [r, o] = i.useState(!1), { username: c, display_name: h, password: F } = s, g = (d, E) => { a(_ => ({ ..._, [d]: E })) }, p = async () => { if (o(!0), s.username === "" || s.password === "") { o(!1), b("用户名和密码不能为空！"); return } const d = await W.post("/api/user/", s), { success: E, message: _ } = d.data; E ? (ie("用户账户创建成功！"), a(u), n.refresh(), n.handleClose()) : b(_), o(!1) }, m = () => { n.handleClose() }; return e.jsx(e.Fragment, { children: e.jsx(qt, { placement: "left", title: e.jsx(jt, { level: 3, children: "添加用户" }), headerStyle: { borderBottom: "1px solid var(--semi-color-border)" }, bodyStyle: { borderBottom: "1px solid var(--semi-color-border)" }, visible: n.visible, footer: e.jsx("div", { style: { display: "flex", justifyContent: "flex-end" }, children: e.jsxs(ye, { children: [e.jsx($, { theme: "solid", size: "large", onClick: p, children: "提交" }), e.jsx($, { theme: "solid", size: "large", type: "tertiary", onClick: m, children: "取消" })] }) }), closeIcon: null, onCancel: () => m(), width: ut() ? "100%" : 600, children: e.jsxs(Me, { spinning: r, children: [e.jsx(he, { style: { marginTop: 20 }, label: "用户名", name: "username", addonBefore: "用户名", placeholder: "请输入用户名", onChange: d => g("username", d), value: c, autoComplete: "off" }), e.jsx(he, { style: { marginTop: 20 }, addonBefore: "显示名", label: "显示名称", name: "display_name", autoComplete: "off", placeholder: "请输入显示名称", onChange: d => g("display_name", d), value: h }), e.jsx(he, { style: { marginTop: 20 }, label: "密 码", name: "password", type: "password", addonBefore: "密码", placeholder: "请输入密码", onChange: d => g("password", d), value: F, autoComplete: "off" })] }) }) }) }, Gn = n => { const u = n.editingUser.id, [s, a] = i.useState(!0), [r, o] = i.useState(!1), [c, h] = i.useState(""), [F, g] = i.useState({ username: "", display_name: "", password: "", github_id: "", wechat_id: "", email: "", quota: 0, group: "default" }), [p, m] = i.useState([]), { username: d, display_name: E, password: _, github_id: I, wechat_id: T, telegram_id: H, email: ae, quota: Z, group: O } = F, A = (P, j) => { g(R => ({ ...R, [P]: j })) }, Y = async () => { try { let P = await W.get("/api/group/"); m(P.data.data.map(j => ({ label: j, value: j }))) } catch (P) { b(P.message) } }; it(); const N = () => { n.handleClose() }, U = async () => { a(!0); let P; u ? P = await W.get(`/api/user/${u}`) : P = await W.get("/api/user/self"); const { success: j, message: R, data: v } = P.data; j ? (v.password = "", g(v)) : b(R), a(!1) }; i.useEffect(() => { U().then(), u && Y().then() }, [n.editingUser.id]); const q = async () => { a(!0); let P; if (u) { let v = { ...F, id: parseInt(u) }; typeof v.quota == "string" && (v.quota = parseInt(v.quota)), P = await W.put("/api/user/", v) } else P = await W.put("/api/user/self", F); const { success: j, message: R } = P.data; j ? (ie("用户信息更新成功！"), n.refresh(), n.handleClose()) : b(R), a(!1) }, w = () => { let P = parseInt(Z) + parseInt(c); g(j => ({ ...j, quota: P })) }, V = () => { h("0"), o(!0) }, { t: C } = Ce(); return e.jsxs(e.Fragment, { children: [e.jsx(qt, { placement: "right", title: e.jsx(jt, { level: 3, children: C("编辑用户") }), headerStyle: { borderBottom: "1px solid var(--semi-color-border)" }, bodyStyle: { borderBottom: "1px solid var(--semi-color-border)" }, visible: n.visible, footer: e.jsx("div", { style: { display: "flex", justifyContent: "flex-end" }, children: e.jsxs(ye, { children: [e.jsx($, { theme: "solid", size: "large", onClick: q, children: C("提交") }), e.jsx($, { theme: "solid", size: "large", type: "tertiary", onClick: N, children: C("取消") })] }) }), closeIcon: null, onCancel: () => N(), width: ut() ? "100%" : 600, children: e.jsxs(Me, { spinning: s, children: [e.jsx("div", { style: { marginTop: 20 }, children: e.jsx(ne.Text, { children: C("用户名") }) }), e.jsx(he, { label: C("用户名"), name: "username", placeholder: C("请输入新的用户名"), onChange: P => A("username", P), value: d, autoComplete: "new-password" }), e.jsx("div", { style: { marginTop: 20 }, children: e.jsx(ne.Text, { children: C("密码") }) }), e.jsx(he, { label: C("密码"), name: "password", type: "password", placeholder: C("请输入新的密码，最短 8 位"), onChange: P => A("password", P), value: _, autoComplete: "new-password" }), e.jsx("div", { style: { marginTop: 20 }, children: e.jsx(ne.Text, { children: C("显示名称") }) }), e.jsx(he, { label: C("显示名称"), name: "display_name", placeholder: C("请输入新的显示名称"), onChange: P => A("display_name", P), value: E, autoComplete: "new-password" }), u && e.jsxs(e.Fragment, { children: [e.jsx("div", { style: { marginTop: 20 }, children: e.jsx(ne.Text, { children: C("分组") }) }), e.jsx(Ue, { placeholder: C("请选择分组"), name: "group", fluid: !0, search: !0, selection: !0, allowAdditions: !0, additionLabel: C("请在系统设置页面编辑分组倍率以添加新的分组："), onChange: P => A("group", P), value: F.group, autoComplete: "new-password", optionList: p }), e.jsx("div", { style: { marginTop: 20 }, children: e.jsx(ne.Text, { children: `${C("剩余额度")}${Zt(Z)}` }) }), e.jsxs(ye, { children: [e.jsx(he, { name: "quota", placeholder: C("请输入新的剩余额度"), onChange: P => A("quota", P), value: Z, type: "number", autoComplete: "new-password" }), e.jsx($, { onClick: V, children: C("添加额度") })] })] }), e.jsx(Ct, { style: { marginTop: 20 }, children: C("以下信息不可修改") }), e.jsx("div", { style: { marginTop: 20 }, children: e.jsx(ne.Text, { children: C("已绑定的 GitHub 账户") }) }), e.jsx(he, { name: "github_id", value: I, autoComplete: "new-password", placeholder: C("此项只读，需要用户通过个人设置页面的相关绑定按钮进行绑定，不可直接修改"), readonly: !0 }), e.jsx("div", { style: { marginTop: 20 }, children: e.jsx(ne.Text, { children: C("已绑定的微信账户") }) }), e.jsx(he, { name: "wechat_id", value: T, autoComplete: "new-password", placeholder: C("此项只读，需要用户通过个人设置页面的相关绑定按钮进行绑定，不可直接修改"), readonly: !0 }), e.jsx("div", { style: { marginTop: 20 }, children: e.jsx(ne.Text, { children: C("已绑定的邮箱账户") }) }), e.jsx(he, { name: "email", value: ae, autoComplete: "new-password", placeholder: C("此项只读，需要用户通过个人设置页面的相关绑定按钮进行绑定，不可直接修改"), readonly: !0 }), e.jsx("div", { style: { marginTop: 20 }, children: e.jsx(ne.Text, { children: C("已绑定的Telegram账户") }) }), e.jsx(he, { name: "telegram_id", value: H, autoComplete: "new-password", placeholder: C("此项只读，需要用户通过个人设置页面的相关绑定按钮进行绑定，不可直接修改"), readonly: !0 })] }) }), e.jsxs(De, { centered: !0, visible: r, onOk: () => { w(), o(!1) }, onCancel: () => o(!1), closable: null, children: [e.jsx("div", { style: { marginTop: 20 }, children: e.jsx(ne.Text, { children: `${C("新额度")}${ve(Z)} + ${ve(c)} = ${ve(Z + parseInt(c))}` }) }), e.jsx(he, { name: "addQuotaLocal", placeholder: C("需要添加的额度（支持负数）"), onChange: P => { h(P) }, value: c, type: "number", autoComplete: "new-password" })] })] }) }, za = () => { const { t: n } = Ce(); function u(D) { switch (D) { case 1: return e.jsx(K, { size: "large", children: n("普通用户") }); case 10: return e.jsx(K, { color: "yellow", size: "large", children: n("管理员") }); case 100: return e.jsx(K, { color: "orange", size: "large", children: n("超级管理员") }); default: return e.jsx(K, { color: "red", size: "large", children: n("未知身份") }) } } const s = [{ title: "ID", dataIndex: "id" }, { title: n("用户名"), dataIndex: "username" }, { title: n("分组"), dataIndex: "group", render: (D, B, k) => e.jsx("div", { children: Yt(D) }) }, { title: n("统计信息"), dataIndex: "info", render: (D, B, k) => e.jsx("div", { children: e.jsxs(ye, { spacing: 1, children: [e.jsx(tt, { content: n("剩余额度"), children: e.jsx(K, { color: "white", size: "large", children: ve(B.quota) }) }), e.jsx(tt, { content: n("已用额度"), children: e.jsx(K, { color: "white", size: "large", children: ve(B.used_quota) }) }), e.jsx(tt, { content: n("调用次数"), children: e.jsx(K, { color: "white", size: "large", children: En(B.request_count) }) })] }) }) }, { title: n("邀请信息"), dataIndex: "invite", render: (D, B, k) => e.jsx("div", { children: e.jsxs(ye, { spacing: 1, children: [e.jsx(tt, { content: n("邀请人数"), children: e.jsx(K, { color: "white", size: "large", children: En(B.aff_count) }) }), e.jsx(tt, { content: n("邀请总收益"), children: e.jsx(K, { color: "white", size: "large", children: ve(B.aff_history_quota) }) }), e.jsx(tt, { content: n("邀请人ID"), children: B.inviter_id === 0 ? e.jsx(K, { color: "white", size: "large", children: n("无") }) : e.jsx(K, { color: "white", size: "large", children: B.inviter_id }) })] }) }) }, { title: n("角色"), dataIndex: "role", render: (D, B, k) => e.jsx("div", { children: u(D) }) }, { title: n("状态"), dataIndex: "status", render: (D, B, k) => e.jsx("div", { children: B.DeletedAt !== null ? e.jsx(K, { color: "red", children: n("已注销") }) : R(D) }) }, { title: "", dataIndex: "operate", render: (D, B, k) => e.jsx("div", { children: B.DeletedAt !== null ? e.jsx(e.Fragment, {}) : e.jsxs(e.Fragment, { children: [e.jsx(Ye, { title: n("确定？"), okType: "warning", onConfirm: () => { j(B.id, "promote", B) }, children: e.jsx($, { theme: "light", type: "warning", style: { marginRight: 1 }, children: n("提升") }) }), e.jsx(Ye, { title: n("确定？"), okType: "warning", onConfirm: () => { j(B.id, "demote", B) }, children: e.jsx($, { theme: "light", type: "secondary", style: { marginRight: 1 }, children: n("降级") }) }), B.status === 1 ? e.jsx($, { theme: "light", type: "warning", style: { marginRight: 1 }, onClick: async () => { j(B.id, "disable", B) }, children: n("禁用") }) : e.jsx($, { theme: "light", type: "secondary", style: { marginRight: 1 }, onClick: async () => { j(B.id, "enable", B) }, disabled: B.status === 3, children: n("启用") }), e.jsx($, { theme: "light", type: "tertiary", style: { marginRight: 1 }, onClick: () => { w(B), U(!0) }, children: n("编辑") }), e.jsx(Ye, { title: n("确定是否要注销此用户？"), content: n("相当于删除用户，此修改将不可逆"), okType: "danger", position: "left", onConfirm: () => { j(B.id, "delete", B).then(() => { V(B.id) }) }, children: e.jsx($, { theme: "light", type: "danger", style: { marginRight: 1 }, children: n("注销") }) })] }) }) }], [a, r] = i.useState([]), [o, c] = i.useState(!0), [h, F] = i.useState(1), [g, p] = i.useState(_e), [m, d] = i.useState(""), [E, _] = i.useState(!1), [I, T] = i.useState(""), [H, ae] = i.useState([]), [Z, O] = i.useState(_e), [A, Y] = i.useState(!1), [N, U] = i.useState(!1), [q, w] = i.useState({ id: void 0 }), V = D => { let B = [...a]; if (D != null) { let k = B.findIndex(J => J.id === D); k > -1 && (B[k].DeletedAt = new Date, r(B)) } }, C = D => { for (let B = 0; B < D.length; B++)D[B].key = D[B].id; r(D) }, P = async (D, B) => { const k = await W.get(`/api/user/?p=${D}&page_size=${B}`), { success: J, message: Q, data: ce } = k.data; if (J) { const pe = ce.items; F(ce.page), O(ce.total), C(pe) } else b(Q); c(!1) }; i.useEffect(() => { P(0, g).then().catch(D => { b(D) }), X().then() }, []); const j = async (D, B, k) => { const J = await W.post("/api/user/manage", { id: D, action: B }), { success: Q, message: ce } = J.data; if (Q) { ie("操作成功完成！"); let pe = J.data.data, ge = [...a]; B === "delete" || (k.status = pe.status, k.role = pe.role), r(ge) } else b(ce) }, R = D => { switch (D) { case 1: return e.jsx(K, { size: "large", children: n("已激活") }); case 2: return e.jsx(K, { size: "large", color: "red", children: n("已封禁") }); default: return e.jsx(K, { size: "large", color: "grey", children: n("未知状态") }) } }, v = async (D, B, k, J) => { if (k === "" && J === "") { await P(D, B); return } _(!0); const Q = await W.get(`/api/user/search?keyword=${k}&group=${J}&p=${D}&page_size=${B}`), { success: ce, message: pe, data: ge } = Q.data; if (ce) { const xe = ge.items; F(ge.page), O(ge.total), C(xe) } else b(pe); _(!1) }, l = async D => { d(D.trim()) }, f = D => { F(D), m === "" && I === "" ? P(D, g).then() : v(D, g, m, I).then() }, y = () => { Y(!1) }, x = () => { U(!1), w({ id: void 0 }) }, S = async () => { F(1), m === "" ? await P(h, g) : await v(m, I) }, X = async () => { try { let D = await W.get("/api/group/"); if (D === void 0) return; ae(D.data.data.map(B => ({ label: B, value: B }))) } catch (D) { b(D.message) } }, te = async D => { localStorage.setItem("page-size", D + ""), p(D), F(1), P(h, D).then().catch(B => { b(B) }) }; return e.jsxs(e.Fragment, { children: [e.jsx(Ua, { refresh: S, visible: A, handleClose: y }), e.jsx(Gn, { refresh: S, visible: N, handleClose: x, editingUser: q }), e.jsx(M, { onSubmit: () => { v(h, g, m, I) }, labelPosition: "left", children: e.jsx("div", { style: { display: "flex" }, children: e.jsxs(ye, { children: [e.jsx(tt, { content: n("支持搜索用户的 ID、用户名、显示名称和邮箱地址"), children: e.jsx(M.Input, { label: n("搜索关键字"), icon: "search", field: "keyword", iconPosition: "left", placeholder: n("搜索关键字"), value: m, loading: E, onChange: D => l(D) }) }), e.jsx(M.Select, { field: "group", label: n("分组"), optionList: H, onChange: D => { T(D), v(h, g, m, D) } }), e.jsx($, { label: n("查询"), type: "primary", htmlType: "submit", className: "btn-margin-right", children: n("查询") }), e.jsx($, { theme: "light", type: "primary", onClick: () => { Y(!0) }, children: n("添加用户") })] }) }) }), e.jsx(ft, { columns: s, dataSource: a, pagination: { formatPageText: D => n("第 {{start}} - {{end}} 条，共 {{total}} 条", { start: D.currentStart, end: D.currentEnd, total: a.length }), currentPage: h, pageSize: g, total: Z, pageSizeOpts: [10, 20, 50, 100], showSizeChanger: !0, onPageSizeChange: D => { te(D) }, onPageChange: f }, loading: o })] }) }, Wa = () => { const { t: n } = Ce(); return e.jsx(e.Fragment, { children: e.jsxs(Fe, { children: [e.jsx(Fe.Header, { children: e.jsx("h3", { children: n("管理用户") }) }), e.jsx(Fe.Content, { children: e.jsx(za, {}) })] }) }) }; function Qe({ children: n }) { return localStorage.getItem("user") ? n : e.jsx(da, { to: "/login", state: { from: Aa.location } }) } async function hs() { let n = "/api/oauth/state", u = localStorage.getItem("aff"); u && u.length > 0 && (n += `?aff=${u}`); const s = await W.get(n), { success: a, message: r, data: o } = s.data; return a ? o : (b(r), "") } async function Xn(n) { const u = await hs(); u && window.open(`https://github.com/login/oauth/authorize?client_id=${n}&state=${u}&scope=user:email`) } async function eu(n) { const u = await hs(); u && window.open(`https://connect.linux.do/oauth2/authorize?response_type=code&client_id=${n}&state=${u}`) } let xt; async function qa() { const n = await W.get("/api/models"), { success: u, data: s } = n.data; u && (xt = s, localStorage.setItem("channel_models", JSON.stringify(s))) } function xn(n) { if (xt !== void 0 && n in xt) return xt[n] ? xt[n] : []; let u = localStorage.getItem("channel_models"); return u ? (xt = JSON.parse(u), n in xt ? xt[n] : []) : [] } const ps = n => { function u() { return e.jsx("svg", { className: "icon", viewBox: "0 0 24 24", version: "1.1", xmlns: "http://www.w3.org/2000/svg", width: "1em", height: "1em", ...n, children: e.jsx("path", { d: "M19.7,17.6c-0.1-0.2-0.2-0.4-0.2-0.6c0-0.4-0.2-0.7-0.5-1c-0.1-0.1-0.3-0.2-0.4-0.2c0.6-1.8-0.3-3.6-1.3-4.9c0,0,0,0,0,0c-0.8-1.2-2-2.1-1.9-3.7c0-1.9,0.2-5.4-3.3-5.1C8.5,2.3,9.5,6,9.4,7.3c0,1.1-0.5,2.2-1.3,3.1c-0.2,0.2-0.4,0.5-0.5,0.7c-1,1.2-1.5,2.8-1.5,4.3c-0.2,0.2-0.4,0.4-0.5,0.6c-0.1,0.1-0.2,0.2-0.2,0.3c-0.1,0.1-0.3,0.2-0.5,0.3c-0.4,0.1-0.7,0.3-0.9,0.7c-0.1,0.3-0.2,0.7-0.1,1.1c0.1,0.2,0.1,0.4,0,0.7c-0.2,0.4-0.2,0.9,0,1.4c0.3,0.4,0.8,0.5,1.5,0.6c0.5,0,1.1,0.2,1.6,0.4l0,0c0.5,0.3,1.1,0.5,1.7,0.5c0.3,0,0.7-0.1,1-0.2c0.3-0.2,0.5-0.4,0.6-0.7c0.4,0,1-0.2,1.7-0.2c0.6,0,1.2,0.2,2,0.1c0,0.1,0,0.2,0.1,0.3c0.2,0.5,0.7,0.9,1.3,1c0.1,0,0.1,0,0.2,0c0.8-0.1,1.6-0.5,2.1-1.1l0,0c0.4-0.4,0.9-0.7,1.4-0.9c0.6-0.3,1-0.5,1.1-1C20.3,18.6,20.1,18.2,19.7,17.6z M12.8,4.8c0.6,0.1,1.1,0.6,1,1.2c0,0.3-0.1,0.6-0.3,0.9c0,0,0,0-0.1,0c-0.2-0.1-0.3-0.1-0.4-0.2c0.1-0.1,0.1-0.3,0.2-0.5c0-0.4-0.2-0.7-0.4-0.7c-0.3,0-0.5,0.3-0.5,0.7c0,0,0,0.1,0,0.1c-0.1-0.1-0.3-0.1-0.4-0.2c0,0,0-0.1,0-0.1C11.8,5.5,12.2,4.9,12.8,4.8z M12.5,6.8c0.1,0.1,0.3,0.2,0.4,0.2c0.1,0,0.3,0.1,0.4,0.2c0.2,0.1,0.4,0.2,0.4,0.5c0,0.3-0.3,0.6-0.9,0.8c-0.2,0.1-0.3,0.1-0.4,0.2c-0.3,0.2-0.6,0.3-1,0.3c-0.3,0-0.6-0.2-0.8-0.4c-0.1-0.1-0.2-0.2-0.4-0.3C10.1,8.2,9.9,8,9.8,7.7c0-0.1,0.1-0.2,0.2-0.3c0.3-0.2,0.4-0.3,0.5-0.4l0.1-0.1c0.2-0.3,0.6-0.5,1-0.5C11.9,6.5,12.2,6.6,12.5,6.8z M10.4,5c0.4,0,0.7,0.4,0.8,1.1c0,0.1,0,0.1,0,0.2c-0.1,0-0.3,0.1-0.4,0.2c0,0,0-0.1,0-0.2c0-0.3-0.2-0.6-0.4-0.5c-0.2,0-0.3,0.3-0.3,0.6c0,0.2,0.1,0.3,0.2,0.4l0,0c0,0-0.1,0.1-0.2,0.1C9.9,6.7,9.7,6.4,9.7,6.1C9.7,5.5,10,5,10.4,5z M9.4,21.1c-0.7,0.3-1.6,0.2-2.2-0.2c-0.6-0.3-1.1-0.4-1.8-0.4c-0.5-0.1-1-0.1-1.1-0.3c-0.1-0.2-0.1-0.5,0.1-1c0.1-0.3,0.1-0.6,0-0.9c-0.1-0.3-0.1-0.5,0-0.8C4.5,17.2,4.7,17.1,5,17c0.3-0.1,0.5-0.2,0.7-0.4c0.1-0.1,0.2-0.2,0.3-0.4c0.3-0.4,0.5-0.6,0.8-0.6c0.6,0.1,1.1,1,1.5,1.9c0.2,0.3,0.4,0.7,0.7,1c0.4,0.5,0.9,1.2,0.9,1.6C9.9,20.6,9.7,20.9,9.4,21.1z M14.3,18.9c0,0.1,0,0.1-0.1,0.2c-1.2,0.9-2.8,1-4.1,0.3c-0.2-0.3-0.4-0.6-0.6-0.9c0.9-0.1,0.7-1.3-1.2-2.5c-2-1.3-0.6-3.7,0.1-4.8c0.1-0.1,0.1,0-0.3,0.8c-0.3,0.6-0.9,2.1-0.1,3.2c0-0.8,0.2-1.6,0.5-2.4c0.7-1.3,1.2-2.8,1.5-4.3c0.1,0.1,0.1,0.1,0.2,0.1c0.1,0.1,0.2,0.2,0.3,0.2c0.2,0.3,0.6,0.4,0.9,0.4c0,0,0.1,0,0.1,0c0.4,0,0.8-0.1,1.1-0.4c0.1-0.1,0.2-0.2,0.4-0.2c0.3-0.1,0.6-0.3,0.9-0.6c0.4,1.3,0.8,2.5,1.4,3.6c0.4,0.8,0.7,1.6,0.9,2.5c0.3,0,0.7,0.1,1,0.3c0.8,0.4,1.1,0.7,1,1.2c-0.1,0-0.1,0-0.2,0c0-0.3-0.2-0.6-0.9-0.9c-0.7-0.3-1.3-0.3-1.5,0.4c-0.1,0-0.2,0.1-0.3,0.1c-0.8,0.4-0.8,1.5-0.9,2.6C14.5,18.2,14.4,18.5,14.3,18.9z M18.9,19.5c-0.6,0.2-1.1,0.6-1.5,1.1c-0.4,0.6-1.1,1-1.9,0.9c-0.4,0-0.8-0.3-0.9-0.7c-0.1-0.6-0.1-1.2,0.2-1.8c0.1-0.4,0.2-0.7,0.3-1.1c0.1-1.2,0.1-1.9,0.6-2.2h0c0,0.5,0.3,0.8,0.7,1c0.5,0,1-0.1,1.4-0.5c0.1,0,0.1,0,0.2,0c0.3,0,0.5,0,0.7,0.2c0.2,0.2,0.3,0.5,0.3,0.7c0,0.3,0.2,0.6,0.3,0.9c0.5,0.5,0.5,0.8,0.5,0.9C19.7,19.1,19.3,19.3,18.9,19.5z M9.9,7.5c-0.1,0-0.1,0-0.1,0.1c0,0,0,0.1,0.1,0.1c0,0,0,0,0,0c0.1,0,0.1,0.1,0.1,0.1c0.3,0.4,0.8,0.6,1.4,0.7c0.5-0.1,1-0.2,1.5-0.6c0.2-0.1,0.4-0.2,0.6-0.3c0.1,0,0.1-0.1,0.1-0.1c0-0.1,0-0.1-0.1-0.1l0,0c-0.2,0.1-0.5,0.2-0.7,0.3c-0.4,0.3-0.9,0.5-1.4,0.5c-0.5,0-0.9-0.3-1.2-0.6C10.1,7.6,10,7.5,9.9,7.5z", fill: "currentColor" }) }) } return e.jsx(Bn, { svg: e.jsx(u, {}) }) }, ms = () => { function n() { return e.jsxs("svg", { t: "1709714447384", className: "icon", viewBox: "0 0 1024 1024", version: "1.1", xmlns: "http://www.w3.org/2000/svg", "p-id": "5091", width: "16", height: "16", children: [e.jsx("path", { d: "M690.1 377.4c5.9 0 11.8 0.2 17.6 0.5-24.4-128.7-158.3-227.1-319.9-227.1C209 150.8 64 271.4 64 420.2c0 81.1 43.6 154.2 111.9 203.6 5.5 3.9 9.1 10.3 9.1 17.6 0 2.4-0.5 4.6-1.1 6.9-5.5 20.3-14.2 52.8-14.6 54.3-0.7 2.6-1.7 5.2-1.7 7.9 0 5.9 4.8 10.8 10.8 10.8 2.3 0 4.2-0.9 6.2-2l70.9-40.9c5.3-3.1 11-5 17.2-5 3.2 0 6.4 0.5 9.5 1.4 33.1 9.5 68.8 14.8 105.7 14.8 6 0 11.9-0.1 17.8-0.4-7.1-21-10.9-43.1-10.9-66 0-135.8 132.2-245.8 295.3-245.8z m-194.3-86.5c23.8 0 43.2 19.3 43.2 43.1s-19.3 43.1-43.2 43.1c-23.8 0-43.2-19.3-43.2-43.1s19.4-43.1 43.2-43.1z m-215.9 86.2c-23.8 0-43.2-19.3-43.2-43.1s19.3-43.1 43.2-43.1 43.2 19.3 43.2 43.1-19.4 43.1-43.2 43.1z", "p-id": "5092" }), e.jsx("path", { d: "M866.7 792.7c56.9-41.2 93.2-102 93.2-169.7 0-124-120.8-224.5-269.9-224.5-149 0-269.9 100.5-269.9 224.5S540.9 847.5 690 847.5c30.8 0 60.6-4.4 88.1-12.3 2.6-0.8 5.2-1.2 7.9-1.2 5.2 0 9.9 1.6 14.3 4.1l59.1 34c1.7 1 3.3 1.7 5.2 1.7 2.4 0 4.7-0.9 6.4-2.6 1.7-1.7 2.6-4 2.6-6.4 0-2.2-0.9-4.4-1.4-6.6-0.3-1.2-7.6-28.3-12.2-45.3-0.5-1.9-0.9-3.8-0.9-5.7 0.1-5.9 3.1-11.2 7.6-14.5zM600.2 587.2c-19.9 0-36-16.1-36-35.9 0-19.8 16.1-35.9 36-35.9s36 16.1 36 35.9c0 19.8-16.2 35.9-36 35.9z m179.9 0c-19.9 0-36-16.1-36-35.9 0-19.8 16.1-35.9 36-35.9s36 16.1 36 35.9c-0.1 19.8-16.2 35.9-36 35.9z", "p-id": "5093" })] }) } return e.jsx("div", { children: e.jsx(Bn, { svg: e.jsx(n, {}) }) }) }; class tu extends kt.Component { constructor(u) { super(u) } componentDidMount() { const { botName: u, buttonSize: s, cornerRadius: a, requestAccess: r, usePic: o, dataOnauth: c, dataAuthUrl: h, lang: F } = this.props; window.TelegramLoginWidget = { dataOnauth: p => c(p) }; const g = document.createElement("script"); g.src = "https://telegram.org/js/telegram-widget.js?9", g.setAttribute("data-telegram-login", u), g.setAttribute("data-size", s), a !== void 0 && g.setAttribute("data-radius", a), g.setAttribute("data-request-access", r), g.setAttribute("data-userpic", o), g.setAttribute("data-lang", F), h !== void 0 ? g.setAttribute("data-auth-url", h) : g.setAttribute("data-onauth", "TelegramLoginWidget.dataOnauth(user)"), g.async = !0, this.instance.appendChild(g) } render() { return e.jsx("div", { className: this.props.className, ref: u => { this.instance = u }, children: this.props.children }) } } tu.propTypes = { botName: wt.string.isRequired, dataOnauth: wt.func, buttonSize: wt.oneOf(["large", "medium", "small"]), cornerRadius: wt.number, requestAccess: wt.string, usePic: wt.bool, lang: wt.string }; tu.defaultProps = { botName: "samplebot", dataOnauth: () => { }, buttonSize: "large", requestAccess: "write", usePic: !0, lang: "en" }; function Ga(n) { localStorage.setItem("status", JSON.stringify(n)), localStorage.setItem("system_name", n.system_name), localStorage.setItem("logo", n.logo), localStorage.setItem("footer_html", n.footer_html), localStorage.setItem("quota_per_unit", n.quota_per_unit), localStorage.setItem("display_in_currency", n.display_in_currency), localStorage.setItem("enable_drawing", n.enable_drawing), localStorage.setItem("enable_task", n.enable_task), localStorage.setItem("enable_data_export", n.enable_data_export), localStorage.setItem("chats", JSON.stringify(n.chats)), localStorage.setItem("data_export_default_time", n.data_export_default_time), localStorage.setItem("default_collapse_sidebar", n.default_collapse_sidebar), localStorage.setItem("mj_notify_enabled", n.mj_notify_enabled), n.chat_link ? localStorage.setItem("chat_link", n.chat_link) : localStorage.removeItem("chat_link"), n.chat_link2 ? localStorage.setItem("chat_link2", n.chat_link2) : localStorage.removeItem("chat_link2") } function $t(n) { localStorage.setItem("user", JSON.stringify(n)) } const Ka = (n, u) => { switch (u.type) { case "login": return { ...n, user: u.payload }; case "logout": return { ...n, user: void 0 }; default: return n } }, gs = { user: void 0 }, Ft = kt.createContext({ state: gs, dispatch: () => null }), Ha = ({ children: n }) => { const [u, s] = kt.useReducer(Ka, gs); return e.jsx(Ft.Provider, { value: [u, s], children: n }) }, Va = () => { const { t: n } = Ce(), [u, s] = i.useState({ username: "", password: "", password2: "", email: "", verification_code: "" }), { username: a, password: r, password2: o } = u, [c, h] = i.useState(!1), [F, g] = i.useContext(Ft), [p, m] = i.useState(!1), [d, E] = i.useState(""), [_, I] = i.useState(""), [T, H] = i.useState(!1), [ae, Z] = i.useState(!1), [O, A] = i.useState({}); let Y = it(); kn(); let N = new URLSearchParams(window.location.search).get("aff"); N && localStorage.setItem("aff", N), i.useEffect(() => { let j = localStorage.getItem("status"); j && (j = JSON.parse(j), A(j), h(j.email_verification), j.turnstile_check && (m(!0), E(j.turnstile_site_key))) }); const U = () => { Z(!0) }, q = async () => { if (p && _ === "") { Te("请稍后几秒重试，Turnstile 正在检查用户环境！"); return } const j = await W.get(`/api/oauth/wechat?code=${u.wechat_verification_code}`), { success: R, message: v, data: l } = j.data; R ? (g({ type: "login", payload: l }), localStorage.setItem("user", JSON.stringify(l)), $t(l), Nt(), Y("/"), ie("登录成功！"), Z(!1)) : b(v) }; function w(j, R) { s(v => ({ ...v, [j]: R })) } async function V(j) { if (r.length < 8) { Te("密码长度不得小于 8 位！"); return } if (r !== o) { Te("两次输入的密码不一致"); return } if (a && r) { if (p && _ === "") { Te("请稍后几秒重试，Turnstile 正在检查用户环境！"); return } H(!0), N || (N = localStorage.getItem("aff")), u.aff_code = N; const R = await W.post(`/api/user/register?turnstile=${_}`, u), { success: v, message: l } = R.data; v ? (Y("/login"), ie("注册成功！")) : b(l), H(!1) } } const C = async () => { if (u.email === "") return; if (p && _ === "") { Te("请稍后几秒重试，Turnstile 正在检查用户环境！"); return } H(!0); const j = await W.get(`/api/verification?email=${u.email}&turnstile=${_}`), { success: R, message: v } = j.data; R ? ie("验证码发送成功，请检查你的邮箱！") : b(v), H(!1) }, P = async j => { const R = ["id", "first_name", "last_name", "username", "photo_url", "auth_date", "hash", "lang"], v = {}; R.forEach(S => { j[S] && (v[S] = j[S]) }); const l = await W.get("/api/oauth/telegram/login", { params: v }), { success: f, message: y, data: x } = l.data; f ? (g({ type: "login", payload: x }), localStorage.setItem("user", JSON.stringify(x)), ie("登录成功！"), $t(x), Nt(), Y("/")) : b(y) }; return e.jsx("div", { children: e.jsxs(Fe, { children: [e.jsx(Fe.Header, {}), e.jsx(Fe.Content, { children: e.jsx("div", { style: { justifyContent: "center", display: "flex", marginTop: 120 }, children: e.jsxs("div", { style: { width: 500 }, children: [e.jsxs(Re, { children: [e.jsx(jt, { heading: 2, style: { textAlign: "center" }, children: n("新用户注册") }), e.jsxs(M, { size: "large", children: [e.jsx(M.Input, { field: "username", label: n("用户名"), placeholder: n("用户名"), name: "username", onChange: j => w("username", j) }), e.jsx(M.Input, { field: "password", label: n("密码"), placeholder: n("输入密码，最短 8 位，最长 20 位"), name: "password", type: "password", onChange: j => w("password", j) }), e.jsx(M.Input, { field: "password2", label: n("确认密码"), placeholder: n("确认密码"), name: "password2", type: "password", onChange: j => w("password2", j) }), c ? e.jsxs(e.Fragment, { children: [e.jsx(M.Input, { field: "email", label: n("邮箱"), placeholder: n("输入邮箱地址"), onChange: j => w("email", j), name: "email", type: "email", suffix: e.jsx($, { onClick: C, disabled: T, children: n("获取验证码") }) }), e.jsx(M.Input, { field: "verification_code", label: n("验证码"), placeholder: n("输入验证码"), onChange: j => w("verification_code", j), name: "verification_code" })] }) : e.jsx(e.Fragment, {}), e.jsx($, { theme: "solid", style: { width: "100%" }, type: "primary", size: "large", htmlType: "submit", onClick: V, children: n("注册") })] }), e.jsx("div", { style: { display: "flex", justifyContent: "space-between", marginTop: 20 }, children: e.jsxs(mt, { children: [n("已有账户？"), e.jsx(Qt, { to: "/login", children: n("点击登录") })] }) }), O.github_oauth || O.wechat_login || O.telegram_oauth || O.linuxdo_oauth ? e.jsxs(e.Fragment, { children: [e.jsx(Ct, { margin: "12px", align: "center", children: n("第三方登录") }), e.jsxs("div", { style: { display: "flex", justifyContent: "center", marginTop: 20 }, children: [O.github_oauth ? e.jsx($, { type: "primary", icon: e.jsx(Qu, {}), onClick: () => Xn(O.github_client_id) }) : e.jsx(e.Fragment, {}), O.linuxdo_oauth ? e.jsx($, { icon: e.jsx(ps, {}), onClick: () => eu(O.linuxdo_client_id) }) : e.jsx(e.Fragment, {}), O.wechat_login ? e.jsx($, { type: "primary", style: { color: "rgba(var(--semi-green-5), 1)" }, icon: e.jsx(Bn, { svg: e.jsx(ms, {}) }), onClick: U }) : e.jsx(e.Fragment, {})] }), O.telegram_oauth ? e.jsx(e.Fragment, { children: e.jsx("div", { style: { display: "flex", justifyContent: "center", marginTop: 5 }, children: e.jsx(tu, { dataOnauth: P, botName: O.telegram_bot_name }) }) }) : e.jsx(e.Fragment, {})] }) : e.jsx(e.Fragment, {})] }), e.jsxs(De, { title: n("微信扫码登录"), visible: ae, maskClosable: !0, onOk: q, onCancel: () => Z(!1), okText: n("登录"), size: "small", centered: !0, children: [e.jsx("div", { style: { display: "flex", alignItem: "center", flexDirection: "column" }, children: e.jsx("img", { src: O.wechat_qrcode }) }), e.jsx("div", { style: { textAlign: "center" }, children: e.jsx("p", { children: n("微信扫码关注公众号，输入「验证码」获取验证码（三分钟内有效）") }) }), e.jsx(M, { size: "large", children: e.jsx(M.Input, { field: "wechat_verification_code", placeholder: n("验证码"), label: n("验证码"), value: u.wechat_verification_code, onChange: j => w("wechat_verification_code", j) }) })] }), p ? e.jsx("div", { style: { display: "flex", justifyContent: "center", marginTop: 20 }, children: e.jsx(Lt, { sitekey: d, onVerify: j => { I(j) } }) }) : e.jsx(e.Fragment, {})] }) }) })] }) }) }, Ja = () => { const [n, u] = i.useState({ username: "", password: "", wechat_verification_code: "" }), [s, a] = Sn(), [r, o] = i.useState(!1), { username: c, password: h } = n, [F, g] = i.useContext(Ft), [p, m] = i.useState(!1), [d, E] = i.useState(""), [_, I] = i.useState(""); let T = it(); const [H, ae] = i.useState({}), [Z, O] = i.useState(!1), { t: A } = Ce(); kn(); let Y = new URLSearchParams(window.location.search).get("aff"); Y && localStorage.setItem("aff", Y), i.useEffect(() => { s.get("expired") && b(A("未登录或登录已过期，请重新登录")); let C = localStorage.getItem("status"); C && (C = JSON.parse(C), ae(C), C.turnstile_check && (m(!0), E(C.turnstile_site_key))) }, []); const N = () => { O(!0) }, U = async () => { if (p && _ === "") { Te("请稍后几秒重试，Turnstile 正在检查用户环境！"); return } const C = await W.get(`/api/oauth/wechat?code=${n.wechat_verification_code}`), { success: P, message: j, data: R } = C.data; P ? (g({ type: "login", payload: R }), localStorage.setItem("user", JSON.stringify(R)), $t(R), Nt(), T("/"), ie("登录成功！"), O(!1)) : b(j) }; function q(C, P) { u(j => ({ ...j, [C]: P })) } async function w(C) { if (p && _ === "") { Te("请稍后几秒重试，Turnstile 正在检查用户环境！"); return } if (o(!0), c && h) { const P = await W.post(`/api/user/login?turnstile=${_}`, { username: c, password: h }), { success: j, message: R, data: v } = P.data; j ? (g({ type: "login", payload: v }), $t(v), Nt(), ie("登录成功！"), c === "root" && h === "123456" && De.error({ title: "您正在使用默认密码！", content: "请立刻修改默认密码！", centered: !0 }), T("/token")) : b(R) } else b("请输入用户名和密码！") } const V = async C => { const P = ["id", "first_name", "last_name", "username", "photo_url", "auth_date", "hash", "lang"], j = {}; P.forEach(y => { C[y] && (j[y] = C[y]) }); const R = await W.get("/api/oauth/telegram/login", { params: j }), { success: v, message: l, data: f } = R.data; v ? (g({ type: "login", payload: f }), localStorage.setItem("user", JSON.stringify(f)), ie("登录成功！"), $t(f), Nt(), T("/")) : b(l) }; return e.jsx("div", { children: e.jsxs(Fe, { children: [e.jsx(Fe.Header, {}), e.jsx(Fe.Content, { children: e.jsx("div", { style: { justifyContent: "center", display: "flex", marginTop: 120 }, children: e.jsxs("div", { style: { width: 500 }, children: [e.jsxs(Re, { children: [e.jsx(jt, { heading: 2, style: { textAlign: "center" }, children: A("用户登录") }), e.jsxs(M, { children: [e.jsx(M.Input, { field: "username", label: A("用户名/邮箱"), placeholder: A("用户名/邮箱"), name: "username", onChange: C => q("username", C) }), e.jsx(M.Input, { field: "password", label: A("密码"), placeholder: A("密码"), name: "password", type: "password", onChange: C => q("password", C) }), e.jsx($, { theme: "solid", style: { width: "100%" }, type: "primary", size: "large", htmlType: "submit", onClick: w, children: A("登录") })] }), e.jsxs("div", { style: { display: "flex", justifyContent: "space-between", marginTop: 20 }, children: [e.jsxs(mt, { children: [A("没有账户？"), " ", e.jsx(Qt, { to: "/register", children: A("点击注册") })] }), e.jsxs(mt, { children: [A("忘记密码？"), " ", e.jsx(Qt, { to: "/reset", children: A("点击重置") })] })] }), H.github_oauth || H.wechat_login || H.telegram_oauth || H.linuxdo_oauth ? e.jsxs(e.Fragment, { children: [e.jsx(Ct, { margin: "12px", align: "center", children: A("第三方登录") }), e.jsxs("div", { style: { display: "flex", justifyContent: "center", marginTop: 20 }, children: [H.github_oauth ? e.jsx($, { type: "primary", icon: e.jsx(Qu, {}), onClick: () => Xn(H.github_client_id) }) : e.jsx(e.Fragment, {}), H.linuxdo_oauth ? e.jsx($, { icon: e.jsx(ps, {}), onClick: () => eu(H.linuxdo_client_id) }) : e.jsx(e.Fragment, {}), H.wechat_login ? e.jsx($, { type: "primary", style: { color: "rgba(var(--semi-green-5), 1)" }, icon: e.jsx(Bn, { svg: e.jsx(ms, {}) }), onClick: N }) : e.jsx(e.Fragment, {})] }), H.telegram_oauth ? e.jsx(e.Fragment, { children: e.jsx("div", { style: { display: "flex", justifyContent: "center", marginTop: 5 }, children: e.jsx(is, { dataOnauth: V, botName: H.telegram_bot_name }) }) }) : e.jsx(e.Fragment, {})] }) : e.jsx(e.Fragment, {}), e.jsxs(De, { title: A("微信扫码登录"), visible: Z, maskClosable: !0, onOk: U, onCancel: () => O(!1), okText: A("登录"), size: "small", centered: !0, children: [e.jsx("div", { style: { display: "flex", alignItem: "center", flexDirection: "column" }, children: e.jsx("img", { src: H.wechat_qrcode }) }), e.jsx("div", { style: { textAlign: "center" }, children: e.jsx("p", { children: A("微信扫码关注公众号，输入「验证码」获取验证码（三分钟内有效）") }) }), e.jsx(M, { size: "large", children: e.jsx(M.Input, { field: "wechat_verification_code", placeholder: A("验证码"), label: A("验证码"), value: n.wechat_verification_code, onChange: C => q("wechat_verification_code", C) }) })] })] }), p ? e.jsx("div", { style: { display: "flex", justifyContent: "center", marginTop: 20 }, children: e.jsx(Lt, { sitekey: d, onVerify: C => { I(C) } }) }) : e.jsx(e.Fragment, {})] }) }) })] }) }) }, Qa = () => e.jsx(e.Fragment, { children: e.jsxs(zt, { negative: !0, children: [e.jsx(zt.Header, { children: "页面不存在" }), e.jsx("p", { children: "请检查你的浏览器地址是否正确" })] }) }), fs = i.createContext(null), nu = () => i.useContext(fs), Fs = i.createContext(null), xs = () => i.useContext(Fs), Ya = ({ children: n }) => { const [u, s] = i.useState(() => { try { return localStorage.getItem("theme-mode") || null } catch { return null } }), a = i.useCallback(r => { s(r ? "dark" : "light"); const o = document.body; r ? (o.setAttribute("theme-mode", "dark"), localStorage.setItem("theme-mode", "dark")) : (o.removeAttribute("theme-mode"), localStorage.setItem("theme-mode", "light")) }, []); return e.jsx(Fs.Provider, { value: a, children: e.jsx(fs.Provider, { value: u, children: n }) }) }, Za = () => { let [n, u] = i.useState({ PasswordLoginEnabled: "", PasswordRegisterEnabled: "", EmailVerificationEnabled: "", GitHubOAuthEnabled: "", GitHubClientId: "", GitHubClientSecret: "", Notice: "", SMTPServer: "", SMTPPort: "", SMTPAccount: "", SMTPFrom: "", SMTPToken: "", ServerAddress: "", WorkerUrl: "", WorkerValidKey: "", EpayId: "", EpayKey: "", Price: 7.3, MinTopUp: 1, TopupGroupRatio: "", PayAddress: "", CustomCallbackAddress: "", Footer: "", WeChatAuthEnabled: "", WeChatServerAddress: "", WeChatServerToken: "", WeChatAccountQRCodeImageURL: "", TurnstileCheckEnabled: "", TurnstileSiteKey: "", TurnstileSecretKey: "", RegisterEnabled: "", EmailDomainRestrictionEnabled: "", EmailAliasRestrictionEnabled: "", SMTPSSLEnabled: "", EmailDomainWhitelist: [], TelegramOAuthEnabled: "", TelegramBotToken: "", TelegramBotName: "", LinuxDOOAuthEnabled: "", LinuxDOClientId: "", LinuxDOClientSecret: "" }); const [s, a] = i.useState({}); let [r, o] = i.useState(!1); const [c, h] = i.useState([]), [F, g] = i.useState(""), [p, m] = i.useState(!1), E = nu() === "dark", _ = async () => { const C = await W.get("/api/option/"), { success: P, message: j, data: R } = C.data; if (P) { let v = {}; R.forEach(l => { l.key === "TopupGroupRatio" && (l.value = JSON.stringify(JSON.parse(l.value), null, 2)), v[l.key] = l.value }), u({ ...v, EmailDomainWhitelist: v.EmailDomainWhitelist.split(",") }), a(v), h(v.EmailDomainWhitelist.split(",").map(l => ({ key: l, text: l, value: l }))) } else b(j) }; i.useEffect(() => { _().then() }, []), i.useEffect(() => { }, [n.EmailDomainWhitelist]); const I = async (C, P) => { switch (o(!0), C) { case "PasswordLoginEnabled": case "PasswordRegisterEnabled": case "EmailVerificationEnabled": case "GitHubOAuthEnabled": case "LinuxDOOAuthEnabled": case "WeChatAuthEnabled": case "TelegramOAuthEnabled": case "TurnstileCheckEnabled": case "EmailDomainRestrictionEnabled": case "EmailAliasRestrictionEnabled": case "SMTPSSLEnabled": case "RegisterEnabled": P = n[C] === "true" ? "false" : "true"; break }const j = await W.put("/api/option/", { key: C, value: P }), { success: R, message: v } = j.data; R ? (C === "EmailDomainWhitelist" && (P = P.split(",")), C === "Price" && (P = parseFloat(P)), u(l => ({ ...l, [C]: P }))) : b(v), o(!1) }, T = async (C, { name: P, value: j }) => { if (P === "PasswordLoginEnabled" && n[P] === "true") { m(!0); return } P === "Notice" || P.startsWith("SMTP") && P !== "SMTPSSLEnabled" || P === "ServerAddress" || P === "WorkerUrl" || P === "WorkerValidKey" || P === "EpayId" || P === "EpayKey" || P === "Price" || P === "PayAddress" || P === "GitHubClientId" || P === "GitHubClientSecret" || P === "WeChatServerAddress" || P === "WeChatServerToken" || P === "WeChatAccountQRCodeImageURL" || P === "TurnstileSiteKey" || P === "TurnstileSecretKey" || P === "EmailDomainWhitelist" || P === "TopupGroupRatio" || P === "TelegramBotToken" || P === "TelegramBotName" || P === "LinuxDOClientId" || P === "LinuxDOClientSecret" ? u(R => ({ ...R, [P]: j })) : await I(P, j) }, H = async () => { let C = dn(n.ServerAddress); await I("ServerAddress", C) }, ae = async () => { let C = dn(n.WorkerUrl); await I("WorkerUrl", C), n.WorkerValidKey !== "" && await I("WorkerValidKey", n.WorkerValidKey) }, Z = async () => { if (n.ServerAddress === "") { b("请先填写服务器地址"); return } if (s.TopupGroupRatio !== n.TopupGroupRatio) { if (!gt(n.TopupGroupRatio)) { b("充值分组倍率不是合法的 JSON 字符串"); return } await I("TopupGroupRatio", n.TopupGroupRatio) } let C = dn(n.PayAddress); await I("PayAddress", C), n.EpayId !== "" && await I("EpayId", n.EpayId), n.EpayKey !== void 0 && n.EpayKey !== "" && await I("EpayKey", n.EpayKey), await I("Price", "" + n.Price) }, O = async () => { s.SMTPServer !== n.SMTPServer && await I("SMTPServer", n.SMTPServer), s.SMTPAccount !== n.SMTPAccount && await I("SMTPAccount", n.SMTPAccount), s.SMTPFrom !== n.SMTPFrom && await I("SMTPFrom", n.SMTPFrom), s.SMTPPort !== n.SMTPPort && n.SMTPPort !== "" && await I("SMTPPort", n.SMTPPort), s.SMTPToken !== n.SMTPToken && n.SMTPToken !== "" && await I("SMTPToken", n.SMTPToken) }, A = async () => { s.EmailDomainWhitelist !== n.EmailDomainWhitelist.join(",") && n.SMTPToken !== "" && await I("EmailDomainWhitelist", n.EmailDomainWhitelist.join(",")) }, Y = async () => { s.WeChatServerAddress !== n.WeChatServerAddress && await I("WeChatServerAddress", dn(n.WeChatServerAddress)), s.WeChatAccountQRCodeImageURL !== n.WeChatAccountQRCodeImageURL && await I("WeChatAccountQRCodeImageURL", n.WeChatAccountQRCodeImageURL), s.WeChatServerToken !== n.WeChatServerToken && n.WeChatServerToken !== "" && await I("WeChatServerToken", n.WeChatServerToken) }, N = async () => { s.GitHubClientId !== n.GitHubClientId && await I("GitHubClientId", n.GitHubClientId), s.GitHubClientSecret !== n.GitHubClientSecret && n.GitHubClientSecret !== "" && await I("GitHubClientSecret", n.GitHubClientSecret) }, U = async () => { await I("TelegramBotToken", n.TelegramBotToken), await I("TelegramBotName", n.TelegramBotName) }, q = async () => { s.TurnstileSiteKey !== n.TurnstileSiteKey && await I("TurnstileSiteKey", n.TurnstileSiteKey), s.TurnstileSecretKey !== n.TurnstileSecretKey && n.TurnstileSecretKey !== "" && await I("TurnstileSecretKey", n.TurnstileSecretKey) }, w = () => { const C = n.EmailDomainWhitelist; F !== "" && !C.includes(F) && (g(""), u({ ...n, EmailDomainWhitelist: [...C, F] }), h([...c, { key: F, text: F, value: F }])) }, V = async () => { s.LinuxDOClientId !== n.LinuxDOClientId && await I("LinuxDOClientId", n.LinuxDOClientId), s.LinuxDOClientSecret !== n.LinuxDOClientSecret && n.LinuxDOClientSecret !== "" && await I("LinuxDOClientSecret", n.LinuxDOClientSecret) }; return e.jsx(Wt, { columns: 1, children: e.jsx(Wt.Column, { children: e.jsxs(re, { loading: r, inverted: E, children: [e.jsx(Le, { as: "h3", inverted: E, children: "通用设置" }), e.jsx(re.Group, { widths: "equal", children: e.jsx(re.Input, { label: "服务器地址", placeholder: "例如：https://yourdomain.com", value: n.ServerAddress, name: "ServerAddress", onChange: T }) }), e.jsx(re.Button, { onClick: H, children: "更新服务器地址" }), e.jsxs(Le, { as: "h3", inverted: E, children: ["代理设置（支持", " ", e.jsx("a", { href: "https://github.com/Calcium-Ion/new-api-worker", target: "_blank", rel: "noreferrer", children: "new-api-worker" }), "）"] }), e.jsxs(re.Group, { widths: "equal", children: [e.jsx(re.Input, { label: "Worker地址，不填写则不启用代理", placeholder: "例如：https://workername.yourdomain.workers.dev", value: n.WorkerUrl, name: "WorkerUrl", onChange: T }), e.jsx(re.Input, { label: "Worker密钥，根据你部署的 Worker 填写", placeholder: "例如：your_secret_key", value: n.WorkerValidKey, name: "WorkerValidKey", onChange: T })] }), e.jsx(re.Button, { onClick: ae, children: "更新Worker设置" }), e.jsx(He, {}), e.jsx(Le, { as: "h3", inverted: E, children: "支付设置（当前仅支持易支付接口，默认使用上方服务器地址作为回调地址！）" }), e.jsxs(re.Group, { widths: "equal", children: [e.jsx(re.Input, { label: "支付地址，不填写则不启用在线支付", placeholder: "例如：https://yourdomain.com", value: n.PayAddress, name: "PayAddress", onChange: T }), e.jsx(re.Input, { label: "易支付商户ID", placeholder: "例如：0001", value: n.EpayId, name: "EpayId", onChange: T }), e.jsx(re.Input, { label: "易支付商户密钥", placeholder: "敏感信息不会发送到前端显示", value: n.EpayKey, name: "EpayKey", onChange: T })] }), e.jsxs(re.Group, { widths: "equal", children: [e.jsx(re.Input, { label: "回调地址，不填写则使用上方服务器地址作为回调地址", placeholder: "例如：https://yourdomain.com", value: n.CustomCallbackAddress, name: "CustomCallbackAddress", onChange: T }), e.jsx(re.Input, { label: "充值价格（x元/美金）", placeholder: "例如：7，就是7元/美金", value: n.Price, name: "Price", min: 0, onChange: T }), e.jsx(re.Input, { label: "最低充值美元数量（以美金为单位，如果使用额度请自行换算！）", placeholder: "例如：2，就是最低充值2$", value: n.MinTopUp, name: "MinTopUp", min: 1, onChange: T })] }), e.jsx(re.Group, { widths: "equal", children: e.jsx(re.TextArea, { label: "充值分组倍率", name: "TopupGroupRatio", onChange: T, style: { minHeight: 250, fontFamily: "JetBrains Mono, Consolas" }, autoComplete: "new-password", value: n.TopupGroupRatio, placeholder: "为一个 JSON 文本，键为组名称，值为倍率" }) }), e.jsx(re.Button, { onClick: Z, children: "更新支付设置" }), e.jsx(He, {}), e.jsx(Le, { as: "h3", inverted: E, children: "配置登录注册" }), e.jsxs(re.Group, { inline: !0, children: [e.jsx(re.Checkbox, { checked: n.PasswordLoginEnabled === "true", label: "允许通过密码进行登录", name: "PasswordLoginEnabled", onChange: T }), p && e.jsxs(cn, { open: p, onClose: () => m(!1), size: "tiny", style: { maxWidth: "450px" }, children: [e.jsx(cn.Header, { children: "警告" }), e.jsx(cn.Content, { children: e.jsx("p", { children: "取消密码登录将导致所有未绑定其他登录方式的用户（包括管理员）无法通过密码登录，确认取消？" }) }), e.jsxs(cn.Actions, { children: [e.jsx(Rt, { onClick: () => m(!1), children: "取消" }), e.jsx(Rt, { color: "yellow", onClick: async () => { m(!1), await I("PasswordLoginEnabled", "false") }, children: "确定" })] })] }), e.jsx(re.Checkbox, { checked: n.PasswordRegisterEnabled === "true", label: "允许通过密码进行注册", name: "PasswordRegisterEnabled", onChange: T }), e.jsx(re.Checkbox, { checked: n.EmailVerificationEnabled === "true", label: "通过密码注册时需要进行邮箱验证", name: "EmailVerificationEnabled", onChange: T }), e.jsx(re.Checkbox, { checked: n.GitHubOAuthEnabled === "true", label: "允许通过 GitHub 账户登录 & 注册", name: "GitHubOAuthEnabled", onChange: T }), e.jsx(re.Checkbox, { checked: n.LinuxDOOAuthEnabled === "true", label: "允许通过 LinuxDO 账户登录 & 注册", name: "LinuxDOOAuthEnabled", onChange: T }), e.jsx(re.Checkbox, { checked: n.WeChatAuthEnabled === "true", label: "允许通过微信登录 & 注册", name: "WeChatAuthEnabled", onChange: T }), e.jsx(re.Checkbox, { checked: n.TelegramOAuthEnabled === "true", label: "允许通过 Telegram 进行登录", name: "TelegramOAuthEnabled", onChange: T })] }), e.jsxs(re.Group, { inline: !0, children: [e.jsx(re.Checkbox, { checked: n.RegisterEnabled === "true", label: "允许新用户注册（此项为否时，新用户将无法以任何方式进行注册）", name: "RegisterEnabled", onChange: T }), e.jsx(re.Checkbox, { checked: n.TurnstileCheckEnabled === "true", label: "启用 Turnstile 用户校验", name: "TurnstileCheckEnabled", onChange: T })] }), e.jsx(He, {}), e.jsxs(Le, { as: "h3", inverted: E, children: ["配置邮箱域名白名单", e.jsx(Le.Subheader, { children: "用以防止恶意用户利用临时邮箱批量注册" })] }), e.jsx(re.Group, { widths: 3, children: e.jsx(re.Checkbox, { label: "启用邮箱域名白名单", name: "EmailDomainRestrictionEnabled", onChange: T, checked: n.EmailDomainRestrictionEnabled === "true" }) }), e.jsx(re.Group, { widths: 3, children: e.jsx(re.Checkbox, { label: "启用邮箱别名限制（例如：ab.cd@gmail.com）", name: "EmailAliasRestrictionEnabled", onChange: T, checked: n.EmailAliasRestrictionEnabled === "true" }) }), e.jsxs(re.Group, { widths: 2, children: [e.jsx(re.Dropdown, { label: "允许的邮箱域名", placeholder: "允许的邮箱域名", name: "EmailDomainWhitelist", required: !0, fluid: !0, multiple: !0, selection: !0, onChange: T, value: n.EmailDomainWhitelist, autoComplete: "new-password", options: c }), e.jsx(re.Input, { label: "添加新的允许的邮箱域名", action: e.jsx(Rt, { type: "button", onClick: () => { w() }, children: "填入" }), onKeyDown: C => { C.key === "Enter" && w() }, autoComplete: "new-password", placeholder: "输入新的允许的邮箱域名", value: F, onChange: (C, { value: P }) => { g(P) } })] }), e.jsx(re.Button, { onClick: A, children: "保存邮箱域名白名单设置" }), e.jsx(He, {}), e.jsxs(Le, { as: "h3", inverted: E, children: ["配置 SMTP", e.jsx(Le.Subheader, { children: "用以支持系统的邮件发送" })] }), e.jsxs(re.Group, { widths: 3, children: [e.jsx(re.Input, { label: "SMTP 服务器地址", name: "SMTPServer", onChange: T, autoComplete: "new-password", value: n.SMTPServer, placeholder: "例如：smtp.qq.com" }), e.jsx(re.Input, { label: "SMTP 端口", name: "SMTPPort", onChange: T, autoComplete: "new-password", value: n.SMTPPort, placeholder: "默认: 587" }), e.jsx(re.Input, { label: "SMTP 账户", name: "SMTPAccount", onChange: T, autoComplete: "new-password", value: n.SMTPAccount, placeholder: "通常是邮箱地址" })] }), e.jsxs(re.Group, { widths: 3, children: [e.jsx(re.Input, { label: "SMTP 发送者邮箱", name: "SMTPFrom", onChange: T, autoComplete: "new-password", value: n.SMTPFrom, placeholder: "通常和邮箱地址保持一致" }), e.jsx(re.Input, { label: "SMTP 访问凭证", name: "SMTPToken", onChange: T, type: "password", autoComplete: "new-password", checked: n.RegisterEnabled === "true", placeholder: "敏感信息不会发送到前端显示" })] }), e.jsx(re.Group, { widths: 3, children: e.jsx(re.Checkbox, { label: "启用SMTP SSL（465端口强制开启）", name: "SMTPSSLEnabled", onChange: T, checked: n.SMTPSSLEnabled === "true" }) }), e.jsx(re.Button, { onClick: O, children: "保存 SMTP 设置" }), e.jsx(He, {}), e.jsxs(Le, { as: "h3", inverted: E, children: ["配置 GitHub OAuth App", e.jsxs(Le.Subheader, { children: ["用以支持通过 GitHub 进行登录注册，", e.jsx("a", { href: "https://github.com/settings/developers", target: "_blank", rel: "noreferrer", children: "点击此处" }), "管理你的 GitHub OAuth App"] })] }), e.jsxs(zt, { children: ["Homepage URL 填 ", e.jsx("code", { children: n.ServerAddress }), "，Authorization callback URL 填", " ", e.jsx("code", { children: `${n.ServerAddress}/oauth/github` })] }), e.jsxs(re.Group, { widths: 3, children: [e.jsx(re.Input, { label: "GitHub Client ID", name: "GitHubClientId", onChange: T, autoComplete: "new-password", value: n.GitHubClientId, placeholder: "输入你注册的 GitHub OAuth APP 的 ID" }), e.jsx(re.Input, { label: "GitHub Client Secret", name: "GitHubClientSecret", onChange: T, type: "password", autoComplete: "new-password", value: n.GitHubClientSecret, placeholder: "敏感信息不会发送到前端显示" })] }), e.jsx(re.Button, { onClick: N, children: "保存 GitHub OAuth 设置" }), e.jsx(He, {}), e.jsxs(Le, { as: "h3", inverted: E, children: ["配置 WeChat Server", e.jsxs(Le.Subheader, { children: ["用以支持通过微信进行登录注册，", e.jsx("a", { href: "https://github.com/songquanpeng/wechat-server", target: "_blank", rel: "noreferrer", children: "点击此处" }), "了解 WeChat Server"] })] }), e.jsxs(re.Group, { widths: 3, children: [e.jsx(re.Input, { label: "WeChat Server 服务器地址", name: "WeChatServerAddress", placeholder: "例如：https://yourdomain.com", onChange: T, autoComplete: "new-password", value: n.WeChatServerAddress }), e.jsx(re.Input, { label: "WeChat Server 访问凭证", name: "WeChatServerToken", type: "password", onChange: T, autoComplete: "new-password", value: n.WeChatServerToken, placeholder: "敏感信息不会发送到前端显示" }), e.jsx(re.Input, { label: "微信公众号二维码图片链接", name: "WeChatAccountQRCodeImageURL", onChange: T, autoComplete: "new-password", value: n.WeChatAccountQRCodeImageURL, placeholder: "输入一个图片链接" })] }), e.jsx(re.Button, { onClick: Y, children: "保存 WeChat Server 设置" }), e.jsx(He, {}), e.jsx(Le, { as: "h3", inverted: E, children: "配置 Telegram 登录" }), e.jsxs(re.Group, { inline: !0, children: [e.jsx(re.Input, { label: "Telegram Bot Token", name: "TelegramBotToken", onChange: T, value: n.TelegramBotToken, placeholder: "输入你的 Telegram Bot Token" }), e.jsx(re.Input, { label: "Telegram Bot 名称", name: "TelegramBotName", onChange: T, value: n.TelegramBotName, placeholder: "输入你的 Telegram Bot 名称" })] }), e.jsx(re.Button, { onClick: U, children: "保存 Telegram 登录设置" }), e.jsx(He, {}), e.jsxs(Le, { as: "h3", inverted: E, children: ["配置 Turnstile", e.jsxs(Le.Subheader, { children: ["用以支持用户校验，", e.jsx("a", { href: "https://dash.cloudflare.com/", target: "_blank", rel: "noreferrer", children: "点击此处" }), "管理你的 Turnstile Sites，推荐选择 Invisible Widget Type"] })] }), e.jsxs(re.Group, { widths: 3, children: [e.jsx(re.Input, { label: "Turnstile Site Key", name: "TurnstileSiteKey", onChange: T, autoComplete: "new-password", value: n.TurnstileSiteKey, placeholder: "输入你注册的 Turnstile Site Key" }), e.jsx(re.Input, { label: "Turnstile Secret Key", name: "TurnstileSecretKey", onChange: T, type: "password", autoComplete: "new-password", value: n.TurnstileSecretKey, placeholder: "敏感信息不会发送到前端显示" })] }), e.jsx(re.Button, { onClick: q, children: "保存 Turnstile 设置" }), e.jsx(He, {}), e.jsxs(Le, { as: "h3", inverted: E, children: ["配置 LinuxDO OAuth App", e.jsxs(Le.Subheader, { children: ["用以支持通过 LinuxDO 进行登录注册，", e.jsx("a", { href: "https://connect.linux.do/", target: "_blank", rel: "noreferrer", children: "点击此处" }), "管理你的 LinuxDO OAuth App"] })] }), e.jsxs(zt, { children: ["Homepage URL 填 ", e.jsx("code", { children: n.ServerAddress }), "，Authorization callback URL 填", " ", e.jsx("code", { children: `${n.ServerAddress}/oauth/linuxdo` })] }), e.jsxs(re.Group, { widths: 3, children: [e.jsx(re.Input, { label: "LinuxDO Client ID", name: "LinuxDOClientId", onChange: T, autoComplete: "new-password", value: n.LinuxDOClientId, placeholder: "输入你注册的 LinuxDO OAuth APP 的 ID" }), e.jsx(re.Input, { label: "LinuxDO Client Secret", name: "LinuxDOClientSecret", onChange: T, type: "password", autoComplete: "new-password", value: n.LinuxDOClientSecret, placeholder: "敏感信息不会发送到前端显示" })] }), e.jsx(re.Button, { onClick: V, children: "保存 LinuxDO OAuth 设置" })] }) }) }) }, Xa = () => { const { t: n } = Ce(), [u, s] = i.useState({ Notice: "", SystemName: "", Logo: "", Footer: "", About: "", HomePageContent: "", EnabledCryptomus: !1, EnabledAirwallex: !1, LiveAirwallex: !1, CryptoMerchant_ID: "", CryptoAPI_Key: "", CryptoWebhook_Url: "", LifeTime: "", AirwallexClient_ID: "", AirwallexAPI_Key: "", AirwallexSec_Key: "", MainCurrency: "", Exchange_Rate: "" }); let [a, r] = i.useState(!0); i.useState(!1), i.useState({ tag_name: "", content: "" }); const o = async (A, Y) => { r(!0); try { const N = await W.put("/api/option/", { key: A, value: Y.toString() }), { success: U, message: q } = N.data; U ? s(w => ({ ...w, [A]: Y })) : console.error("Update failed:", q) } catch (N) { console.error("Failed to update setting:", N) } r(!1) }, [c, h] = i.useState({ Notice: !1, SystemName: !1, Logo: !1, HomePageContent: !1, About: !1, Footer: !1, settings: !1 }), F = async (A, Y) => { const N = Y.target.id; if (N === "LifeTime") { const U = parseInt(A, 10); U >= 5 && U <= 720 ? s(q => ({ ...q, [N]: U })) : alert(n("有效期必须在5到720分钟之间")) } else s(U => ({ ...U, [N]: A })) }, g = i.useRef(), p = i.useRef(), m = async () => { try { h(A => ({ ...A, Notice: !0 })), await o("Notice", u.Notice), ie(n("公告已更新")) } catch (A) { console.error(n("公告更新失败"), A), b(n("公告更新失败")) } finally { h(A => ({ ...A, Notice: !1 })) } }, d = i.useRef(), E = async () => { try { h(A => ({ ...A, SystemName: !0 })), await o("SystemName", u.SystemName), ie(n("系统名称已更新")) } catch (A) { console.error(n("系统名称更新失败"), A), b(n("系统名称更新失败")) } finally { h(A => ({ ...A, SystemName: !1 })) } }, _ = async () => { try { if (h(!0), console.log(u), u.EnabledCryptomus) { if (!u.CryptoMerchant_ID || !u.CryptoAPI_Key || !u.CryptoWebhook_Url || !u.LifeTime) { b(n("Cryptomus settings are incomplete.")); return } await o("CryptoMerchant_ID", u.CryptoMerchant_ID), await o("CryptoAPI_Key", u.CryptoAPI_Key), await o("CryptoWebhook_Url", u.CryptoWebhook_Url), await o("LifeTime", u.LifeTime) } if (u.EnabledAirwallex) { if (!u.AirwallexClient_ID || !u.AirwallexAPI_Key) { b(n("Airwallex settings are incomplete.")); return } await o("AirwallexClient_ID", u.AirwallexClient_ID), await o("AirwallexAPI_Key", u.AirwallexAPI_Key), await o("AirwallexSec_Key", u.AirwallexSec_Key), await o("MainCurrency", u.MainCurrency), await o("Exchange_Rate", u.Exchange_Rate) } ie(n("Settings updated successfully")) } catch (A) { b(n("Failed to update settings:", A)) } finally { h(!1) } }, I = async (A, Y) => { try { h(N => ({ ...N, [A]: !0 })), console.log(u), await o(A, Y), ie(n(`${A} 已更新`)), A === "LiveAirwallex" && Te(n(Y ? "Please enter the Live Key" : "Please enter the Test Key")) } catch (N) { console.error(`${A} 更新失败`, N), b(`${A} 更新失败`) } finally { h(N => ({ ...N, [A]: !1 })) } }, T = async () => { try { h(A => ({ ...A, Logo: !0 })), await o("Logo", u.Logo), ie("Logo 已更新") } catch (A) { console.error("Logo 更新失败", A), b("Logo 更新失败") } finally { h(A => ({ ...A, Logo: !1 })) } }, H = async A => { try { h(Y => ({ ...Y, HomePageContent: !0 })), await o(A, u[A]), ie("首页内容已更新") } catch (Y) { console.error("首页内容更新失败", Y), b("首页内容更新失败") } finally { h(Y => ({ ...Y, HomePageContent: !1 })) } }, ae = async () => { try { h(A => ({ ...A, About: !0 })), await o("About", u.About), ie("关于内容已更新") } catch (A) { console.error("关于内容更新失败", A), b("关于内容更新失败") } finally { h(A => ({ ...A, About: !1 })) } }, Z = async () => { try { h(A => ({ ...A, Footer: !0 })), await o("Footer", u.Footer), ie("页脚内容已更新") } catch (A) { console.error("页脚内容更新失败", A), b("页脚内容更新失败") } finally { h(A => ({ ...A, Footer: !1 })) } }, O = async () => { const A = await W.get("/api/option/"), { success: Y, message: N, data: U } = A.data; if (Y) { let q = {}; U.forEach(w => { w.key === "EnabledCryptomus" || w.key === "EnabledAirwallex" || w.key === "LiveAirwallex" ? q[w.key] = w.value === "true" : w.key in u && (q[w.key] = w.value) }), s(q), console.log(q), g.current.setValues(q), p.current.setValues(q), d.current.setValues(q) } else b(N) }; return i.useEffect(() => { O() }, []), e.jsx(Ae, { children: e.jsxs(fe, { span: 24, children: [e.jsx(M, { values: u, getFormApi: A => g.current = A, style: { marginBottom: 15 }, children: e.jsxs(M.Section, { text: n("通用设置"), children: [e.jsx(M.TextArea, { label: n("公告"), placeholder: n("在此输入新的公告内容，支持 Markdown & HTML 代码"), field: "Notice", onChange: F, style: { fontFamily: "JetBrains Mono, Consolas" }, autosize: { minRows: 6, maxRows: 12 } }), e.jsx($, { onClick: m, loading: c.Notice, children: n("设置公告") })] }) }), e.jsx(M, { values: u, getFormApi: A => p.current = A, style: { marginBottom: 15 }, children: e.jsxs(M.Section, { text: n("Payment Settings"), children: [e.jsxs(Ae, { gutter: 16, children: [e.jsx(fe, { span: 8, children: e.jsx(M.Switch, { field: "EnabledCryptomus", label: n("Cryptomus Enable"), size: "default", checkedText: "｜", uncheckedText: "〇", onChange: A => { s({ ...u, EnabledCryptomus: A }), I("EnabledCryptomus", A) } }) }), e.jsx(fe, { span: 8, children: e.jsx(M.Switch, { field: "EnabledAirwallex", label: n("Airwallex Enable"), size: "default", checkedText: "｜", uncheckedText: "〇", onChange: A => { s({ ...u, EnabledAirwallex: A }), I("EnabledAirwallex", A) } }) }), e.jsx(fe, { span: 8, children: e.jsx(M.Switch, { field: "LiveAirwallex", label: n("Test | Live Airwallex"), size: "default", checkedText: "｜", uncheckedText: "〇", onChange: A => { s({ ...u, LiveAirwallex: A }), I("LiveAirwallex", A) } }) })] }), u.EnabledCryptomus && e.jsxs(Ae, { gutter: 16, children: [e.jsx(fe, { span: 8, children: e.jsx(M.Input, { label: n("Cryptomus Merchant ID"), field: "CryptoMerchant_ID", onChange: F, type: "password", initValue: u.CryptoMerchant_ID }) }), e.jsx(fe, { span: 8, children: e.jsx(M.Input, { label: n("Cryptomus API Key"), field: "CryptoAPI_Key", onChange: F, type: "password", initValue: u.CryptoAPI_Key }) }), e.jsx(fe, { span: 8, children: e.jsx(M.Input, { label: n("Cryptomus Webhook URL"), field: "CryptoWebhook_Url", onChange: F, initValue: u.CryptoWebhook_Url }) }), e.jsx(fe, { span: 8, children: e.jsx(M.Input, { label: n("Cryptomus支付有效期"), placeholder: n("请输入有效期（分钟）：最小5分钟，最大720分钟"), field: "LifeTime", initValue: u.LifeTime }) })] }), u.EnabledAirwallex && e.jsxs(Ae, { gutter: 16, children: [e.jsx(fe, { span: 8, children: e.jsx(M.Input, { label: n("Airwallex Client ID"), field: "AirwallexClient_ID", onChange: F, type: "password", initValue: u.AirwallexClient_ID }) }), e.jsx(fe, { span: 8, children: e.jsx(M.Input, { label: n("Airwallex API Key"), field: "AirwallexAPI_Key", onChange: F, type: "password", initValue: u.AirwallexAPI_Key }) }), e.jsx(fe, { span: 8, children: e.jsx(M.Input, { label: n("Webhook Secret Key"), field: "AirwallexSec_Key", onChange: F, type: "password", initValue: u.AirwallexSec_Key }) }), e.jsx(fe, { span: 8, children: e.jsx(M.Input, { label: n("Currency Support"), field: "MainCurrency", onChange: F, initValue: u.MainCurrency }) }), e.jsx(fe, { span: 8, children: e.jsx(M.Input, { label: n("Exchange Rate"), field: "Exchange_Rate", onChange: F, initValue: u.Exchange_Rate }) })] }), e.jsx($, { onClick: _, loading: c.settings, children: n("Save Settings") })] }) }), e.jsx(M, { values: u, getFormApi: A => d.current = A, style: { marginBottom: 15 }, children: e.jsxs(M.Section, { text: n("个性化设置"), children: [e.jsx(M.Input, { label: n("系统名称"), placeholder: n("在此输入系统名称"), field: "SystemName", onChange: F }), e.jsx($, { onClick: E, loading: c.SystemName, children: n("设置系统名称") }), e.jsx(M.Input, { label: n("Logo 图片地址"), placeholder: n("在此输入 Logo 图片地址"), field: "Logo", onChange: F }), e.jsx($, { onClick: T, loading: c.Logo, children: n("设置 Logo") }), e.jsx(M.TextArea, { label: n("首页内容"), placeholder: n("在此输入首页内容，支持 Markdown & HTML 代码，设置后首页的状态信息将不再显示。如果输入的是一个链接，则会使用该链接作为 iframe 的 src 属性，这允许你设置任意网页作为首页"), field: "HomePageContent", onChange: F, style: { fontFamily: "JetBrains Mono, Consolas" }, autosize: { minRows: 6, maxRows: 12 } }), e.jsx($, { onClick: () => H("HomePageContent"), loading: c.HomePageContent, children: n("设置首页内容") }), e.jsx(M.TextArea, { label: n("关于"), placeholder: n("在此输入新的关于内容，支持 Markdown & HTML 代码。如果输入的是一个链接，则会使用该链接作为 iframe 的 src 属性，这允许你设置任意网页作为关于页面"), field: "About", onChange: F, style: { fontFamily: "JetBrains Mono, Consolas" }, autosize: { minRows: 6, maxRows: 12 } }), e.jsx($, { onClick: ae, loading: c.About, children: n("设置关于") }), e.jsx(Ge, { fullMode: !1, type: "info", description: n("移除 One API 的版权标识必须首先获得授权，项目维护需要花费大量精力，如果本项目对你有意义，请主动支持本项目"), closeIcon: null, style: { marginTop: 15 } }), e.jsx(M.Input, { label: n("页脚"), placeholder: n("在此输入新的页脚，留空则使用默认页脚，支持 HTML 代码"), field: "Footer", onChange: F }), e.jsx($, { onClick: Z, loading: c.Footer, children: n("设置页脚") })] }) })] }) }) }, er = () => { var Je, _t, Tt, dt, It, nn, un, sn, an, rn, on; const [n, u] = i.useContext(Ft); let s = it(); const { t: a } = Ce(), [r, o] = i.useState({ wechat_verification_code: "", email_verification_code: "", email: "", self_account_deletion_confirmation: "", set_new_password: "", set_new_password_confirmation: "" }), [c, h] = i.useState({}), [F, g] = i.useState(!1), [p, m] = i.useState(!1), [d, E] = i.useState(!1), [_, I] = i.useState(!1), [T, H] = i.useState(!1), [ae, Z] = i.useState(""), [O, A] = i.useState(""), [Y, N] = i.useState(!1), [U, q] = i.useState(!1), [w, V] = i.useState(30), [C, P] = i.useState(""), [j, R] = i.useState(""), [v, l] = i.useState([]), [f, y] = i.useState(!1), [x, S] = i.useState(0), [X, te] = i.useState(!1), D = 10; i.useEffect(() => { let se = localStorage.getItem("status"); se && (se = JSON.parse(se), h(se), se.turnstile_check && (H(!0), Z(se.turnstile_site_key))), Q().then(Be => { console.log(n) }), ce().then(), J().then(), S(hn()) }, []), i.useEffect(() => { let se = null; return U && w > 0 ? se = setInterval(() => { V(w - 1) }, 1e3) : w === 0 && (q(!1), V(30)), () => clearInterval(se) }, [U, w]); const B = (se, Be) => { o(Se => ({ ...Se, [se]: Be })) }, k = async () => { const se = await W.get("/api/user/token"), { success: Be, message: Se, data: at } = se.data; Be ? (R(at), await nt(at), ie(a("令牌已重置并已复制到剪贴板"))) : b(Se) }, J = async () => { const se = await W.get("/api/user/aff"), { success: Be, message: Se, data: at } = se.data; if (Be) { let L = `${window.location.origin}/register?aff=${at}`; P(L) } else b(Se) }, Q = async () => { let se = await W.get("/api/user/self"); const { success: Be, message: Se, data: at } = se.data; Be ? u({ type: "login", payload: at }) : b(Se) }, ce = async () => { let se = await W.get("/api/user/models"); const { success: Be, message: Se, data: at } = se.data; Be ? at != null && l(at) : b(Se) }, pe = async se => { se.target.select(), await nt(se.target.value), ie(a("邀请链接已复制到剪切板")) }, ge = async se => { se.target.select(), await nt(se.target.value), ie(a("系统令牌已复制到剪切板")) }, xe = async () => { if (r.self_account_deletion_confirmation !== n.user.username) { b(a("请输入你的账户名以确认删除！")); return } const se = await W.delete("/api/user/self"), { success: Be, message: Se } = se.data; Be ? (ie(a("账户已删除！")), await W.get("/api/user/logout"), u({ type: "logout" }), localStorage.removeItem("user"), s("/login")) : b(Se) }, Ee = async () => { if (r.wechat_verification_code === "") return; const se = await W.get(`/api/oauth/wechat/bind?code=${r.wechat_verification_code}`), { success: Be, message: Se } = se.data; Be ? (ie(a("微信账户绑定成功！")), m(!1)) : b(Se) }, ze = async () => { if (r.set_new_password !== r.set_new_password_confirmation) { b(a("两次输入的密码不一致！")); return } const se = await W.put("/api/user/self", { password: r.set_new_password }), { success: Be, message: Se } = se.data; Be ? (ie(a("密码修改成功！")), m(!1)) : b(Se), g(!1) }, G = async () => { if (x < hn()) { b(a("划转金额最低为") + " " + ve(hn())); return } const se = await W.post("/api/user/aff_transfer", { quota: x }), { success: Be, message: Se } = se.data; Be ? (ie(Se), y(!1), Q().then()) : b(Se) }, ee = async () => { if (r.email === "") { b(a("请输入邮箱！")); return } if (q(!0), T && O === "") { Te("请稍后几秒重试，Turnstile 正在检查用户环境！"); return } N(!0); const se = await W.get(`/api/verification?email=${r.email}&turnstile=${O}`), { success: Be, message: Se } = se.data; Be ? ie(a("验证码发送成功，请检查邮箱！")) : b(Se), N(!1) }, me = async () => { if (r.email_verification_code === "") { b(a("请输入邮箱验证码！")); return } N(!0); const se = await W.get(`/api/oauth/email/bind?email=${r.email}&code=${r.email_verification_code}`), { success: Be, message: Se } = se.data; Be ? (ie(a("邮箱账户绑定成功！")), E(!1), n.user.email = r.email) : b(Se), N(!1) }, ue = () => n.user ? n.user.username : "null", be = () => { y(!1) }, Ne = async se => { await nt(se) ? ie(a("已复制：") + se) : De.error({ title: a("无法复制到剪贴板，请手动复制"), content: se }) }; return e.jsx("div", { children: e.jsx(Fe, { children: e.jsxs(Fe.Content, { children: [e.jsxs(De, { title: a("请输入要划转的数量"), visible: f, onOk: G, onCancel: be, maskClosable: !1, size: "small", centered: !0, children: [e.jsxs("div", { style: { marginTop: 20 }, children: [e.jsxs(ne.Text, { children: [a("可用额度"), Zt((Je = n == null ? void 0 : n.user) == null ? void 0 : Je.aff_quota)] }), e.jsx(he, { style: { marginTop: 5 }, value: (_t = n == null ? void 0 : n.user) == null ? void 0 : _t.aff_quota, disabled: !0 })] }), e.jsxs("div", { style: { marginTop: 20 }, children: [e.jsxs(ne.Text, { children: [a("划转额度"), Zt(x), " ", a("最低") + ve(hn())] }), e.jsx("div", { children: e.jsx(Kt, { min: 0, style: { marginTop: 5 }, value: x, onChange: se => S(se), disabled: !1 }) })] })] }), e.jsxs("div", { style: { marginTop: 20 }, children: [e.jsx(Re, { title: e.jsx(Re.Meta, { avatar: e.jsx(Vn, { size: "default", color: Xt(ue()), style: { marginRight: 4 }, children: typeof ue() == "string" && ue().slice(0, 1) }), title: e.jsx(ne.Text, { children: ue() }), description: ls() ? e.jsx(K, { color: "red", children: a("管理员") }) : e.jsx(K, { color: "blue", children: a("普通用户") }) }), headerExtraContent: e.jsx(e.Fragment, { children: e.jsxs(ye, { vertical: !0, align: "start", children: [e.jsx(K, { color: "green", children: "ID: " + ((Tt = n == null ? void 0 : n.user) == null ? void 0 : Tt.id) }), e.jsx(K, { color: "blue", children: (dt = n == null ? void 0 : n.user) == null ? void 0 : dt.group })] }) }), footer: e.jsxs(e.Fragment, { children: [e.jsx("div", { style: { display: "flex", alignItems: "center", gap: 8 }, children: e.jsx(ne.Title, { heading: 6, children: a("可用模型") }) }), e.jsx("div", { style: { marginTop: 10 }, children: v.length <= D ? e.jsx(ye, { wrap: !0, children: v.map(se => e.jsx(K, { color: "cyan", onClick: () => { Ne(se) }, children: se }, se)) }) : e.jsxs(e.Fragment, { children: [e.jsx($s, { isOpen: X, children: e.jsxs(ye, { wrap: !0, children: [v.map(se => e.jsx(K, { color: "cyan", onClick: () => { Ne(se) }, children: se }, se)), e.jsx(K, { color: "blue", type: "light", style: { cursor: "pointer" }, onClick: () => te(!1), children: a("收起") })] }) }), !X && e.jsxs(ye, { wrap: !0, children: [v.slice(0, D).map(se => e.jsx(K, { color: "cyan", onClick: () => { Ne(se) }, children: se }, se)), e.jsxs(K, { color: "blue", type: "light", style: { cursor: "pointer" }, onClick: () => te(!0), children: [a("更多"), " ", v.length - D, " ", a("个模型")] })] })] }) })] }), children: e.jsxs(ht, { row: !0, children: [e.jsx(ht.Item, { itemKey: a("当前余额"), children: ve((It = n == null ? void 0 : n.user) == null ? void 0 : It.quota) }), e.jsx(ht.Item, { itemKey: a("历史消耗"), children: ve((nn = n == null ? void 0 : n.user) == null ? void 0 : nn.used_quota) }), e.jsx(ht.Item, { itemKey: a("请求次数"), children: (un = n.user) == null ? void 0 : un.request_count })] }) }), e.jsxs(Re, { style: { marginTop: 10 }, footer: e.jsxs("div", { children: [e.jsx(ne.Text, { children: a("邀请链接") }), e.jsx(he, { style: { marginTop: 10 }, value: C, onClick: pe, readOnly: !0 })] }), children: [e.jsx(ne.Title, { heading: 6, children: a("邀请信息") }), e.jsx("div", { style: { marginTop: 10 }, children: e.jsxs(ht, { row: !0, children: [e.jsxs(ht.Item, { itemKey: a("待使用收益"), children: [e.jsx("span", { style: { color: "rgba(var(--semi-red-5), 1)" }, children: ve((sn = n == null ? void 0 : n.user) == null ? void 0 : sn.aff_quota) }), e.jsx($, { type: "secondary", onClick: () => y(!0), size: "small", style: { marginLeft: 10 }, children: a("划转") })] }), e.jsx(ht.Item, { itemKey: a("总收益"), children: ve((an = n == null ? void 0 : n.user) == null ? void 0 : an.aff_history_quota) }), e.jsx(ht.Item, { itemKey: a("邀请人数"), children: (rn = n == null ? void 0 : n.user) == null ? void 0 : rn.aff_count })] }) })] }), e.jsxs(Re, { style: { marginTop: 10 }, children: [e.jsx(ne.Title, { heading: 6, children: a("个人信息") }), e.jsxs("div", { style: { marginTop: 20 }, children: [e.jsx(ne.Text, { strong: !0, children: a("邮箱") }), e.jsxs("div", { style: { display: "flex", justifyContent: "space-between" }, children: [e.jsx("div", { children: e.jsx(he, { value: n.user && n.user.email !== "" ? n.user.email : a("未绑定"), readonly: !0 }) }), e.jsx("div", { children: e.jsx($, { onClick: () => { E(!0) }, children: n.user && n.user.email !== "" ? a("修改绑定") : a("绑定邮箱") }) })] })] }), e.jsxs("div", { style: { marginTop: 10 }, children: [e.jsx(ne.Text, { strong: !0, children: a("微信") }), e.jsxs("div", { style: { display: "flex", justifyContent: "space-between" }, children: [e.jsx("div", { children: e.jsx(he, { value: n.user && n.user.wechat_id !== "" ? a("已绑定") : a("未绑定"), readonly: !0 }) }), e.jsx("div", { children: e.jsx($, { disabled: n.user && n.user.wechat_id !== "" || !c.wechat_login, children: c.wechat_login ? a("绑定") : a("未启用") }) })] })] }), e.jsxs("div", { style: { marginTop: 10 }, children: [e.jsx(ne.Text, { strong: !0, children: a("GitHub") }), e.jsxs("div", { style: { display: "flex", justifyContent: "space-between" }, children: [e.jsx("div", { children: e.jsx(he, { value: n.user && n.user.github_id !== "" ? n.user.github_id : a("未绑定"), readonly: !0 }) }), e.jsx("div", { children: e.jsx($, { onClick: () => { Xn(c.github_client_id) }, disabled: n.user && n.user.github_id !== "" || !c.github_oauth, children: c.github_oauth ? a("绑定") : a("未启用") }) })] })] }), e.jsxs("div", { style: { marginTop: 10 }, children: [e.jsx(ne.Text, { strong: !0, children: a("Telegram") }), e.jsxs("div", { style: { display: "flex", justifyContent: "space-between" }, children: [e.jsx("div", { children: e.jsx(he, { value: n.user && n.user.telegram_id !== "" ? n.user.telegram_id : a("未绑定"), readonly: !0 }) }), e.jsx("div", { children: c.telegram_oauth ? n.user.telegram_id !== "" ? e.jsx($, { disabled: !0, children: a("已绑定") }) : e.jsx(is, { dataAuthUrl: "/api/oauth/telegram/bind", botName: c.telegram_bot_name }) : e.jsx($, { disabled: !0, children: a("未启用") }) })] })] }), e.jsxs("div", { style: { marginTop: 10 }, children: [e.jsx(ne.Text, { strong: !0, children: a("LinuxDO") }), e.jsxs("div", { style: { display: "flex", justifyContent: "space-between" }, children: [e.jsx("div", { children: e.jsx(he, { value: n.user && n.user.linux_do_id !== "" ? n.user.linux_do_id : a("未绑定"), readonly: !0 }) }), e.jsx("div", { children: e.jsx($, { onClick: () => { eu(c.linuxdo_client_id) }, disabled: n.user && n.user.linux_do_id !== "" || !c.linuxdo_oauth, children: c.linuxdo_oauth ? a("绑定") : a("未启用") }) })] })] }), e.jsxs("div", { style: { marginTop: 10 }, children: [e.jsxs(ye, { children: [e.jsx($, { onClick: k, children: a("生成系统访问令牌") }), e.jsx($, { onClick: () => { g(!0) }, children: a("修改密码") }), e.jsx($, { type: "danger", onClick: () => { I(!0) }, children: a("删除个人账户") })] }), j && e.jsx(he, { readOnly: !0, value: j, onClick: ge, style: { marginTop: "10px" } }), c.wechat_login && e.jsx($, { onClick: () => { m(!0) }, children: a("绑定微信账号") }), e.jsxs(De, { onCancel: () => m(!1), visible: p, size: "small", children: [e.jsx(Us, { src: c.wechat_qrcode }), e.jsx("div", { style: { textAlign: "center" }, children: e.jsx("p", { children: "微信扫码关注公众号，输入「验证码」获取验证码（三分钟内有效）" }) }), e.jsx(he, { placeholder: "验证码", name: "wechat_verification_code", value: r.wechat_verification_code, onChange: se => B("wechat_verification_code", se) }), e.jsx($, { color: "", fluid: !0, size: "large", onClick: Ee, children: a("绑定") })] })] })] }), e.jsxs(De, { onCancel: () => E(!1), onOk: me, visible: d, size: "small", centered: !0, maskClosable: !1, children: [e.jsx(ne.Title, { heading: 6, children: a("绑定邮箱地址") }), e.jsxs("div", { style: { marginTop: 20, display: "flex", justifyContent: "space-between" }, children: [e.jsx(he, { fluid: !0, placeholder: "输入邮箱地址", onChange: se => B("email", se), name: "email", type: "email" }), e.jsx($, { onClick: ee, disabled: U || Y, children: U ? `重新发送 (${w})` : "获取验证码" })] }), e.jsx("div", { style: { marginTop: 10 }, children: e.jsx(he, { fluid: !0, placeholder: "验证码", name: "email_verification_code", value: r.email_verification_code, onChange: se => B("email_verification_code", se) }) }), T ? e.jsx(Lt, { sitekey: ae, onVerify: se => { A(se) } }) : e.jsx(e.Fragment, {})] }), e.jsxs(De, { onCancel: () => I(!1), visible: _, size: "small", centered: !0, onOk: xe, children: [e.jsx("div", { style: { marginTop: 20 }, children: e.jsx(Ge, { type: "danger", description: "您正在删除自己的帐户，将清空所有数据且不可恢复", closeIcon: null }) }), e.jsxs("div", { style: { marginTop: 20 }, children: [e.jsx(he, { placeholder: `输入你的账户名 ${(on = n == null ? void 0 : n.user) == null ? void 0 : on.username} 以确认删除`, name: "self_account_deletion_confirmation", value: r.self_account_deletion_confirmation, onChange: se => B("self_account_deletion_confirmation", se) }), T ? e.jsx(Lt, { sitekey: ae, onVerify: se => { A(se) } }) : e.jsx(e.Fragment, {})] })] }), e.jsx(De, { onCancel: () => g(!1), visible: F, size: "small", centered: !0, onOk: ze, children: e.jsxs("div", { style: { marginTop: 20 }, children: [e.jsx(he, { name: "set_new_password", placeholder: a("新密码"), value: r.set_new_password, onChange: se => B("set_new_password", se) }), e.jsx(he, { style: { marginTop: 20 }, name: "set_new_password_confirmation", placeholder: a("确认新密码"), value: r.set_new_password_confirmation, onChange: se => B("set_new_password_confirmation", se) }), T ? e.jsx(Lt, { sitekey: ae, onVerify: se => { A(se) } }) : e.jsx(e.Fragment, {})] }) })] })] }) }) }) }; function tr(n) { const { t: u } = Ce(), [s, a] = i.useState(!1), [r, o] = i.useState({ TopUpLink: "", ChatLink: "", ChatLink2: "", QuotaPerUnit: "", RetryTimes: "", DisplayInCurrencyEnabled: !1, DisplayTokenStatEnabled: !1, DefaultCollapseSidebar: !1 }), c = i.useRef(), [h, F] = i.useState(r); function g(m, d) { const E = d.target.id; o(_ => ({ ..._, [E]: m })) } function p() { const m = ct(r, h); if (!m.length) return ot(u("你似乎并没有修改什么")); const d = m.map(E => { let _ = ""; return typeof r[E.key] == "boolean" ? _ = String(r[E.key]) : _ = r[E.key], W.put("/api/option/", { key: E.key, value: _ }) }); a(!0), Promise.all(d).then(E => { if (d.length === 1) { if (E.includes(void 0)) return } else if (d.length > 1 && E.includes(void 0)) return b(u("部分保存失败，请重试")); ie(u("保存成功")), n.refresh() }).catch(() => { b(u("保存失败，请重试")) }).finally(() => { a(!1) }) } return i.useEffect(() => { const m = {}; for (let d in n.options) Object.keys(r).includes(d) && (m[d] = n.options[d]); o(m), F(structuredClone(m)), c.current.setValues(m) }, [n.options]), e.jsx(e.Fragment, { children: e.jsxs(Me, { spinning: s, children: [e.jsx(Ge, { type: "warning", description: u("聊天链接功能已经弃用，请使用下方聊天设置功能") }), e.jsx(M, { values: r, getFormApi: m => c.current = m, style: { marginBottom: 15 }, children: e.jsxs(M.Section, { text: u("通用设置"), children: [e.jsxs(Ae, { gutter: 16, children: [e.jsx(fe, { span: 8, children: e.jsx(M.Input, { field: "TopUpLink", label: u("充值链接"), initValue: "", placeholder: u("例如发卡网站的购买链接"), onChange: g, showClear: !0 }) }), e.jsx(fe, { span: 8, children: e.jsx(M.Input, { field: "ChatLink", label: u("默认聊天页面链接"), initValue: "", placeholder: u("例如 ChatGPT Next Web 的部署地址"), onChange: g, showClear: !0 }) }), e.jsx(fe, { span: 8, children: e.jsx(M.Input, { field: "ChatLink2", label: u("聊天页面 2 链接"), initValue: "", placeholder: u("例如 ChatGPT Next Web 的部署地址"), onChange: g, showClear: !0 }) }), e.jsx(fe, { span: 8, children: e.jsx(M.Input, { field: "QuotaPerUnit", label: u("单位美元额度"), initValue: "", placeholder: u("一单位货币能兑换的额度"), onChange: g, showClear: !0 }) }), e.jsx(fe, { span: 8, children: e.jsx(M.Input, { field: "RetryTimes", label: u("失败重试次数"), initValue: "", placeholder: u("失败重试次数"), onChange: g, showClear: !0 }) })] }), e.jsxs(Ae, { gutter: 16, children: [e.jsx(fe, { span: 8, children: e.jsx(M.Switch, { field: "DisplayInCurrencyEnabled", label: u("以货币形式显示额度"), size: "default", checkedText: "｜", uncheckedText: "〇", onChange: m => { o({ ...r, DisplayInCurrencyEnabled: m }) } }) }), e.jsx(fe, { span: 8, children: e.jsx(M.Switch, { field: "DisplayTokenStatEnabled", label: u("额度查询接口返回令牌额度而非用户额度"), size: "default", checkedText: "｜", uncheckedText: "〇", onChange: m => o({ ...r, DisplayTokenStatEnabled: m }) }) }), e.jsx(fe, { span: 8, children: e.jsx(M.Switch, { field: "DefaultCollapseSidebar", label: u("默认折叠侧边栏"), size: "default", checkedText: "｜", uncheckedText: "〇", onChange: m => o({ ...r, DefaultCollapseSidebar: m }) }) })] }), e.jsx(Ae, { children: e.jsx($, { size: "default", onClick: p, children: u("保存通用设置") }) })] }) })] }) }) } function nr(n) { const { t: u } = Ce(), [s, a] = i.useState(!1), [r, o] = i.useState({ DrawingEnabled: !1, MjNotifyEnabled: !1, MjAccountFilterEnabled: !1, MjForwardUrlEnabled: !1, MjModeClearEnabled: !1, MjActionCheckSuccessEnabled: !1 }), c = i.useRef(), [h, F] = i.useState(r); function g() { const p = ct(r, h); if (!p.length) return ot(u("你似乎并没有修改什么")); const m = p.map(d => { let E = ""; return typeof r[d.key] == "boolean" ? E = String(r[d.key]) : E = r[d.key], W.put("/api/option/", { key: d.key, value: E }) }); a(!0), Promise.all(m).then(d => { if (m.length === 1) { if (d.includes(void 0)) return } else if (m.length > 1 && d.includes(void 0)) return b(u("部分保存失败，请重试")); ie(u("保存成功")), n.refresh() }).catch(() => { b(u("保存失败，请重试")) }).finally(() => { a(!1) }) } return i.useEffect(() => { const p = {}; for (let m in n.options) Object.keys(r).includes(m) && (p[m] = n.options[m]); o(p), F(structuredClone(p)), c.current.setValues(p), localStorage.setItem("mj_notify_enabled", String(r.MjNotifyEnabled)) }, [n.options]), e.jsx(e.Fragment, { children: e.jsx(Me, { spinning: s, children: e.jsx(M, { values: r, getFormApi: p => c.current = p, style: { marginBottom: 15 }, children: e.jsxs(M.Section, { text: u("绘图设置"), children: [e.jsxs(Ae, { gutter: 16, children: [e.jsx(fe, { span: 8, children: e.jsx(M.Switch, { field: "DrawingEnabled", label: u("启用绘图功能"), size: "default", checkedText: "｜", uncheckedText: "〇", onChange: p => { o({ ...r, DrawingEnabled: p }) } }) }), e.jsx(fe, { span: 8, children: e.jsx(M.Switch, { field: "MjNotifyEnabled", label: u("允许回调（会泄露服务器 IP 地址）"), size: "default", checkedText: "｜", uncheckedText: "〇", onChange: p => o({ ...r, MjNotifyEnabled: p }) }) }), e.jsx(fe, { span: 8, children: e.jsx(M.Switch, { field: "MjAccountFilterEnabled", label: u("允许 AccountFilter 参数"), size: "default", checkedText: "｜", uncheckedText: "〇", onChange: p => o({ ...r, MjAccountFilterEnabled: p }) }) }), e.jsx(fe, { span: 8, children: e.jsx(M.Switch, { field: "MjForwardUrlEnabled", label: u("开启之后将上游地址替换为服务器地址"), size: "default", checkedText: "｜", uncheckedText: "〇", onChange: p => o({ ...r, MjForwardUrlEnabled: p }) }) }), e.jsx(fe, { span: 8, children: e.jsx(M.Switch, { field: "MjModeClearEnabled", label: e.jsxs(e.Fragment, { children: [u("开启之后会清除用户提示词中的"), " ", e.jsx(K, { children: "--fast" }), " 、", e.jsx(K, { children: "--relax" }), " ", u("以及"), " ", e.jsx(K, { children: "--turbo" }), " ", u("参数")] }), size: "default", checkedText: "｜", uncheckedText: "〇", onChange: p => o({ ...r, MjModeClearEnabled: p }) }) }), e.jsx(fe, { span: 8, children: e.jsx(M.Switch, { field: "MjActionCheckSuccessEnabled", label: u("检测必须等待绘图成功才能进行放大等操作"), size: "default", checkedText: "｜", uncheckedText: "〇", onChange: p => o({ ...r, MjActionCheckSuccessEnabled: p }) }) })] }), e.jsx(Ae, { children: e.jsx($, { size: "default", onClick: g, children: u("保存绘图设置") }) })] }) }) }) }) } function ur(n) { const { t: u } = Ce(), [s, a] = i.useState(!1), [r, o] = i.useState({ CheckSensitiveEnabled: !1, CheckSensitiveOnPromptEnabled: !1, SensitiveWords: "" }), c = i.useRef(), [h, F] = i.useState(r); function g() { const p = ct(r, h); if (!p.length) return ot(u("你似乎并没有修改什么")); const m = p.map(d => { let E = ""; return typeof r[d.key] == "boolean" ? E = String(r[d.key]) : E = r[d.key], W.put("/api/option/", { key: d.key, value: E }) }); a(!0), Promise.all(m).then(d => { if (m.length === 1) { if (d.includes(void 0)) return } else if (m.length > 1 && d.includes(void 0)) return b(u("部分保存失败，请重试")); ie(u("保存成功")), n.refresh() }).catch(() => { b(u("保存失败，请重试")) }).finally(() => { a(!1) }) } return i.useEffect(() => { const p = {}; for (let m in n.options) Object.keys(r).includes(m) && (p[m] = n.options[m]); o(p), F(structuredClone(p)), c.current.setValues(p) }, [n.options]), e.jsx(e.Fragment, { children: e.jsx(Me, { spinning: s, children: e.jsx(M, { values: r, getFormApi: p => c.current = p, style: { marginBottom: 15 }, children: e.jsxs(M.Section, { text: u("屏蔽词过滤设置"), children: [e.jsxs(Ae, { gutter: 16, children: [e.jsx(fe, { span: 8, children: e.jsx(M.Switch, { field: "CheckSensitiveEnabled", label: u("启用屏蔽词过滤功能"), size: "default", checkedText: "｜", uncheckedText: "〇", onChange: p => { o({ ...r, CheckSensitiveEnabled: p }) } }) }), e.jsx(fe, { span: 8, children: e.jsx(M.Switch, { field: "CheckSensitiveOnPromptEnabled", label: u("启用 Prompt 检查"), size: "default", checkedText: "｜", uncheckedText: "〇", onChange: p => o({ ...r, CheckSensitiveOnPromptEnabled: p }) }) })] }), e.jsx(Ae, { children: e.jsx(fe, { span: 16, children: e.jsx(M.TextArea, { label: u("屏蔽词列表"), extraText: u("一行一个屏蔽词，不需要符号分割"), placeholder: u("一行一个屏蔽词，不需要符号分割"), field: "SensitiveWords", onChange: p => o({ ...r, SensitiveWords: p }), style: { fontFamily: "JetBrains Mono, Consolas" }, autosize: { minRows: 6, maxRows: 12 } }) }) }), e.jsx(Ae, { children: e.jsx($, { size: "default", onClick: g, children: u("保存屏蔽词过滤设置") }) })] }) }) }) }) } var ys = { exports: {} }; (function (n, u) { (function (s, a) { n.exports = a() })(ha, function () { var s = 1e3, a = 6e4, r = 36e5, o = "millisecond", c = "second", h = "minute", F = "hour", g = "day", p = "week", m = "month", d = "quarter", E = "year", _ = "date", I = "Invalid Date", T = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, H = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, ae = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function (j) { var R = ["th", "st", "nd", "rd"], v = j % 100; return "[" + j + (R[(v - 20) % 10] || R[v] || R[0]) + "]" } }, Z = function (j, R, v) { var l = String(j); return !l || l.length >= R ? j : "" + Array(R + 1 - l.length).join(v) + j }, O = { s: Z, z: function (j) { var R = -j.utcOffset(), v = Math.abs(R), l = Math.floor(v / 60), f = v % 60; return (R <= 0 ? "+" : "-") + Z(l, 2, "0") + ":" + Z(f, 2, "0") }, m: function j(R, v) { if (R.date() < v.date()) return -j(v, R); var l = 12 * (v.year() - R.year()) + (v.month() - R.month()), f = R.clone().add(l, m), y = v - f < 0, x = R.clone().add(l + (y ? -1 : 1), m); return +(-(l + (v - f) / (y ? f - x : x - f)) || 0) }, a: function (j) { return j < 0 ? Math.ceil(j) || 0 : Math.floor(j) }, p: function (j) { return { M: m, y: E, w: p, d: g, D: _, h: F, m: h, s: c, ms: o, Q: d }[j] || String(j || "").toLowerCase().replace(/s$/, "") }, u: function (j) { return j === void 0 } }, A = "en", Y = {}; Y[A] = ae; var N = "$isDayjsObject", U = function (j) { return j instanceof C || !(!j || !j[N]) }, q = function j(R, v, l) { var f; if (!R) return A; if (typeof R == "string") { var y = R.toLowerCase(); Y[y] && (f = y), v && (Y[y] = v, f = y); var x = R.split("-"); if (!f && x.length > 1) return j(x[0]) } else { var S = R.name; Y[S] = R, f = S } return !l && f && (A = f), f || !l && A }, w = function (j, R) { if (U(j)) return j.clone(); var v = typeof R == "object" ? R : {}; return v.date = j, v.args = arguments, new C(v) }, V = O; V.l = q, V.i = U, V.w = function (j, R) { return w(j, { locale: R.$L, utc: R.$u, x: R.$x, $offset: R.$offset }) }; var C = function () { function j(v) { this.$L = q(v.locale, null, !0), this.parse(v), this.$x = this.$x || v.x || {}, this[N] = !0 } var R = j.prototype; return R.parse = function (v) { this.$d = function (l) { var f = l.date, y = l.utc; if (f === null) return new Date(NaN); if (V.u(f)) return new Date; if (f instanceof Date) return new Date(f); if (typeof f == "string" && !/Z$/i.test(f)) { var x = f.match(T); if (x) { var S = x[2] - 1 || 0, X = (x[7] || "0").substring(0, 3); return y ? new Date(Date.UTC(x[1], S, x[3] || 1, x[4] || 0, x[5] || 0, x[6] || 0, X)) : new Date(x[1], S, x[3] || 1, x[4] || 0, x[5] || 0, x[6] || 0, X) } } return new Date(f) }(v), this.init() }, R.init = function () { var v = this.$d; this.$y = v.getFullYear(), this.$M = v.getMonth(), this.$D = v.getDate(), this.$W = v.getDay(), this.$H = v.getHours(), this.$m = v.getMinutes(), this.$s = v.getSeconds(), this.$ms = v.getMilliseconds() }, R.$utils = function () { return V }, R.isValid = function () { return this.$d.toString() !== I }, R.isSame = function (v, l) { var f = w(v); return this.startOf(l) <= f && f <= this.endOf(l) }, R.isAfter = function (v, l) { return w(v) < this.startOf(l) }, R.isBefore = function (v, l) { return this.endOf(l) < w(v) }, R.$g = function (v, l, f) { return V.u(v) ? this[l] : this.set(f, v) }, R.unix = function () { return Math.floor(this.valueOf() / 1e3) }, R.valueOf = function () { return this.$d.getTime() }, R.startOf = function (v, l) { var f = this, y = !!V.u(l) || l, x = V.p(v), S = function (ce, pe) { var ge = V.w(f.$u ? Date.UTC(f.$y, pe, ce) : new Date(f.$y, pe, ce), f); return y ? ge : ge.endOf(g) }, X = function (ce, pe) { return V.w(f.toDate()[ce].apply(f.toDate("s"), (y ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(pe)), f) }, te = this.$W, D = this.$M, B = this.$D, k = "set" + (this.$u ? "UTC" : ""); switch (x) { case E: return y ? S(1, 0) : S(31, 11); case m: return y ? S(1, D) : S(0, D + 1); case p: var J = this.$locale().weekStart || 0, Q = (te < J ? te + 7 : te) - J; return S(y ? B - Q : B + (6 - Q), D); case g: case _: return X(k + "Hours", 0); case F: return X(k + "Minutes", 1); case h: return X(k + "Seconds", 2); case c: return X(k + "Milliseconds", 3); default: return this.clone() } }, R.endOf = function (v) { return this.startOf(v, !1) }, R.$set = function (v, l) { var f, y = V.p(v), x = "set" + (this.$u ? "UTC" : ""), S = (f = {}, f[g] = x + "Date", f[_] = x + "Date", f[m] = x + "Month", f[E] = x + "FullYear", f[F] = x + "Hours", f[h] = x + "Minutes", f[c] = x + "Seconds", f[o] = x + "Milliseconds", f)[y], X = y === g ? this.$D + (l - this.$W) : l; if (y === m || y === E) { var te = this.clone().set(_, 1); te.$d[S](X), te.init(), this.$d = te.set(_, Math.min(this.$D, te.daysInMonth())).$d } else S && this.$d[S](X); return this.init(), this }, R.set = function (v, l) { return this.clone().$set(v, l) }, R.get = function (v) { return this[V.p(v)]() }, R.add = function (v, l) { var f, y = this; v = Number(v); var x = V.p(l), S = function (D) { var B = w(y); return V.w(B.date(B.date() + Math.round(D * v)), y) }; if (x === m) return this.set(m, this.$M + v); if (x === E) return this.set(E, this.$y + v); if (x === g) return S(1); if (x === p) return S(7); var X = (f = {}, f[h] = a, f[F] = r, f[c] = s, f)[x] || 1, te = this.$d.getTime() + v * X; return V.w(te, this) }, R.subtract = function (v, l) { return this.add(-1 * v, l) }, R.format = function (v) { var l = this, f = this.$locale(); if (!this.isValid()) return f.invalidDate || I; var y = v || "YYYY-MM-DDTHH:mm:ssZ", x = V.z(this), S = this.$H, X = this.$m, te = this.$M, D = f.weekdays, B = f.months, k = f.meridiem, J = function (pe, ge, xe, Ee) { return pe && (pe[ge] || pe(l, y)) || xe[ge].slice(0, Ee) }, Q = function (pe) { return V.s(S % 12 || 12, pe, "0") }, ce = k || function (pe, ge, xe) { var Ee = pe < 12 ? "AM" : "PM"; return xe ? Ee.toLowerCase() : Ee }; return y.replace(H, function (pe, ge) { return ge || function (xe) { switch (xe) { case "YY": return String(l.$y).slice(-2); case "YYYY": return V.s(l.$y, 4, "0"); case "M": return te + 1; case "MM": return V.s(te + 1, 2, "0"); case "MMM": return J(f.monthsShort, te, B, 3); case "MMMM": return J(B, te); case "D": return l.$D; case "DD": return V.s(l.$D, 2, "0"); case "d": return String(l.$W); case "dd": return J(f.weekdaysMin, l.$W, D, 2); case "ddd": return J(f.weekdaysShort, l.$W, D, 3); case "dddd": return D[l.$W]; case "H": return String(S); case "HH": return V.s(S, 2, "0"); case "h": return Q(1); case "hh": return Q(2); case "a": return ce(S, X, !0); case "A": return ce(S, X, !1); case "m": return String(X); case "mm": return V.s(X, 2, "0"); case "s": return String(l.$s); case "ss": return V.s(l.$s, 2, "0"); case "SSS": return V.s(l.$ms, 3, "0"); case "Z": return x }return null }(pe) || x.replace(":", "") }) }, R.utcOffset = function () { return 15 * -Math.round(this.$d.getTimezoneOffset() / 15) }, R.diff = function (v, l, f) { var y, x = this, S = V.p(l), X = w(v), te = (X.utcOffset() - this.utcOffset()) * a, D = this - X, B = function () { return V.m(x, X) }; switch (S) { case E: y = B() / 12; break; case m: y = B(); break; case d: y = B() / 3; break; case p: y = (D - te) / 6048e5; break; case g: y = (D - te) / 864e5; break; case F: y = D / r; break; case h: y = D / a; break; case c: y = D / s; break; default: y = D }return f ? y : V.a(y) }, R.daysInMonth = function () { return this.endOf(m).$D }, R.$locale = function () { return Y[this.$L] }, R.locale = function (v, l) { if (!v) return this.$L; var f = this.clone(), y = q(v, l, !0); return y && (f.$L = y), f }, R.clone = function () { return V.w(this.$d, this) }, R.toDate = function () { return new Date(this.valueOf()) }, R.toJSON = function () { return this.isValid() ? this.toISOString() : null }, R.toISOString = function () { return this.$d.toISOString() }, R.toString = function () { return this.$d.toUTCString() }, j }(), P = C.prototype; return w.prototype = P, [["$ms", o], ["$s", c], ["$m", h], ["$H", F], ["$W", g], ["$M", m], ["$y", E], ["$D", _]].forEach(function (j) { P[j[1]] = function (R) { return this.$g(R, j[0], j[1]) } }), w.extend = function (j, R) { return j.$i || (j(R, C, w), j.$i = !0), w }, w.locale = q, w.isDayjs = U, w.unix = function (j) { return w(1e3 * j) }, w.en = Y[A], w.Ls = Y, w.p = {}, w }) })(ys); var sr = ys.exports; const ar = ss(sr); function rr(n) { const { t: u } = Ce(), [s, a] = i.useState(!1), [r, o] = i.useState(!1), [c, h] = i.useState({ LogConsumeEnabled: !1, historyTimestamp: ar().subtract(1, "month").toDate() }), F = i.useRef(), [g, p] = i.useState(c); function m() { const E = ct(c, g).filter(I => I.key !== "historyTimestamp"); if (!E.length) return ot(u("你似乎并没有修改什么")); const _ = E.map(I => { let T = ""; return typeof c[I.key] == "boolean" ? T = String(c[I.key]) : T = c[I.key], W.put("/api/option/", { key: I.key, value: T }) }); a(!0), Promise.all(_).then(I => { if (_.length === 1) { if (I.includes(void 0)) return } else if (_.length > 1 && I.includes(void 0)) return b(u("部分保存失败，请重试")); ie(u("保存成功")), n.refresh() }).catch(() => { b(u("保存失败，请重试")) }).finally(() => { a(!1) }) } async function d() { try { if (o(!0), !c.historyTimestamp) throw new Error(u("请选择日志记录时间")); const E = await W.delete(`/api/log/?target_timestamp=${Date.parse(c.historyTimestamp) / 1e3}`), { success: _, message: I, data: T } = E.data; if (_) { ie(`${T} ${u("条日志已清理！")}`); return } else throw new Error(u("日志清理失败：") + I) } catch (E) { b(E.message) } finally { o(!1) } } return i.useEffect(() => { const E = {}; for (let _ in n.options) Object.keys(c).includes(_) && (E[_] = n.options[_]); E.historyTimestamp = c.historyTimestamp, h(Object.assign(c, E)), p(structuredClone(E)), F.current.setValues(E) }, [n.options]), e.jsx(e.Fragment, { children: e.jsx(Me, { spinning: s, children: e.jsx(M, { values: c, getFormApi: E => F.current = E, style: { marginBottom: 15 }, children: e.jsxs(M.Section, { text: u("日志设置"), children: [e.jsxs(Ae, { gutter: 16, children: [e.jsx(fe, { span: 8, children: e.jsx(M.Switch, { field: "LogConsumeEnabled", label: u("启用额度消费日志记录"), size: "default", checkedText: "｜", uncheckedText: "〇", onChange: E => { h({ ...c, LogConsumeEnabled: E }) } }) }), e.jsx(fe, { span: 8, children: e.jsxs(Me, { spinning: r, children: [e.jsx(M.DatePicker, { label: u("日志记录时间"), field: "historyTimestamp", type: "dateTime", inputReadOnly: !0, onChange: E => { h({ ...c, historyTimestamp: E }) } }), e.jsx($, { size: "default", onClick: d, children: u("清除历史日志") })] }) })] }), e.jsx(Ae, { children: e.jsx($, { size: "default", onClick: m, children: u("保存日志设置") }) })] }) }) }) }) } function ir(n) { const { t: u } = Ce(), s = [{ key: "hour", label: u("小时"), value: "hour" }, { key: "day", label: u("天"), value: "day" }, { key: "week", label: u("周"), value: "week" }], [a, r] = i.useState(!1), [o, c] = i.useState({ DataExportEnabled: !1, DataExportInterval: "", DataExportDefaultTime: "" }), h = i.useRef(), [F, g] = i.useState(o); function p() { const m = ct(o, F); if (!m.length) return ot(u("你似乎并没有修改什么")); const d = m.map(E => { let _ = ""; return typeof o[E.key] == "boolean" ? _ = String(o[E.key]) : _ = o[E.key], W.put("/api/option/", { key: E.key, value: _ }) }); r(!0), Promise.all(d).then(E => { if (d.length === 1) { if (E.includes(void 0)) return } else if (d.length > 1 && E.includes(void 0)) return b(u("部分保存失败，请重试")); ie(u("保存成功")), n.refresh() }).catch(() => { b(u("保存失败，请重试")) }).finally(() => { r(!1) }) } return i.useEffect(() => { const m = {}; for (let d in n.options) Object.keys(o).includes(d) && (m[d] = n.options[d]); c(m), g(structuredClone(m)), h.current.setValues(m), localStorage.setItem("data_export_default_time", String(o.DataExportDefaultTime)) }, [n.options]), e.jsx(e.Fragment, { children: e.jsx(Me, { spinning: a, children: e.jsx(M, { values: o, getFormApi: m => h.current = m, style: { marginBottom: 15 }, children: e.jsxs(M.Section, { text: u("数据看板设置"), children: [e.jsx(Ae, { gutter: 16, children: e.jsx(fe, { span: 8, children: e.jsx(M.Switch, { field: "DataExportEnabled", label: u("启用数据看板（实验性）"), size: "default", checkedText: "｜", uncheckedText: "〇", onChange: m => { c({ ...o, DataExportEnabled: m }) } }) }) }), e.jsxs(Ae, { children: [e.jsx(fe, { span: 8, children: e.jsx(M.InputNumber, { label: u("数据看板更新间隔"), step: 1, min: 1, suffix: u("分钟"), extraText: u("设置过短会影响数据库性能"), placeholder: u("数据看板更新间隔"), field: "DataExportInterval", onChange: m => c({ ...o, DataExportInterval: String(m) }) }) }), e.jsx(fe, { span: 8, children: e.jsx(M.Select, { label: u("数据看板默认时间粒度"), optionList: s, field: "DataExportDefaultTime", extraText: u("仅修改展示粒度，统计精确到小时"), placeholder: u("数据看板默认时间粒度"), style: { width: 180 }, onChange: m => c({ ...o, DataExportDefaultTime: String(m) }) }) })] }), e.jsx(Ae, { children: e.jsx($, { size: "default", onClick: p, children: u("保存数据看板设置") }) })] }) }) }) }) } function or(n) { const { t: u } = Ce(), [s, a] = i.useState(!1), [r, o] = i.useState({ ChannelDisableThreshold: "", QuotaRemindThreshold: "", AutomaticDisableChannelEnabled: !1, AutomaticEnableChannelEnabled: !1 }), c = i.useRef(), [h, F] = i.useState(r); function g() { const p = ct(r, h); if (!p.length) return ot(u("你似乎并没有修改什么")); const m = p.map(d => { let E = ""; return typeof r[d.key] == "boolean" ? E = String(r[d.key]) : E = r[d.key], W.put("/api/option/", { key: d.key, value: E }) }); a(!0), Promise.all(m).then(d => { if (m.length === 1) { if (d.includes(void 0)) return } else if (m.length > 1 && d.includes(void 0)) return b(u("部分保存失败，请重试")); ie(u("保存成功")), n.refresh() }).catch(() => { b(u("保存失败，请重试")) }).finally(() => { a(!1) }) } return i.useEffect(() => { const p = {}; for (let m in n.options) Object.keys(r).includes(m) && (p[m] = n.options[m]); o(p), F(structuredClone(p)), c.current.setValues(p) }, [n.options]), e.jsx(e.Fragment, { children: e.jsx(Me, { spinning: s, children: e.jsx(M, { values: r, getFormApi: p => c.current = p, style: { marginBottom: 15 }, children: e.jsxs(M.Section, { text: u("监控设置"), children: [e.jsxs(Ae, { gutter: 16, children: [e.jsx(fe, { span: 8, children: e.jsx(M.InputNumber, { label: u("最长响应时间"), step: 1, min: 0, suffix: u("秒"), extraText: u("当运行通道全部测试时，超过此时间将自动禁用通道"), placeholder: "", field: "ChannelDisableThreshold", onChange: p => o({ ...r, ChannelDisableThreshold: String(p) }) }) }), e.jsx(fe, { span: 8, children: e.jsx(M.InputNumber, { label: u("额度提醒阈值"), step: 1, min: 0, suffix: "Token", extraText: u("低于此额度时将发送邮件提醒用户"), placeholder: "", field: "QuotaRemindThreshold", onChange: p => o({ ...r, QuotaRemindThreshold: String(p) }) }) })] }), e.jsxs(Ae, { gutter: 16, children: [e.jsx(fe, { span: 8, children: e.jsx(M.Switch, { field: "AutomaticDisableChannelEnabled", label: u("失败时自动禁用通道"), size: "default", checkedText: "｜", uncheckedText: "〇", onChange: p => { o({ ...r, AutomaticDisableChannelEnabled: p }) } }) }), e.jsx(fe, { span: 8, children: e.jsx(M.Switch, { field: "AutomaticEnableChannelEnabled", label: u("成功时自动启用通道"), size: "default", checkedText: "｜", uncheckedText: "〇", onChange: p => o({ ...r, AutomaticEnableChannelEnabled: p }) }) })] }), e.jsx(Ae, { children: e.jsx($, { size: "default", onClick: g, children: u("保存监控设置") }) })] }) }) }) }) } function lr(n) { const { t: u } = Ce(), [s, a] = i.useState(!1), [r, o] = i.useState({ QuotaForNewUser: "", PreConsumedQuota: "", QuotaForInviter: "", QuotaForInvitee: "" }), c = i.useRef(), [h, F] = i.useState(r); function g() { const p = ct(r, h); if (!p.length) return ot(u("你似乎并没有修改什么")); const m = p.map(d => { let E = ""; return typeof r[d.key] == "boolean" ? E = String(r[d.key]) : E = r[d.key], W.put("/api/option/", { key: d.key, value: E }) }); a(!0), Promise.all(m).then(d => { if (m.length === 1) { if (d.includes(void 0)) return } else if (m.length > 1 && d.includes(void 0)) return b(u("部分保存失败，请重试")); ie(u("保存成功")), n.refresh() }).catch(() => { b(u("保存失败，请重试")) }).finally(() => { a(!1) }) } return i.useEffect(() => { const p = {}; for (let m in n.options) Object.keys(r).includes(m) && (p[m] = n.options[m]); o(p), F(structuredClone(p)), c.current.setValues(p) }, [n.options]), e.jsx(e.Fragment, { children: e.jsx(Me, { spinning: s, children: e.jsx(M, { values: r, getFormApi: p => c.current = p, style: { marginBottom: 15 }, children: e.jsxs(M.Section, { text: u("额度设置"), children: [e.jsxs(Ae, { gutter: 16, children: [e.jsx(fe, { span: 6, children: e.jsx(M.InputNumber, { label: u("新用户初始额度"), field: "QuotaForNewUser", step: 1, min: 0, suffix: "Token", placeholder: "", onChange: p => o({ ...r, QuotaForNewUser: String(p) }) }) }), e.jsx(fe, { span: 6, children: e.jsx(M.InputNumber, { label: u("请求预扣费额度"), field: "PreConsumedQuota", step: 1, min: 0, suffix: "Token", extraText: u("请求结束后多退少补"), placeholder: "", onChange: p => o({ ...r, PreConsumedQuota: String(p) }) }) }), e.jsx(fe, { span: 6, children: e.jsx(M.InputNumber, { label: u("邀请新用户奖励额度"), field: "QuotaForInviter", step: 1, min: 0, suffix: "Token", extraText: "", placeholder: u("例如：2000"), onChange: p => o({ ...r, QuotaForInviter: String(p) }) }) }), e.jsx(fe, { span: 6, children: e.jsx(M.InputNumber, { label: u("新用户使用邀请码奖励额度"), field: "QuotaForInvitee", step: 1, min: 0, suffix: "Token", extraText: "", placeholder: u("例如：1000"), onChange: p => o({ ...r, QuotaForInvitee: String(p) }) }) })] }), e.jsx(Ae, { children: e.jsx($, { size: "default", onClick: g, children: u("保存额度设置") }) })] }) }) }) }) } function cr(n) { const { t: u } = Ce(), [s, a] = i.useState([]), [r, o] = i.useState(!1), [c, h] = i.useState(null), [F, g] = i.useState(""), [p, m] = i.useState(1), [d, E] = i.useState(!1), _ = 10; i.useEffect(() => { try { const N = JSON.parse(n.options.ModelPrice || "{}"), U = JSON.parse(n.options.ModelRatio || "{}"), q = JSON.parse(n.options.CompletionRatio || "{}"), w = new Set([...Object.keys(N), ...Object.keys(U), ...Object.keys(q)]), V = Array.from(w).map(C => ({ name: C, price: N[C] === void 0 ? "" : N[C], ratio: U[C] === void 0 ? "" : U[C], completionRatio: q[C] === void 0 ? "" : q[C] })); a(V) } catch (N) { console.error("JSON解析错误:", N) } }, [n.options]); const I = (N, U, q) => { const w = (U - 1) * q, V = w + q; return N.slice(w, V) }, T = s.filter(N => F ? N.name.toLowerCase().includes(F.toLowerCase()) : !0), H = I(T, p, _), ae = async () => { E(!0); const N = { ModelPrice: {}, ModelRatio: {}, CompletionRatio: {} }; let U = ""; try { s.forEach(C => { U = C.name, C.price !== "" ? N.ModelPrice[C.name] = parseFloat(C.price) : (C.ratio !== "" && (N.ModelRatio[C.name] = parseFloat(C.ratio)), C.completionRatio !== "" && (N.CompletionRatio[C.name] = parseFloat(C.completionRatio))) }); const q = { ModelPrice: JSON.stringify(N.ModelPrice, null, 2), ModelRatio: JSON.stringify(N.ModelRatio, null, 2), CompletionRatio: JSON.stringify(N.CompletionRatio, null, 2) }, w = Object.entries(q).map(([C, P]) => W.put("/api/option/", { key: C, value: P })), V = await Promise.all(w); if (w.length === 1) { if (V.includes(void 0)) return } else if (w.length > 1 && V.includes(void 0)) return b("部分保存失败，请重试"); for (const C of V) if (!C.data.success) return b(C.data.message); ie("保存成功"), n.refresh() } catch (q) { console.error("保存失败:", q), b("保存失败，请重试") } finally { E(!1) } }, Z = [{ title: u("模型名称"), dataIndex: "name", key: "name" }, { title: u("模型固定价格"), dataIndex: "price", key: "price", render: (N, U) => e.jsx(he, { value: N, placeholder: u("按量计费"), onChange: q => O(U.name, "price", q) }) }, { title: u("模型倍率"), dataIndex: "ratio", key: "ratio", render: (N, U) => e.jsx(he, { value: N, placeholder: U.price !== "" ? u("模型倍率") : u("默认补全倍率"), disabled: U.price !== "", onChange: q => O(U.name, "ratio", q) }) }, { title: u("补全倍率"), dataIndex: "completionRatio", key: "completionRatio", render: (N, U) => e.jsx(he, { value: N, placeholder: U.price !== "" ? u("补全倍率") : u("默认补全倍率"), disabled: U.price !== "", onChange: q => O(U.name, "completionRatio", q) }) }, { title: u("操作"), key: "action", render: (N, U) => e.jsx($, { icon: e.jsx(zs, {}), type: "danger", onClick: () => A(U.name) }) }], O = (N, U, q) => { if (isNaN(q)) { b("请输入数字"); return } a(w => w.map(V => V.name === N ? { ...V, [U]: q } : V)) }, A = N => { a(U => U.filter(q => q.name !== N)) }, Y = N => { if (s.some(U => U.name === N.name)) { b("模型名称已存在"); return } a(U => [{ name: N.name, price: N.price || "", ratio: N.ratio || "", completionRatio: N.completionRatio || "" }, ...U]), o(!1), ie("添加成功") }; return e.jsxs(e.Fragment, { children: [e.jsxs(ye, { vertical: !0, align: "start", style: { width: "100%" }, children: [e.jsxs(ye, { children: [e.jsx($, { icon: e.jsx(Ws, {}), onClick: () => o(!0), children: u("添加模型") }), e.jsx($, { type: "primary", icon: e.jsx(qs, {}), onClick: ae, children: u("应用更改") }), e.jsx(he, { prefix: e.jsx(Gs, {}), placeholder: u("搜索模型名称"), value: F, onChange: N => { g(N), m(1) }, style: { width: 200 } })] }), e.jsx(ft, { columns: Z, dataSource: H, pagination: { currentPage: p, pageSize: _, total: T.length, onPageChange: N => m(N), formatPageText: N => u("第 {{start}} - {{end}} 条，共 {{total}} 条", { start: N.currentStart, end: N.currentEnd, total: T.length }), showTotal: !0, showSizeChanger: !1 } })] }), e.jsx(De, { title: u("添加模型"), visible: r, onCancel: () => o(!1), onOk: () => { c && Y(c) }, children: e.jsxs(M, { children: [e.jsx(M.Input, { field: "name", label: u("模型名称"), placeholder: "strawberry", required: !0, onChange: N => h(U => ({ ...U, name: N })) }), e.jsx(M.Switch, { field: "priceMode", label: e.jsxs(e.Fragment, { children: [u("定价模式"), "：", c != null && c.priceMode ? u("固定价格") : u("倍率模式")] }), onChange: N => { h(U => ({ ...U, price: "", ratio: "", completionRatio: "", priceMode: N })) } }), c != null && c.priceMode ? e.jsx(M.Input, { field: "price", label: u("固定价格(每次)"), placeholder: u("输入每次价格"), onChange: N => h(U => ({ ...U, price: N })) }) : e.jsxs(e.Fragment, { children: [e.jsx(M.Input, { field: "ratio", label: u("模型倍率"), placeholder: u("输入模型倍率"), onChange: N => h(U => ({ ...U, ratio: N })) }), e.jsx(M.Input, { field: "completionRatio", label: u("补全倍率"), placeholder: u("输入补全价格"), onChange: N => h(U => ({ ...U, completionRatio: N })) })] })] }) })] }) } function dr(n) { const { t: u } = Ce(), [s, a] = i.useState(!1), [r, o] = i.useState({ GroupRatio: "", UserUsableGroups: "" }), c = i.useRef(), [h, F] = i.useState(r); async function g() { try { await c.current.validate().then(() => { const p = ct(r, h); if (!p.length) return ot(u("你似乎并没有修改什么")); const m = p.map(d => { const E = typeof r[d.key] == "boolean" ? String(r[d.key]) : r[d.key]; return W.put("/api/option/", { key: d.key, value: E }) }); a(!0), Promise.all(m).then(d => { if (d.includes(void 0)) return b(m.length > 1 ? u("部分保存失败，请重试") : u("保存失败")); for (let E = 0; E < d.length; E++)if (!d[E].data.success) return b(d[E].data.message); ie(u("保存成功")), n.refresh() }).catch(d => { console.error("Unexpected error:", d), b(u("保存失败，请重试")) }).finally(() => { a(!1) }) }).catch(() => { b(u("请检查输入")) }) } catch (p) { b(u("请检查输入")), console.error(p) } } return i.useEffect(() => { const p = {}; for (let m in n.options) Object.keys(r).includes(m) && (p[m] = n.options[m]); o(p), F(structuredClone(p)), c.current.setValues(p) }, [n.options]), e.jsxs(Me, { spinning: s, children: [e.jsx(M, { values: r, getFormApi: p => c.current = p, style: { marginBottom: 15 }, children: e.jsxs(M.Section, { text: u("分组设置"), children: [e.jsx(Ae, { gutter: 16, children: e.jsx(fe, { span: 16, children: e.jsx(M.TextArea, { label: u("分组倍率"), placeholder: u("为一个 JSON 文本，键为分组名称，值为倍率"), field: "GroupRatio", autosize: { minRows: 6, maxRows: 12 }, trigger: "blur", stopValidateWithError: !0, rules: [{ validator: (p, m) => gt(m), message: u("不是合法的 JSON 字符串") }], onChange: p => o({ ...r, GroupRatio: p }) }) }) }), e.jsx(Ae, { gutter: 16, children: e.jsx(fe, { span: 16, children: e.jsx(M.TextArea, { label: u("用户可选分组"), placeholder: u("为一个 JSON 文本，键为分组名称，值为分组描述"), field: "UserUsableGroups", autosize: { minRows: 6, maxRows: 12 }, trigger: "blur", stopValidateWithError: !0, rules: [{ validator: (p, m) => gt(m), message: u("不是合法的 JSON 字符串") }], onChange: p => o({ ...r, UserUsableGroups: p }) }) }) })] }) }), e.jsx($, { onClick: g, children: u("保存分组倍率设置") })] }) } function hr(n) { const [u, s] = i.useState(!1), [a, r] = i.useState({ ModelPrice: "", ModelRatio: "", CompletionRatio: "" }), o = i.useRef(), [c, h] = i.useState(a), { t: F } = Ce(); async function g() { try { await o.current.validate().then(() => { const m = ct(a, c); if (!m.length) return ot(F("你似乎并没有修改什么")); const d = m.map(E => { const _ = typeof a[E.key] == "boolean" ? String(a[E.key]) : a[E.key]; return W.put("/api/option/", { key: E.key, value: _ }) }); s(!0), Promise.all(d).then(E => { if (E.includes(void 0)) return b(d.length > 1 ? F("部分保存失败，请重试") : F("保存失败")); for (let _ = 0; _ < E.length; _++)if (!E[_].data.success) return b(E[_].data.message); ie(F("保存成功")), n.refresh() }).catch(E => { console.error("Unexpected error:", E), b(F("保存失败，请重试")) }).finally(() => { s(!1) }) }).catch(() => { b(F("请检查输入")) }) } catch (m) { b(F("请检查输入")), console.error(m) } } async function p() { try { let m = await W.post("/api/option/rest_model_ratio"); m.data.success ? (ie(m.data.message), n.refresh()) : b(m.data.message) } catch (m) { b(m) } } return i.useEffect(() => { const m = {}; for (let d in n.options) Object.keys(a).includes(d) && (m[d] = n.options[d]); r(m), h(structuredClone(m)), o.current.setValues(m) }, [n.options]), e.jsxs(Me, { spinning: u, children: [e.jsx(M, { values: a, getFormApi: m => o.current = m, style: { marginBottom: 15 }, children: e.jsxs(M.Section, { children: [e.jsx(Ae, { gutter: 16, children: e.jsx(fe, { span: 16, children: e.jsx(M.TextArea, { label: F("模型固定价格"), extraText: F("一次调用消耗多少刀，优先级大于模型倍率"), placeholder: F('为一个 JSON 文本，键为模型名称，值为一次调用消耗多少刀，比如 "gpt-4-gizmo-*": 0.1，一次消耗0.1刀'), field: "ModelPrice", autosize: { minRows: 6, maxRows: 12 }, trigger: "blur", stopValidateWithError: !0, rules: [{ validator: (m, d) => gt(d), message: "不是合法的 JSON 字符串" }], onChange: m => r({ ...a, ModelPrice: m }) }) }) }), e.jsx(Ae, { gutter: 16, children: e.jsx(fe, { span: 16, children: e.jsx(M.TextArea, { label: F("模型倍率"), placeholder: F("为一个 JSON 文本，键为模型名称，值为倍率"), field: "ModelRatio", autosize: { minRows: 6, maxRows: 12 }, trigger: "blur", stopValidateWithError: !0, rules: [{ validator: (m, d) => gt(d), message: "不是合法的 JSON 字符串" }], onChange: m => r({ ...a, ModelRatio: m }) }) }) }), e.jsx(Ae, { gutter: 16, children: e.jsx(fe, { span: 16, children: e.jsx(M.TextArea, { label: F("模型补全倍率（仅对自定义模型有效）"), extraText: F("仅对自定义模型有效"), placeholder: F("为一个 JSON 文本，键为模型名称，值为倍率"), field: "CompletionRatio", autosize: { minRows: 6, maxRows: 12 }, trigger: "blur", stopValidateWithError: !0, rules: [{ validator: (m, d) => gt(d), message: "不是合法的 JSON 字符串" }], onChange: m => r({ ...a, CompletionRatio: m }) }) }) })] }) }), e.jsxs(ye, { children: [e.jsx($, { onClick: g, children: F("保存模型倍率设置") }), e.jsx(Ye, { title: F("确定重置模型倍率吗？"), content: F("此修改将不可逆"), okType: "danger", position: "top", onConfirm: p, children: e.jsx($, { type: "danger", children: F("重置模型倍率") }) })] })] }) } function pr(n) { const { t: u } = Ce(), [s, a] = i.useState(!1), [r, o] = i.useState({ Chats: "[]" }), c = i.useRef(), [h, F] = i.useState(r); async function g() { try { console.log("Starting validation..."), await c.current.validate().then(() => { console.log("Validation passed"); const p = ct(r, h); if (!p.length) return ot(u("你似乎并没有修改什么")); const m = p.map(d => { let E = ""; return typeof r[d.key] == "boolean" ? E = String(r[d.key]) : E = r[d.key], W.put("/api/option/", { key: d.key, value: E }) }); a(!0), Promise.all(m).then(d => { if (m.length === 1) { if (d.includes(void 0)) return } else if (m.length > 1 && d.includes(void 0)) return b(u("部分保存失败，请重试")); ie(u("保存成功")), n.refresh() }).catch(() => { b(u("保存失败，请重试")) }).finally(() => { a(!1) }) }).catch(p => { console.error("Validation failed:", p), b(u("请检查输入")) }) } catch (p) { b(u("请检查输入")), console.error(p) } } return i.useEffect(() => { const p = {}; for (let m in n.options) if (Object.keys(r).includes(m)) if (m === "Chats") { const d = JSON.parse(n.options[m]); p[m] = JSON.stringify(d, null, 2) } else p[m] = n.options[m]; o(p), F(structuredClone(p)), c.current.setValues(p) }, [n.options]), e.jsxs(Me, { spinning: s, children: [e.jsx(M, { values: r, getFormApi: p => c.current = p, style: { marginBottom: 15 }, children: e.jsxs(M.Section, { text: u("令牌聊天设置"), children: [e.jsx(Ge, { type: "warning", description: u("必须将上方聊天链接全部设置为空，才能使用下方聊天设置功能") }), e.jsx(Ge, { type: "info", description: u("链接中的{key}将自动替换为sk-xxxx，{address}将自动替换为系统设置的服务器地址，末尾不带/和/v1") }), e.jsx(M.TextArea, { label: u("聊天配置"), extraText: "", placeholder: u("为一个 JSON 文本"), field: "Chats", autosize: { minRows: 6, maxRows: 12 }, trigger: "blur", stopValidateWithError: !0, rules: [{ validator: (p, m) => gt(m), message: u("不是合法的 JSON 字符串") }], onChange: p => o({ ...r, Chats: p }) })] }) }), e.jsx(ye, { children: e.jsx($, { onClick: g, children: u("保存聊天设置") }) })] }) } const mr = () => { const { t: n } = Ce(); let [u, s] = i.useState({ QuotaForNewUser: 0, QuotaForInviter: 0, QuotaForInvitee: 0, QuotaRemindThreshold: 0, PreConsumedQuota: 0, StreamCacheQueueLength: 0, ModelRatio: "", CompletionRatio: "", ModelPrice: "", GroupRatio: "", UserUsableGroups: "", TopUpLink: "", ChatLink: "", ChatLink2: "", QuotaPerUnit: 0, AutomaticDisableChannelEnabled: !1, AutomaticEnableChannelEnabled: !1, ChannelDisableThreshold: 0, LogConsumeEnabled: !1, DisplayInCurrencyEnabled: !1, DisplayTokenStatEnabled: !1, CheckSensitiveEnabled: !1, CheckSensitiveOnPromptEnabled: !1, CheckSensitiveOnCompletionEnabled: "", StopOnSensitiveEnabled: "", SensitiveWords: "", MjNotifyEnabled: !1, MjAccountFilterEnabled: !1, MjModeClearEnabled: !1, MjForwardUrlEnabled: !1, MjActionCheckSuccessEnabled: !1, DrawingEnabled: !1, DataExportEnabled: !1, DataExportDefaultTime: "hour", DataExportInterval: 5, DefaultCollapseSidebar: !1, RetryTimes: 0, Chats: "[]" }), [a, r] = i.useState(!1); const o = async () => { const h = await W.get("/api/option/"), { success: F, message: g, data: p } = h.data; if (F) { let m = {}; p.forEach(d => { (d.key === "ModelRatio" || d.key === "GroupRatio" || d.key === "UserUsableGroups" || d.key === "CompletionRatio" || d.key === "ModelPrice") && (d.value = JSON.stringify(JSON.parse(d.value), null, 2)), d.key.endsWith("Enabled") || ["DefaultCollapseSidebar"].includes(d.key) ? m[d.key] = d.value === "true" : m[d.key] = d.value }), s(m) } else b(g) }; async function c() { try { r(!0), await o() } catch { b("刷新失败") } finally { r(!1) } } return i.useEffect(() => { c() }, []), e.jsx(e.Fragment, { children: e.jsxs(Me, { spinning: a, size: "large", children: [e.jsx(Re, { style: { marginTop: "10px" }, children: e.jsx(tr, { options: u, refresh: c }) }), e.jsx(Re, { style: { marginTop: "10px" }, children: e.jsx(nr, { options: u, refresh: c }) }), e.jsx(Re, { style: { marginTop: "10px" }, children: e.jsx(ur, { options: u, refresh: c }) }), e.jsx(Re, { style: { marginTop: "10px" }, children: e.jsx(rr, { options: u, refresh: c }) }), e.jsx(Re, { style: { marginTop: "10px" }, children: e.jsx(ir, { options: u, refresh: c }) }), e.jsx(Re, { style: { marginTop: "10px" }, children: e.jsx(or, { options: u, refresh: c }) }), e.jsx(Re, { style: { marginTop: "10px" }, children: e.jsx(lr, { options: u, refresh: c }) }), e.jsx(Re, { style: { marginTop: "10px" }, children: e.jsx(pr, { options: u, refresh: c }) }), e.jsx(Re, { style: { marginTop: "10px" }, children: e.jsx(dr, { options: u, refresh: c }) }), e.jsx(Re, { style: { marginTop: "10px" }, children: e.jsxs(gn, { type: "line", children: [e.jsx(gn.TabPane, { tab: n("模型倍率设置"), itemKey: "model", children: e.jsx(hr, { options: u, refresh: c }) }), e.jsx(gn.TabPane, { tab: n("可视化倍率设置"), itemKey: "visual", children: e.jsx(cr, { options: u, refresh: c }) })] }) })] }) }) }, gr = () => { const { t: n } = Ce(), u = it(), s = pa(), [a, r] = i.useState("1"); let o = [{ tab: n("个人设置"), content: e.jsx(er, {}), itemKey: "personal" }]; ls() && (o.push({ tab: n("运营设置"), content: e.jsx(mr, {}), itemKey: "operation" }), o.push({ tab: n("系统设置"), content: e.jsx(Za, {}), itemKey: "system" }), o.push({ tab: n("其他设置"), content: e.jsx(Xa, {}), itemKey: "other" })); const c = h => { r(h), u(`?tab=${h}`) }; return i.useEffect(() => { const F = new URLSearchParams(window.location.search).get("tab"); F ? r(F) : c("personal") }, [s.search]), e.jsx("div", { children: e.jsx(Fe, { children: e.jsx(Fe.Content, { children: e.jsx(gn, { type: "line", activeKey: a, onChange: h => c(h), children: o.map(h => e.jsx(Ks, { itemKey: h.itemKey, tab: h.tab, children: a === h.itemKey && h.content }, h.itemKey)) }) }) }) }) }, fr = () => { const [n, u] = i.useState({ email: "" }), { email: s } = n, [a, r] = i.useState(!1), [o, c] = i.useState(!1), [h, F] = i.useState(""), [g, p] = i.useState(""), [m, d] = i.useState(!1), [E, _] = i.useState(30); i.useEffect(() => { let H = null; return m && E > 0 ? H = setInterval(() => { _(E - 1) }, 1e3) : E === 0 && (d(!1), _(30)), () => clearInterval(H) }, [m, E]); function I(H) { const { name: ae, value: Z } = H.target; u(O => ({ ...O, [ae]: Z })) } async function T(H) { if (d(!0), !s) return; if (o && g === "") { Te("请稍后几秒重试，Turnstile 正在检查用户环境！"); return } r(!0); const ae = await W.get(`/api/reset_password?email=${s}&turnstile=${g}`), { success: Z, message: O } = ae.data; Z ? (ie("重置邮件发送成功，请检查邮箱！"), u({ ...n, email: "" })) : b(O), r(!1) } return e.jsx(Wt, { textAlign: "center", style: { marginTop: "48px" }, children: e.jsxs(Wt.Column, { style: { maxWidth: 450 }, children: [e.jsxs(Le, { as: "h2", color: "", textAlign: "center", children: [e.jsx(os, { src: "/logo.png" }), " 密码重置"] }), e.jsx(re, { size: "large", children: e.jsxs(Jn, { children: [e.jsx(re.Input, { fluid: !0, icon: "mail", iconPosition: "left", placeholder: "邮箱地址", name: "email", value: s, onChange: I }), o ? e.jsx(Lt, { sitekey: h, onVerify: H => { p(H) } }) : e.jsx(e.Fragment, {}), e.jsx(Rt, { color: "green", fluid: !0, size: "large", onClick: T, loading: a, disabled: m, children: m ? `重试 (${E})` : "提交" })] }) })] }) }) }, Fr = () => { const [n, u] = i.useState({ email: "", token: "" }), { email: s, token: a } = n, [r, o] = i.useState(!1), [c, h] = i.useState(!1), [F, g] = i.useState(30), [p, m] = i.useState(""), [d, E] = Sn(); i.useEffect(() => { let I = d.get("token"), T = d.get("email"); u({ token: I, email: T }) }, []), i.useEffect(() => { let I = null; return c && F > 0 ? I = setInterval(() => { g(F - 1) }, 1e3) : F === 0 && (h(!1), g(30)), () => clearInterval(I) }, [c, F]); async function _(I) { if (h(!0), !s) return; o(!0); const T = await W.post("/api/user/reset", { email: s, token: a }), { success: H, message: ae } = T.data; if (H) { let Z = T.data.data; m(Z), await nt(Z), fu(`新密码已复制到剪贴板：${Z}`) } else b(ae); o(!1) } return e.jsx(Wt, { textAlign: "center", style: { marginTop: "48px" }, children: e.jsxs(Wt.Column, { style: { maxWidth: 450 }, children: [e.jsxs(Le, { as: "h2", color: "", textAlign: "center", children: [e.jsx(os, { src: "/logo.png" }), " 密码重置确认"] }), e.jsx(re, { size: "large", children: e.jsxs(Jn, { children: [e.jsx(re.Input, { fluid: !0, icon: "mail", iconPosition: "left", placeholder: "邮箱地址", name: "email", value: s, readOnly: !0 }), p && e.jsx(re.Input, { fluid: !0, icon: "lock", iconPosition: "left", placeholder: "新密码", name: "newPassword", value: p, readOnly: !0, onClick: I => { I.target.select(), navigator.clipboard.writeText(p), fu(`密码已复制到剪贴板：${p}`) } }), e.jsx(Rt, { color: "green", fluid: !0, size: "large", onClick: _, loading: r, disabled: c, children: c ? "密码重置完成" : "提交" })] }) })] }) }) }, yu = { "gpt-3.5-turbo": "gpt-3.5-turbo-0125" }, Cu = { 400: "500" }, xr = { default: "us-central1", "claude-3-5-sonnet-20240620": "europe-west1" }; function yr(n) { switch (n) { case 15: return "按照如下格式输入：APIKey|SecretKey"; case 18: return "按照如下格式输入：APPID|APISecret|APIKey"; case 22: return "按照如下格式输入：APIKey-AppId，例如：fastgpt-0sp2gtvfdgyi4k30jwlgwf1i-64f335d84283f05518e9e041"; case 23: return "按照如下格式输入：AppId|SecretId|SecretKey"; case 33: return "按照如下格式输入：Ak|Sk|Region"; default: return "请输入渠道对应的鉴权密钥" } } const Kn = n => {
  const { t: u } = Ce(); it(); const s = n.editingChannel.id, a = s !== void 0, [r, o] = i.useState(a), c = () => { n.handleClose() }, h = { name: "", type: 1, key: "", openai_organization: "", max_input_tokens: 0, base_url: "", other: "", model_mapping: "", status_code_mapping: "", models: [], auto_ban: 1, test_model: "", groups: ["default"], priority: 0, weight: 0, tag: "" }, [F, g] = i.useState(!1), [p, m] = i.useState(!0), [d, E] = i.useState(h), [_, I] = i.useState([]), [T, H] = i.useState([]), [ae, Z] = i.useState([]), [O, A] = i.useState([]), [Y, N] = i.useState([]), [U, q] = i.useState(""), w = (l, f) => { if (E(y => ({ ...y, [l]: f })), l === "type") { let y = []; switch (f) { case 2: y = ["mj_imagine", "mj_variation", "mj_reroll", "mj_blend", "mj_upscale", "mj_describe", "mj_uploads"]; break; case 5: y = ["swap_face", "mj_imagine", "mj_variation", "mj_reroll", "mj_blend", "mj_upscale", "mj_describe", "mj_zoom", "mj_shorten", "mj_modal", "mj_inpaint", "mj_custom_zoom", "mj_high_variation", "mj_low_variation", "mj_pan", "mj_uploads"]; break; case 36: y = ["suno_music", "suno_lyrics"]; break; default: y = xn(f); break }d.models.length === 0 && E(x => ({ ...x, models: y })), A(y) } }, V = async () => { o(!0); let l = await W.get(`/api/channel/${s}`); if (l === void 0) return; const { success: f, message: y, data: x } = l.data; f ? (x.models === "" ? x.models = [] : x.models = x.models.split(","), x.group === "" ? x.groups = [] : x.groups = x.group.split(","), x.model_mapping !== "" && (x.model_mapping = JSON.stringify(JSON.parse(x.model_mapping), null, 2)), E(x), x.auto_ban === 0 ? m(!1) : m(!0), A(xn(x.type))) : b(y), o(!1) }, C = async l => { var x; o(!0); const f = d.models || []; let y = !1; if (a) { const S = await W.get("/api/channel/fetch_models/" + s); S.data && ((x = S.data) != null && x.success) ? f.push(...S.data.data) : y = !0 } else if (!(d != null && d.key)) b(u("请填写密钥")), y = !0; else try { const S = await W.post("/api/channel/fetch_models", { base_url: d.base_url, key: d.key }); S.data && S.data.success ? f.push(...S.data.data) : y = !0 } catch (S) { console.error("Error fetching models:", S), y = !0 } y ? b(u("获取模型列表失败")) : (w(l, Array.from(new Set(f))), ie(u("获取模型列表成功"))), o(!1) }, P = async () => { try { let l = await W.get("/api/channel/models"), f = l.data.data.map(y => ({ label: y.id, value: y.id })); I(f), N(l.data.data.map(y => y.id)), A(l.data.data.filter(y => y.id.startsWith("gpt-") || y.id.startsWith("text-")).map(y => y.id)) } catch (l) { b(l.message) } }, j = async () => { try { let l = await W.get("/api/group/"); if (l === void 0) return; Z(l.data.data.map(f => ({ label: f, value: f }))) } catch (l) { b(l.message) } }; i.useEffect(() => { let l = [..._]; d.models.forEach(f => { l.find(y => y.label === f) || l.push({ label: f, value: f }) }), H(l) }, [_, d.models]), i.useEffect(() => { if (P().then(), j().then(), a) V().then(() => { }); else { E(h); let l = xn(d.type); A(l), E(f => ({ ...f, models: l })) } }, [n.editingChannel.id]); const R = async () => { if (!a && (d.name === "" || d.key === "")) { Te(u("请填写渠道名称和渠道密钥！")); return } if (d.models.length === 0) { Te(u("请至少选择一个模型！")); return } if (d.model_mapping !== "" && !gt(d.model_mapping)) { Te(u("模型映射必须是合法的 JSON 格式！")); return } let l = { ...d }; l.base_url && l.base_url.endsWith("/") && (l.base_url = l.base_url.slice(0, l.base_url.length - 1)), l.type === 3 && l.other === "" && (l.other = "2023-06-01-preview"), l.type === 18 && l.other === "" && (l.other = "v2.1"); let f; if (!Array.isArray(l.models)) { b(u("提交失败，请勿重复提交！")), c(); return } l.auto_ban = p ? 1 : 0, l.models = l.models.join(","), l.group = l.groups.join(","), a ? f = await W.put("/api/channel/", { ...l, id: parseInt(s) }) : f = await W.post("/api/channel/", l); const { success: y, message: x } = f.data; y ? (a ? ie(u("渠道更新成功！")) : (ie(u("渠道创建成功！")), E(h)), n.refresh(), n.handleClose()) : b(x) }, v = () => { if (U.trim() === "") return; const l = U.split(",").map(S => S.trim()); let f = [...d.models], y = [...T], x = !1; l.forEach(S => { S && !f.includes(S) ? (f.push(S), y.push({ key: S, text: S, value: S })) : S && (b(u("某些模型已存在！")), x = !0) }), !x && (H(y), q(""), w("models", f)) }; return e.jsx(e.Fragment, {
    children: e.jsx(qt, {
      maskClosable: !1, placement: a ? "right" : "left", title: e.jsx(jt, { level: 3, children: u(a ? "更新渠道信息" : "创建新的渠道") }), headerStyle: { borderBottom: "1px solid var(--semi-color-border)" }, bodyStyle: { borderBottom: "1px solid var(--semi-color-border)" }, visible: n.visible, footer: e.jsx("div", { style: { display: "flex", justifyContent: "flex-end" }, children: e.jsxs(ye, { children: [e.jsx($, { theme: "solid", size: "large", onClick: R, children: u("提交") }), e.jsx($, { theme: "solid", size: "large", type: "tertiary", onClick: c, children: u("取消") })] }) }), closeIcon: null, onCancel: () => c(), width: ut() ? "100%" : 600, children: e.jsxs(Me, {
        spinning: r, children: [e.jsx("div", { style: { marginTop: 10 }, children: e.jsxs(ne.Text, { strong: !0, children: [u("类型"), "："] }) }), e.jsx(Ue, { name: "type", required: !0, optionList: Fn, value: d.type, onChange: l => w("type", l), style: { width: "50%" } }), d.type === 3 && e.jsxs(e.Fragment, { children: [e.jsx("div", { style: { marginTop: 10 }, children: e.jsx(Ge, { type: "warning", description: u("注意，模型部署名称必须和模型名称保持一致，因为 One API 会把请求体中的 model 参数替换为你的部署名称（模型名称中的点会被剔除）") }) }), e.jsx("div", { style: { marginTop: 10 }, children: e.jsx(ne.Text, { strong: !0, children: "AZURE_OPENAI_ENDPOINT：" }) }), e.jsx(he, { label: "AZURE_OPENAI_ENDPOINT", name: "azure_base_url", placeholder: u("请输入 AZURE_OPENAI_ENDPOINT，例如：https://docs-test-001.openai.azure.com"), onChange: l => { w("base_url", l) }, value: d.base_url, autoComplete: "new-password" }), e.jsx("div", { style: { marginTop: 10 }, children: e.jsxs(ne.Text, { strong: !0, children: [u("默认 API 版本"), "："] }) }), e.jsx(he, { label: u("默认 API 版本"), name: "azure_other", placeholder: u("请输入默认 API 版本，例如：2023-06-01-preview，该配置可以被实际的请求查询参数所覆盖"), onChange: l => { w("other", l) }, value: d.other, autoComplete: "new-password" })] }), d.type === 8 && e.jsxs(e.Fragment, { children: [e.jsx("div", { style: { marginTop: 10 }, children: e.jsx(Ge, { type: "warning", description: u("如果你对接的是上游One API或者New API等转发项目，请使用OpenAI类型，不要使用此类型，除非你知道你在做什么。") }) }), e.jsx("div", { style: { marginTop: 10 }, children: e.jsxs(ne.Text, { strong: !0, children: [u("完整的 Base URL，支持变量{model}"), "："] }) }), e.jsx(he, { name: "base_url", placeholder: u("请输入完整的URL，例如：https://api.openai.com/v1/chat/completions"), onChange: l => { w("base_url", l) }, value: d.base_url, autoComplete: "new-password" })] }), d.type !== 3 && d.type !== 8 && d.type !== 22 && d.type !== 36 && e.jsxs(e.Fragment, { children: [e.jsx("div", { style: { marginTop: 10 }, children: e.jsxs(ne.Text, { strong: !0, children: [u("代理"), "："] }) }), e.jsx(he, { label: u("代理"), name: "base_url", placeholder: u("此项可选，用于通过代理站来进行 API 调用"), onChange: l => { w("base_url", l) }, value: d.base_url, autoComplete: "new-password" })] }), d.type === 22 && e.jsxs(e.Fragment, { children: [e.jsx("div", { style: { marginTop: 10 }, children: e.jsxs(ne.Text, { strong: !0, children: [u("私有部署地址"), "："] }) }), e.jsx(he, { name: "base_url", placeholder: u("请输入私有部署地址，格式为：https://fastgpt.run/api/openapi"), onChange: l => { w("base_url", l) }, value: d.base_url, autoComplete: "new-password" })] }), d.type === 36 && e.jsxs(e.Fragment, { children: [e.jsx("div", { style: { marginTop: 10 }, children: e.jsx(ne.Text, { strong: !0, children: u("注意非Chat API，请务必填写正确的API地址，否则可能导致无法使用") }) }), e.jsx(he, { name: "base_url", placeholder: u("请输入到 /suno 前的路径，通常就是域名，例如：https://api.example.com"), onChange: l => { w("base_url", l) }, value: d.base_url, autoComplete: "new-password" })] }), e.jsx("div", { style: { marginTop: 10 }, children: e.jsxs(ne.Text, { strong: !0, children: [u("名称"), "："] }) }), e.jsx(he, { required: !0, name: "name", placeholder: u("请为渠道命名"), onChange: l => { w("name", l) }, value: d.name, autoComplete: "new-password" }), e.jsx("div", { style: { marginTop: 10 }, children: e.jsxs(ne.Text, { strong: !0, children: [u("分组"), "："] }) }), e.jsx(Ue, { placeholder: u("请选择可以使用该渠道的分组"), name: "groups", required: !0, multiple: !0, selection: !0, allowAdditions: !0, additionLabel: u("请在系统设置页面编辑分组倍率以添加新的分组："), onChange: l => { w("groups", l) }, value: d.groups, autoComplete: "new-password", optionList: ae }), d.type === 18 && e.jsxs(e.Fragment, { children: [e.jsx("div", { style: { marginTop: 10 }, children: e.jsx(ne.Text, { strong: !0, children: "模型版本：" }) }), e.jsx(he, { name: "other", placeholder: "请输入星火大模型版本，注意是接口地址中的版本号，例如：v2.1", onChange: l => { w("other", l) }, value: d.other, autoComplete: "new-password" })] }), d.type === 41 && e.jsxs(e.Fragment, {
          children: [e.jsx("div", { style: { marginTop: 10 }, children: e.jsxs(ne.Text, { strong: !0, children: [u("部署地区"), "："] }) }), e.jsx(pt, {
            name: "other", placeholder: u(`请输入部署地区，例如：us-central1
支持使用模型映射格式
{
    "default": "us-central1",
    "claude-3-5-sonnet-20240620": "europe-west1"
}`), autosize: { minRows: 2 }, onChange: l => { w("other", l) }, value: d.other, autoComplete: "new-password"
          }), e.jsx(ne.Text, { style: { color: "rgba(var(--semi-blue-5), 1)", userSelect: "none", cursor: "pointer" }, onClick: () => { w("other", JSON.stringify(xr, null, 2)) }, children: u("填入模板") })]
        }), d.type === 21 && e.jsxs(e.Fragment, { children: [e.jsx("div", { style: { marginTop: 10 }, children: e.jsx(ne.Text, { strong: !0, children: "��识库 ID：" }) }), e.jsx(he, { label: "知识库 ID", name: "other", placeholder: "请输入知识库 ID，例如：123456", onChange: l => { w("other", l) }, value: d.other, autoComplete: "new-password" })] }), d.type === 39 && e.jsxs(e.Fragment, { children: [e.jsx("div", { style: { marginTop: 10 }, children: e.jsx(ne.Text, { strong: !0, children: "Account ID：" }) }), e.jsx(he, { name: "other", placeholder: "请输入Account ID，例如：d6b5da8hk1awo8nap34ube6gh", onChange: l => { w("other", l) }, value: d.other, autoComplete: "new-password" })] }), e.jsx("div", { style: { marginTop: 10 }, children: e.jsxs(ne.Text, { strong: !0, children: [u("模型"), "："] }) }), e.jsx(Ue, { placeholder: "请选择该渠道所支持的模型", name: "models", required: !0, multiple: !0, selection: !0, filter: !0, searchPosition: "dropdown", onChange: l => { w("models", l) }, value: d.models, autoComplete: "new-password", optionList: T }), e.jsxs("div", { style: { lineHeight: "40px", marginBottom: "12px" }, children: [e.jsxs(ye, { children: [e.jsx($, { type: "primary", onClick: () => { w("models", O) }, children: u("填入相关模型") }), e.jsx($, { type: "secondary", onClick: () => { w("models", Y) }, children: u("填入所有模型") }), e.jsx(tt, { content: u("新建渠道时，请求通过当前浏览器发出；编辑已有渠道，请求通过后端服务器发出"), children: e.jsx($, { type: "tertiary", onClick: () => { C("models") }, children: u("获取模型列表") }) }), e.jsx($, { type: "warning", onClick: () => { w("models", []) }, children: u("清除所有模型") })] }), e.jsx(he, { addonAfter: e.jsx($, { type: "primary", onClick: v, children: u("填入") }), placeholder: u("输入自定义模型名称"), value: U, onChange: l => { q(l.trim()) } })] }), e.jsx("div", { style: { marginTop: 10 }, children: e.jsxs(ne.Text, { strong: !0, children: [u("模型重定向"), "："] }) }), e.jsx(pt, {
          placeholder: u("此项可选，用于修改请求体中的模型名称，为一个 JSON 字符串，键为请求中模型名称，值为要替换的模型名称，例如：") + `
${JSON.stringify(yu, null, 2)}`, name: "model_mapping", onChange: l => { w("model_mapping", l) }, autosize: !0, value: d.model_mapping, autoComplete: "new-password"
        }), e.jsx(ne.Text, { style: { color: "rgba(var(--semi-blue-5), 1)", userSelect: "none", cursor: "pointer" }, onClick: () => { w("model_mapping", JSON.stringify(yu, null, 2)) }, children: u("填入模板") }), e.jsx("div", { style: { marginTop: 10 }, children: e.jsxs(ne.Text, { strong: !0, children: [u("密钥"), "："] }) }), F ? e.jsx(pt, { label: u("密钥"), name: "key", required: !0, placeholder: u("请输入密钥，一行一个"), onChange: l => { w("key", l) }, value: d.key, style: { minHeight: 150, fontFamily: "JetBrains Mono, Consolas" }, autoComplete: "new-password" }) : e.jsx(e.Fragment, {
          children: d.type === 41 ? e.jsx(pt, {
            label: u("鉴权json"), name: "key", required: !0, placeholder: `{
  "type": "service_account",
  "project_id": "abc-bcd-123-456",
  "private_key_id": "123xxxxx456",
  "private_key": "-----BEGIN PRIVATE KEY-----xxxx
  "client_email": "xxx@developer.gserviceaccount.com",
  "client_id": "111222333",
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "https://xxxxx.gserviceaccount.com",
  "universe_domain": "googleapis.com"
}`, onChange: l => { w("key", l) }, autosize: { minRows: 10 }, value: d.key, autoComplete: "new-password"
          }) : e.jsx(he, { label: u("密钥"), name: "key", required: !0, placeholder: u(yr(d.type)), onChange: l => { w("key", l) }, value: d.key, autoComplete: "new-password" })
        }), !a && e.jsx("div", { style: { marginTop: 10, display: "flex" }, children: e.jsxs(ye, { children: [e.jsx(zn, { checked: F, label: u("批量创建"), name: "batch", onChange: () => g(!F) }), e.jsx(ne.Text, { strong: !0, children: u("批量创建") })] }) }), d.type === 1 && e.jsxs(e.Fragment, { children: [e.jsx("div", { style: { marginTop: 10 }, children: e.jsxs(ne.Text, { strong: !0, children: [u("组织"), "："] }) }), e.jsx(he, { label: u("组织，可选，不填则为默认组织"), name: "openai_organization", placeholder: u("请输入组织org-xxx"), onChange: l => { w("openai_organization", l) }, value: d.openai_organization })] }), e.jsx("div", { style: { marginTop: 10 }, children: e.jsxs(ne.Text, { strong: !0, children: [u("默认测试模型"), "："] }) }), e.jsx(he, { name: "test_model", placeholder: u("不填则为模型列表第一个"), onChange: l => { w("test_model", l) }, value: d.test_model }), e.jsx("div", { style: { marginTop: 10, display: "flex" }, children: e.jsxs(ye, { children: [e.jsx(zn, { name: "auto_ban", checked: p, onChange: () => { m(!p) } }), e.jsx(ne.Text, { strong: !0, children: u("是否自动禁用（仅当自动禁用开启时有效），关闭后不会自动禁用该渠道：") })] }) }), e.jsx("div", { style: { marginTop: 10 }, children: e.jsxs(ne.Text, { strong: !0, children: [u("状态码复写（仅影响本地判断，不修改返回到上游的状态码）"), "："] }) }), e.jsx(pt, {
          placeholder: u("此项可选，用于复写返回的状态码，比如将claude渠道的400错误复写为500（用于重试），请勿滥用该功能，例如：") + `
`+ JSON.stringify(Cu, null, 2), name: "status_code_mapping", onChange: l => { w("status_code_mapping", l) }, autosize: !0, value: d.status_code_mapping, autoComplete: "new-password"
        }), e.jsx(ne.Text, { style: { color: "rgba(var(--semi-blue-5), 1)", userSelect: "none", cursor: "pointer" }, onClick: () => { w("status_code_mapping", JSON.stringify(Cu, null, 2)) }, children: u("填入模板") }), e.jsx("div", { style: { marginTop: 10 }, children: e.jsx(ne.Text, { strong: !0, children: u("渠道标签") }) }), e.jsx(he, { label: u("渠道标签"), name: "tag", placeholder: u("渠道标签"), onChange: l => { w("tag", l) }, value: d.tag, autoComplete: "new-password" }), e.jsx("div", { style: { marginTop: 10 }, children: e.jsx(ne.Text, { strong: !0, children: u("渠道优先级") }) }), e.jsx(he, { label: u("渠道优先级"), name: "priority", placeholder: u("渠道优先级"), onChange: l => { const f = parseInt(l); isNaN(f) ? w("priority", l) : w("priority", f) }, value: d.priority, autoComplete: "new-password" }), e.jsx("div", { style: { marginTop: 10 }, children: e.jsx(ne.Text, { strong: !0, children: u("渠道权重") }) }), e.jsx(he, { label: u("渠道权重"), name: "weight", placeholder: u("渠道权重"), onChange: l => { const f = parseInt(l); isNaN(f) ? w("weight", l) : w("weight", f) }, value: d.weight, autoComplete: "new-password" }), d.type === 8 && e.jsxs(e.Fragment, {
          children: [e.jsx("div", { style: { marginTop: 10 }, children: e.jsxs(ne.Text, { strong: !0, children: [u("渠道额外设置"), "："] }) }), e.jsx(pt, {
            placeholder: u("此项可选，用于配置渠道特定设置，为一个 JSON 字符串，例如：") + `
{
  "force_format": true
}`, name: "setting", onChange: l => { w("setting", l) }, autosize: !0, value: d.setting, autoComplete: "new-password"
          }), e.jsx(ne.Text, { style: { color: "rgba(var(--semi-blue-5), 1)", userSelect: "none", cursor: "pointer" }, onClick: () => { w("setting", JSON.stringify({ force_format: !0 }, null, 2)) }, children: u("填入模板") })]
        })]
      })
    })
  })
}, Cr = ({ label: n, name: u, value: s, onChange: a, placeholder: r, type: o = "text" }) => e.jsxs(e.Fragment, { children: [e.jsx("div", { style: { marginTop: 10 }, children: e.jsx(ne.Text, { strong: !0, children: n }) }), e.jsx(he, { name: u, placeholder: r, onChange: c => a(c), value: s, autoComplete: "new-password" })] }), Er = { "gpt-3.5-turbo": "gpt-3.5-turbo-0125" }, br = n => { const { visible: u, tag: s, handleClose: a, refresh: r } = n, [o, c] = i.useState(!1), [h, F] = i.useState([]), [g, p] = i.useState([]), [m, d] = i.useState([]), [E, _] = i.useState([]), [I, T] = i.useState([]), [H, ae] = i.useState(""), Z = { tag: "", new_tag: null, model_mapping: null, groups: [], models: [] }, [O, A] = i.useState(Z), Y = (C, P) => { if (A(j => ({ ...j, [C]: P })), C === "type") { let j = []; switch (P) { case 2: j = ["mj_imagine", "mj_variation", "mj_reroll", "mj_blend", "mj_upscale", "mj_describe", "mj_uploads"]; break; case 5: j = ["swap_face", "mj_imagine", "mj_variation", "mj_reroll", "mj_blend", "mj_upscale", "mj_describe", "mj_zoom", "mj_shorten", "mj_modal", "mj_inpaint", "mj_custom_zoom", "mj_high_variation", "mj_low_variation", "mj_pan", "mj_uploads"]; break; case 36: j = ["suno_music", "suno_lyrics"]; break; default: j = xn(P); break }O.models.length === 0 && A(R => ({ ...R, models: j })), _(j) } }, N = async () => { try { let C = await W.get("/api/channel/models"), P = C.data.data.map(j => ({ label: j.id, value: j.id })); F(P), T(C.data.data.map(j => j.id)), _(C.data.data.filter(j => j.id.startsWith("gpt-") || j.id.startsWith("text-")).map(j => j.id)) } catch (C) { b(C.message) } }, U = async () => { try { let C = await W.get("/api/group/"); if (C === void 0) return; d(C.data.data.map(P => ({ label: P, value: P }))) } catch (C) { b(C.message) } }, q = async () => { c(!0); let C = { tag: s }; if (O.model_mapping !== null && O.model_mapping !== "") { if (O.model_mapping !== "" && !gt(O.model_mapping)) { Te("模型映射必须是合法的 JSON 格式！"), c(!1); return } C.model_mapping = O.model_mapping } if (O.groups.length > 0 && (C.groups = O.groups.join(",")), O.models.length > 0 && (C.models = O.models.join(",")), C.new_tag = O.new_tag, C.model_mapping === void 0 && C.groups === void 0 && C.models === void 0 && C.new_tag === void 0) { ot("没有任何修改！"), c(!1); return } await w(C), c(!1) }, w = async C => { var P; try { const j = await W.put("/api/channel/tag", C); (P = j == null ? void 0 : j.data) != null && P.success && (ie("标签更新成功！"), r(), a()) } catch (j) { b(j) } }; i.useEffect(() => { let C = [...h]; O.models.forEach(P => { C.find(j => j.label === P) || C.push({ label: P, value: P }) }), p(C) }, [h, O.models]), i.useEffect(() => { A({ ...Z, tag: s, new_tag: s }), N().then(), U().then() }, [u]); const V = () => { if (H.trim() === "") return; const C = H.split(",").map(v => v.trim()); let P = [...O.models], j = [...g], R = !1; C.forEach(v => { v && !P.includes(v) ? (P.push(v), j.push({ key: v, text: v, value: v })) : v && (b("某些模型已存在！"), R = !0) }), !R && (p(j), ae(""), Y("models", P)) }; return e.jsxs(qt, { title: "编辑标签", visible: u, onCancel: a, footer: e.jsx("div", { style: { display: "flex", justifyContent: "flex-end" }, children: e.jsxs(ye, { children: [e.jsx($, { onClick: a, children: "取消" }), e.jsx($, { type: "primary", onClick: q, loading: o, children: "保存" })] }) }), children: [e.jsx("div", { style: { marginTop: 10 }, children: e.jsx(Ge, { type: "warning", description: e.jsx(e.Fragment, { children: "所有编辑均为覆盖操作，留空则不更改" }) }) }), e.jsxs(Me, { spinning: o, children: [e.jsx(Cr, { label: "标签名，留空则解散标签", name: "newTag", value: O.new_tag, onChange: C => A({ ...O, new_tag: C }), placeholder: "请输入新标签" }), e.jsx("div", { style: { marginTop: 10 }, children: e.jsx(ne.Text, { strong: !0, children: "模型，留空则不更改：" }) }), e.jsx(Ue, { placeholder: "请选择该渠道所支持的模型，留空则不更改", name: "models", required: !0, multiple: !0, selection: !0, filter: !0, searchPosition: "dropdown", onChange: C => { Y("models", C) }, value: O.models, autoComplete: "new-password", optionList: g }), e.jsx(he, { addonAfter: e.jsx($, { type: "primary", onClick: V, children: "填入" }), placeholder: "输入自定义模型名称", value: H, onChange: C => { ae(C.trim()) } }), e.jsx("div", { style: { marginTop: 10 }, children: e.jsx(ne.Text, { strong: !0, children: "分组，留空则不更改：" }) }), e.jsx(Ue, { placeholder: "请选择可以使用该渠道的分组，留空则不更改", name: "groups", required: !0, multiple: !0, selection: !0, allowAdditions: !0, additionLabel: "请在系统设置页面编辑分组倍率以添加新的分组：", onChange: C => { Y("groups", C) }, value: O.groups, autoComplete: "new-password", optionList: m }), e.jsx("div", { style: { marginTop: 10 }, children: e.jsx(ne.Text, { strong: !0, children: "模型重定向：" }) }), e.jsx(pt, { placeholder: "此项可选，用于修改请求体中的模型名称，为一个 JSON 字符串，键为请求中模型名称，值为要替换的模型名称，留空则不更改", name: "model_mapping", onChange: C => { Y("model_mapping", C) }, autosize: !0, value: O.model_mapping, autoComplete: "new-password" }), e.jsxs(ye, { children: [e.jsx(ne.Text, { style: { color: "rgba(var(--semi-blue-5), 1)", userSelect: "none", cursor: "pointer" }, onClick: () => { Y("model_mapping", JSON.stringify(Er, null, 2)) }, children: "填入模板" }), e.jsx(ne.Text, { style: { color: "rgba(var(--semi-blue-5), 1)", userSelect: "none", cursor: "pointer" }, onClick: () => { Y("model_mapping", JSON.stringify({}, null, 2)) }, children: "清空重定向" }), e.jsx(ne.Text, { style: { color: "rgba(var(--semi-blue-5), 1)", userSelect: "none", cursor: "pointer" }, onClick: () => { Y("model_mapping", "") }, children: "不更改" })] })] })] }) }, jr = () => { const { t: n } = Ce(); let u; const s = L => { var z, le; if (!u) { u = new Map; for (let oe = 0; oe < Fn.length; oe++)u[Fn[oe].value] = Fn[oe]; u[0] = { value: 0, text: n("未知类型"), color: "grey" } } return e.jsx(K, { size: "large", color: (z = u[L]) == null ? void 0 : z.color, children: (le = u[L]) == null ? void 0 : le.text }) }, a = () => e.jsx(K, { color: "light-blue", prefixIcon: e.jsx(Hs, {}), size: "large", shape: "circle", type: "light", children: n("标签聚合") }), r = L => { switch (L) { case 1: return e.jsx(K, { size: "large", color: "green", children: n("已启用") }); case 2: return e.jsx(K, { size: "large", color: "yellow", children: n("已禁用") }); case 3: return e.jsx(K, { size: "large", color: "yellow", children: n("自动禁用") }); default: return e.jsx(K, { size: "large", color: "grey", children: n("未知状态") }) } }, o = L => { let z = L / 1e3; return z = z.toFixed(2) + n(" 秒"), L === 0 ? e.jsx(K, { size: "large", color: "grey", children: n("未测试") }) : L <= 1e3 ? e.jsx(K, { size: "large", color: "green", children: z }) : L <= 3e3 ? e.jsx(K, { size: "large", color: "lime", children: z }) : L <= 5e3 ? e.jsx(K, { size: "large", color: "yellow", children: z }) : e.jsx(K, { size: "large", color: "red", children: z }) }, c = [{ title: n("ID"), dataIndex: "id" }, { title: n("名称"), dataIndex: "name" }, { title: n("分组"), dataIndex: "group", render: (L, z, le) => e.jsx("div", { children: e.jsx(ye, { spacing: 2, children: L == null ? void 0 : L.split(",").sort((oe, de) => oe === "default" ? -1 : de === "default" ? 1 : oe.localeCompare(de)).map((oe, de) => Yt(oe)) }) }) }, { title: n("类型"), dataIndex: "type", render: (L, z, le) => z.children === void 0 ? e.jsx(e.Fragment, { children: s(L) }) : e.jsx(e.Fragment, { children: a() }) }, { title: n("状态"), dataIndex: "status", render: (L, z, le) => { if (L === 3) { z.other_info === "" && (z.other_info = "{}"); let oe = JSON.parse(z.other_info), de = oe.status_reason, ke = oe.status_time; return e.jsx("div", { children: e.jsx(tt, { content: n("原因：") + de + n("，时间：") + Xe(ke), children: r(L) }) }) } else return r(L) } }, { title: n("响应时间"), dataIndex: "response_time", render: (L, z, le) => e.jsx("div", { children: o(L) }) }, { title: n("已用/剩余"), dataIndex: "expired_time", render: (L, z, le) => z.children === void 0 ? e.jsx("div", { children: e.jsxs(ye, { spacing: 1, children: [e.jsx(tt, { content: n("已用额度"), children: e.jsx(K, { color: "white", type: "ghost", size: "large", children: ve(z.used_quota) }) }), e.jsx(tt, { content: n("剩余额度") + z.balance + n("，点击更新"), children: e.jsxs(K, { color: "white", type: "ghost", size: "large", onClick: () => { dt(z) }, children: ["$", Ia(z.balance)] }) })] }) }) : e.jsx(tt, { content: n("已用额度"), children: e.jsx(K, { color: "white", type: "ghost", size: "large", children: ve(z.used_quota) }) }) }, { title: n("优先级"), dataIndex: "priority", render: (L, z, le) => z.children === void 0 ? e.jsx("div", { children: e.jsx(Kt, { style: { width: 70 }, name: "priority", onBlur: oe => { ue(z.id, "priority", z, oe.target.value) }, keepFocus: !0, innerButtons: !0, defaultValue: z.priority, min: -999 }) }) : e.jsx(e.Fragment, { children: e.jsx(Kt, { style: { width: 70 }, name: "priority", keepFocus: !0, onBlur: oe => { De.warning({ title: n("修改子渠道优先级"), content: n("确定要修改所有子渠道优先级为 ") + oe.target.value + n(" 吗？"), onOk: () => { oe.target.value !== "" && se("priority", { tag: z.key, priority: oe.target.value }) } }) }, innerButtons: !0, defaultValue: z.priority, min: -999 }) }) }, { title: n("权重"), dataIndex: "weight", render: (L, z, le) => z.children === void 0 ? e.jsx("div", { children: e.jsx(Kt, { style: { width: 70 }, name: "weight", onBlur: oe => { ue(z.id, "weight", z, oe.target.value) }, keepFocus: !0, innerButtons: !0, defaultValue: z.weight, min: 0 }) }) : e.jsx(Kt, { style: { width: 70 }, name: "weight", keepFocus: !0, onBlur: oe => { De.warning({ title: n("修改子渠道权重"), content: n("确定要修改所有子渠道权重为 ") + oe.target.value + n(" 吗？"), onOk: () => { oe.target.value !== "" && se("weight", { tag: z.key, weight: oe.target.value }) } }) }, innerButtons: !0, defaultValue: z.weight, min: -999 }) }, { title: "", dataIndex: "operate", render: (L, z, le) => z.children === void 0 ? e.jsxs("div", { children: [e.jsxs(Yu, { style: { marginRight: 1 }, "aria-label": n("测试单个渠道操作项目组"), children: [e.jsx($, { theme: "light", onClick: () => { Je(z, "") }, children: n("测试") }), e.jsx(et, { trigger: "click", position: "bottomRight", menu: z.test_models, children: e.jsx($, { style: { padding: "8px 4px" }, type: "primary", icon: e.jsx(Zu, {}) }) })] }), e.jsx(Ye, { title: n("确定是否要删除此渠道？"), content: n("此修改将不可逆"), okType: "danger", position: "left", onConfirm: () => { ue(z.id, "delete", z).then(() => { Ee(z) }) }, children: e.jsx($, { theme: "light", type: "danger", style: { marginRight: 1 }, children: n("删除") }) }), z.status === 1 ? e.jsx($, { theme: "light", type: "warning", style: { marginRight: 1 }, onClick: async () => { ue(z.id, "disable", z) }, children: n("禁用") }) : e.jsx($, { theme: "light", type: "secondary", style: { marginRight: 1 }, onClick: async () => { ue(z.id, "enable", z) }, children: n("启用") }), e.jsx($, { theme: "light", type: "tertiary", style: { marginRight: 1 }, onClick: () => { x(z), v(!0) }, children: n("编辑") }), e.jsx(Ye, { title: n("确定是否要复制此渠道？"), content: n("复制渠道的所有信息"), okType: "danger", position: "left", onConfirm: async () => { ee(z) }, children: e.jsx($, { theme: "light", type: "primary", style: { marginRight: 1 }, children: n("复制") }) })] }) : e.jsxs(e.Fragment, { children: [e.jsx($, { theme: "light", type: "secondary", style: { marginRight: 1 }, onClick: async () => { be(z.key, "enable") }, children: n("启用全部") }), e.jsx($, { theme: "light", type: "warning", style: { marginRight: 1 }, onClick: async () => { be(z.key, "disable") }, children: n("禁用全部") }), e.jsx($, { theme: "light", type: "tertiary", style: { marginRight: 1 }, onClick: () => { X(!0), D(z.key) }, children: n("编辑") })] }) }], [h, F] = i.useState([]), [g, p] = i.useState(!0), [m, d] = i.useState(1), [E, _] = i.useState(!1), [I, T] = i.useState(""), [H, ae] = i.useState(""), [Z, O] = i.useState(""), [A, Y] = i.useState(!1), [N, U] = i.useState(!1), [q, w] = i.useState(_e); i.useState(_a("channel-test")); const [V, C] = i.useState(q), [P, j] = i.useState([]), [R, v] = i.useState(!1), [l, f] = i.useState(!1), [y, x] = i.useState({ id: void 0 }), [S, X] = i.useState(!1), [te, D] = i.useState(""), [B, k] = i.useState([]); i.useState(!1); const [J, Q] = i.useState(!1), [ce, pe] = i.useState(!1), [ge, xe] = i.useState(""), Ee = L => { let z = [...h]; if (L.id != null) { let le = z.findIndex(oe => { if (oe.children !== void 0) { for (let de = 0; de < oe.children.length; de++)if (oe.children[de].id === L.id) return oe.children.splice(de, 1), !1 } else return oe.id === L.id }); le > -1 && (z.splice(le, 1), F(z)) } }, ze = (L, z) => { let le = [], oe = {}; for (let de = 0; de < L.length; de++) { L[de].key = "" + L[de].id; let ke = []; if (L[de].models.split(",").forEach((Oe, We) => { ke.push({ node: "item", name: Oe, onClick: () => { Je(L[de], Oe) } }) }), L[de].test_models = ke, !z) le.push(L[de]); else { let Oe = L[de].tag ? L[de].tag : "", We = oe[Oe], je; We === void 0 ? (oe[Oe] = 1, je = { key: Oe, id: Oe, tag: Oe, name: "标签：" + Oe, group: "", used_quota: 0, response_time: 0, priority: -1, weight: -1 }, je.children = [], le.push(je)) : je = le.find(Dt => Dt.key === Oe), je.priority === -1 ? je.priority = L[de].priority : je.priority !== L[de].priority && (je.priority = ""), je.weight === -1 ? je.weight = L[de].weight : je.weight !== L[de].weight && (je.weight = ""), je.group === "" ? je.group = L[de].group : L[de].group.split(",").forEach((ln, qo) => { je.group.indexOf(ln) === -1 && (je.group += "," + ln) }), je.children.push(L[de]), L[de].status === 1 && (je.status = 1), je.used_quota += L[de].used_quota, je.response_time += L[de].response_time, je.response_time = je.response_time / 2 } } F(le), le.length >= q ? C(le.length + q) : C(le.length) }, G = async (L, z, le, oe) => { p(!0); const de = await W.get(`/api/channel/?p=${L}&page_size=${z}&id_sort=${le}&tag_mode=${oe}`); if (de === void 0) return; const { success: ke, message: Oe, data: We } = de.data; if (ke) if (L === 0) ze(We, oe); else { let je = [...h]; je.splice(L * z, We.length, ...We), ze(je, oe) } else b(Oe); p(!1) }, ee = async L => { const z = L; if (z.name += n("_复制"), z.created_time = null, z.balance = 0, z.used_quota = 0, !z) { b(n("渠道未找到，请刷新页面后重试。")); return } try { const le = { ...z, id: void 0 }, oe = await W.post("/api/channel/", le); oe.data.success ? (ie(n("渠道复制成功")), await me()) : b(oe.data.message) } catch (le) { b(n("渠道复制失败: ") + le.message) } }, me = async () => { await G(m - 1, q, E, J) }; i.useEffect(() => { const L = localStorage.getItem("id-sort") === "true", z = parseInt(localStorage.getItem("page-size")) || _e; _(L), w(z), G(0, z, L, J).then().catch(le => { b(le) }), on().then(), qa().then() }, []); const ue = async (L, z, le, oe) => { let de = { id: L }, ke; switch (z) { case "delete": ke = await W.delete(`/api/channel/${L}/`); break; case "enable": de.status = 1, ke = await W.put("/api/channel/", de); break; case "disable": de.status = 2, ke = await W.put("/api/channel/", de); break; case "priority": if (oe === "") return; de.priority = parseInt(oe), ke = await W.put("/api/channel/", de); break; case "weight": if (oe === "") return; de.weight = parseInt(oe), de.weight < 0 && (de.weight = 0), ke = await W.put("/api/channel/", de); break }const { success: Oe, message: We } = ke.data; if (Oe) { ie(n("操作成功完成！")); let je = ke.data.data, Dt = [...h]; z === "delete" || (le.status = je.status), F(Dt) } else b(We) }, be = async (L, z) => { var ke, Oe; console.log(L, z); let le; switch (z) { case "enable": le = await W.post("/api/channel/tag/enabled", { tag: L }); break; case "disable": le = await W.post("/api/channel/tag/disabled", { tag: L }); break }const { success: oe, message: de } = le.data; if (oe) { ie("操作成功完成！"); let We = [...h]; for (let je = 0; je < We.length; je++)if (We[je].tag === L) { let Dt = z === "enable" ? 1 : 2; (Oe = (ke = We[je]) == null ? void 0 : ke.children) == null || Oe.forEach(ln => { ln.status = Dt }), We[je].status = Dt } F(We) } else b(de) }, Ne = async (L, z, le, oe) => { if (L === "" && z === "" && le === "") { await G(0, q, E, oe), d(1); return } Y(!0); const de = await W.get(`/api/channel/search?keyword=${L}&group=${z}&model=${le}&id_sort=${E}&tag_mode=${oe}`), { success: ke, message: Oe, data: We } = de.data; ke ? (ze(We, oe), d(1)) : b(Oe), Y(!1) }, Je = async (L, z) => { const le = await W.get(`/api/channel/test/${L.id}?model=${z}`), { success: oe, message: de, time: ke } = le.data; oe ? (L.response_time = ke * 1e3, L.test_time = Date.now() / 1e3, Te(n("通道 ${name} 测试成功，耗时 ${time.toFixed(2)} 秒。").replace("${name}", L.name).replace("${time.toFixed(2)}", ke.toFixed(2)))) : b(de) }, _t = async () => { const L = await W.get("/api/channel/test"), { success: z, message: le } = L.data; z ? Te(n("已成功开始测试所有已启用通道，请刷新页面查看结果。")) : b(le) }, Tt = async () => { const L = await W.delete("/api/channel/disabled"), { success: z, message: le, data: oe } = L.data; z ? (ie(n("已删除所有禁用渠道，共计 ${data} 个").replace("${data}", oe)), await me()) : b(le) }, dt = async L => { const z = await W.get(`/api/channel/update_balance/${L.id}/`), { success: le, message: oe, balance: de } = z.data; le ? (L.balance = de, L.balance_updated_time = Date.now() / 1e3, Te(n("通道 ${name} 余额更新成功！").replace("${name}", L.name))) : b(oe) }, It = async () => { U(!0); const L = await W.get("/api/channel/update_balance"), { success: z, message: le } = L.data; z ? Te(n("已更新完毕所有已启用通道余额！")) : b(le), U(!1) }, nn = async () => { if (B.length === 0) { b(n("请先选择要删除的通道！")); return } p(!0); let L = []; B.forEach(ke => { L.push(ke.id) }); const z = await W.post("/api/channel/batch", { ids: L }), { success: le, message: oe, data: de } = z.data; le ? (ie(n("已删除 ${data} 个通道！").replace("${data}", de)), await me()) : b(oe), p(!1) }, un = async () => { const L = await W.post("/api/channel/fix"), { success: z, message: le, data: oe } = L.data; z ? (ie(n("已修复 ${data} 个通道！").replace("${data}", oe)), await me()) : b(le) }; let sn = h.slice((m - 1) * q, m * q); const an = L => { d(L), L === Math.ceil(h.length / q) + 1 && G(L - 1, q, E, J).then(z => { }) }, rn = async L => { localStorage.setItem("page-size", L + ""), w(L), d(1), G(0, L, E, J).then().catch(z => { b(z) }) }, on = async () => { try { let L = await W.get("/api/group/"); if (L === void 0) return; j(L.data.data.map(z => ({ label: z, value: z }))) } catch (L) { b(L.message) } }, se = async (L, z) => { var le; switch (L) { case "priority": if (z.priority === void 0 || z.priority === "") { Te("优先级必须是整数！"); return } z.priority = parseInt(z.priority); break; case "weight": if (z.weight === void 0 || z.weight < 0 || z.weight === "") { Te("权重必须是非负整数！"); return } z.weight = parseInt(z.weight); break }try { const oe = await W.put("/api/channel/tag", z); (le = oe == null ? void 0 : oe.data) != null && le.success && (ie("更新成功！"), await me()) } catch (oe) { b(oe) } }, Be = () => { v(!1) }, Se = (L, z) => L.status !== 1 ? { style: { background: "var(--semi-color-disabled-border)" } } : {}, at = async () => { if (B.length === 0) { b(n("请先选择要设置标签的渠道！")); return } if (ge === "") { b(n("标签不能为空！")); return } let L = B.map(le => le.id); const z = await W.post("/api/channel/batch/tag", { ids: L, tag: ge === "" ? null : ge }); z.data.success ? (ie(n("已为 ${count} 个渠道设置标签！").replace("${count}", z.data.data)), await me(), pe(!1)) : b(z.data.message) }; return e.jsxs(e.Fragment, { children: [e.jsx(br, { visible: S, tag: te, handleClose: () => X(!1), refresh: me }), e.jsx(Kn, { refresh: me, visible: R, handleClose: Be, editingChannel: y }), e.jsx(M, { onSubmit: () => { Ne(I, H, Z, J) }, labelPosition: "left", children: e.jsx("div", { style: { display: "flex" }, children: e.jsxs(ye, { children: [e.jsx(M.Input, { field: "search_keyword", label: n("搜索渠道关键词"), placeholder: n("搜索渠道的 ID，名称和密钥 ..."), value: I, loading: A, onChange: L => { T(L.trim()) } }), e.jsx(M.Input, { field: "search_model", label: n("模型"), placeholder: n("模型关键字"), value: Z, loading: A, onChange: L => { O(L.trim()) } }), e.jsx(M.Select, { field: "group", label: n("分组"), optionList: [{ label: n("选择分组"), value: null }, ...P], initValue: null, onChange: L => { ae(L), Ne(I, L, Z, J) } }), e.jsx($, { label: n("查询"), type: "primary", htmlType: "submit", className: "btn-margin-right", style: { marginRight: 8 }, children: n("查询") })] }) }) }), e.jsx(Ct, { style: { marginBottom: 15 } }), e.jsx("div", { style: { display: ut() ? "" : "flex", marginTop: ut() ? 0 : -45, zIndex: 999, pointerEvents: "none" }, children: e.jsxs(ye, { style: { pointerEvents: "auto", marginTop: ut() ? 0 : 45 }, children: [e.jsx(ne.Text, { strong: !0, children: n("使用ID排序") }), e.jsx(fn, { checked: E, label: n("使用ID排序"), uncheckedText: n("关"), "aria-label": n("是否用ID排序"), onChange: L => { localStorage.setItem("id-sort", L + ""), _(L), G(0, q, L, J).then().catch(z => { b(z) }) } }), e.jsx($, { theme: "light", type: "primary", style: { marginRight: 8 }, onClick: () => { x({ id: void 0 }), v(!0) }, children: n("添加渠道") }), e.jsx(Ye, { title: n("确定？"), okType: "warning", onConfirm: _t, position: (ut(), "top"), children: e.jsx($, { theme: "light", type: "warning", style: { marginRight: 8 }, children: n("测试所有通道") }) }), e.jsx(Ye, { title: n("确定？"), okType: "secondary", onConfirm: It, children: e.jsx($, { theme: "light", type: "secondary", style: { marginRight: 8 }, children: n("更新所有已启用通道余额") }) }), e.jsx(Ye, { title: n("确定是否要删除禁用通道？"), content: n("此修改将不可逆"), okType: "danger", onConfirm: Tt, children: e.jsx($, { theme: "light", type: "danger", style: { marginRight: 8 }, children: n("删除禁用通道") }) }), e.jsx($, { theme: "light", type: "primary", style: { marginRight: 8 }, onClick: me, children: n("刷新") })] }) }), e.jsx("div", { style: { marginTop: 20 }, children: e.jsxs(ye, { children: [e.jsx(ne.Text, { strong: !0, children: n("开启批量操作") }), e.jsx(fn, { label: n("开启批量操作"), uncheckedText: n("关"), "aria-label": n("是否开启批量操作"), onChange: L => { f(L) } }), e.jsx(Ye, { title: n("确定是否要删除所选通道？"), content: n("此修改将不可逆"), okType: "danger", onConfirm: nn, disabled: !l, position: "top", children: e.jsx($, { disabled: !l, theme: "light", type: "danger", style: { marginRight: 8 }, children: n("删除所选通道") }) }), e.jsx(Ye, { title: n("确定是否要修复数据库一致性？"), content: n("进行该操作时，可能导致渠道访问错误，请仅在数据库出现问题时使用"), okType: "warning", onConfirm: un, position: "top", children: e.jsx($, { theme: "light", type: "secondary", style: { marginRight: 8 }, children: n("修复数据库一致性") }) })] }) }), e.jsx("div", { style: { marginTop: 20 }, children: e.jsxs(ye, { children: [e.jsx(ne.Text, { strong: !0, children: n("标签聚合模式") }), e.jsx(fn, { checked: J, label: n("标签聚合模式"), uncheckedText: n("关"), "aria-label": n("是否启用标签聚合"), onChange: L => { Q(L), G(0, q, E, L) } }), e.jsx($, { disabled: !l, theme: "light", type: "primary", style: { marginRight: 8 }, onClick: () => pe(!0), children: n("批量设置标签") })] }) }), e.jsx(ft, { className: "channel-table", style: { marginTop: 15 }, columns: c, dataSource: sn, pagination: { currentPage: m, pageSize: q, total: V, pageSizeOpts: [10, 20, 50, 100], showSizeChanger: !0, formatPageText: L => "", onPageSizeChange: L => { rn(L).then() }, onPageChange: an }, loading: g, onRow: Se, rowSelection: l ? { onChange: (L, z) => { k(z) } } : null }), e.jsxs(De, { title: n("批量设置标签"), visible: ce, onOk: at, onCancel: () => pe(!1), maskClosable: !1, centered: !0, children: [e.jsx("div", { style: { marginBottom: 20 }, children: e.jsx(ne.Text, { children: n("请输入要设置的标签名称") }) }), e.jsx(he, { placeholder: n("请输入标签名称"), value: ge, onChange: L => xe(L) })] })] }) }, Dr = () => { const { t: n } = Ce(); return e.jsx(e.Fragment, { children: e.jsxs(Fe, { children: [e.jsx(Fe.Header, { children: e.jsx("h3", { children: n("管理渠道") }) }), e.jsx(Fe.Content, { children: e.jsx(jr, {}) })] }) }) }, wr = n => { const [u, s] = i.useState(!1), [a, r] = i.useState(u), o = { name: "", remain_quota: u ? 0 : 5e5, expired_time: -1, unlimited_quota: !1, model_limits_enabled: !1, model_limits: [], allow_ips: "", group: "" }, [c, h] = i.useState(o), { name: F, remain_quota: g, expired_time: p, unlimited_quota: m, model_limits_enabled: d, model_limits: E, allow_ips: _, group: I } = c, [T, H] = i.useState([]), [ae, Z] = i.useState([]); it(); const { t: O } = Ce(), A = (l, f) => { h(y => ({ ...y, [l]: f })) }, Y = () => { n.handleClose() }, N = (l, f, y, x) => { let X = new Date().getTime() / 1e3, te = l * 30 * 24 * 60 * 60; te += f * 24 * 60 * 60, te += y * 60 * 60, te += x * 60, te !== 0 ? (X += te, h({ ...c, expired_time: Xe(X) })) : h({ ...c, expired_time: -1 }) }, U = () => { h({ ...c, unlimited_quota: !m }) }, q = async () => { let l = await W.get("/api/user/models"); const { success: f, message: y, data: x } = l.data; if (f) { let S = x.map(X => ({ label: X, value: X })); H(S) } else b(O(y)) }, w = async () => { let l = await W.get("/api/user/self/groups"); const { success: f, message: y, data: x } = l.data; if (f) { let S = Object.entries(x).map(([X, te]) => ({ label: te.desc, value: X, ratio: te.ratio })); Z(S) } else b(O(y)) }, V = async () => { r(!0); let l = await W.get(`/api/token/${n.editingToken.id}`); const { success: f, message: y, data: x } = l.data; f ? (x.expired_time !== -1 && (x.expired_time = Xe(x.expired_time)), x.model_limits !== "" ? x.model_limits = x.model_limits.split(",") : x.model_limits = [], h(x)) : b(y), r(!1) }; i.useEffect(() => { s(n.editingToken.id !== void 0) }, [n.editingToken.id]), i.useEffect(() => { u ? V().then(() => { }) : h(o), q(), w() }, [u]); const [C, P] = i.useState(1), j = l => { const f = parseInt(l, 10); !isNaN(f) && f > 0 && P(f) }, R = () => { const l = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"; let f = ""; for (let y = 0; y < 6; y++)f += l.charAt(Math.floor(Math.random() * l.length)); return f }, v = async () => { if (r(!0), u) { let l = { ...c }; if (l.remain_quota = parseInt(l.remain_quota), l.expired_time !== -1) { let S = Date.parse(l.expired_time); if (isNaN(S)) { b(O("过期时间格式错误！")), r(!1); return } l.expired_time = Math.ceil(S / 1e3) } l.model_limits = l.model_limits.join(","); let f = await W.put("/api/token/", { ...l, id: parseInt(n.editingToken.id) }); const { success: y, message: x } = f.data; y ? (ie(O("令牌更新成功！")), n.refresh(), n.handleClose()) : b(O(x)) } else { let l = 0; for (let f = 0; f < C; f++) { let y = { ...c }; if (f !== 0 && (y.name = `${c.name}-${R()}`), y.remain_quota = parseInt(y.remain_quota), y.expired_time !== -1) { let te = Date.parse(y.expired_time); if (isNaN(te)) { b(O("过期时间格式错误！")), r(!1); break } y.expired_time = Math.ceil(te / 1e3) } y.model_limits = y.model_limits.join(","); let x = await W.post("/api/token/", y); const { success: S, message: X } = x.data; if (S) l++; else { b(O(X)); break } } l > 0 && (ie(O("令牌创建成功，请在列表页面点击复制获取令牌！")), n.refresh(), n.handleClose()) } r(!1), h(o), P(1) }; return e.jsx(e.Fragment, { children: e.jsx(qt, { placement: u ? "right" : "left", title: e.jsx(jt, { level: 3, children: O(u ? "更新令牌信息" : "创建新的令牌") }), headerStyle: { borderBottom: "1px solid var(--semi-color-border)" }, bodyStyle: { borderBottom: "1px solid var(--semi-color-border)" }, visible: n.visiable, footer: e.jsx("div", { style: { display: "flex", justifyContent: "flex-end" }, children: e.jsxs(ye, { children: [e.jsx($, { theme: "solid", size: "large", onClick: v, children: O("提交") }), e.jsx($, { theme: "solid", size: "large", type: "tertiary", onClick: Y, children: O("取消") })] }) }), closeIcon: null, onCancel: () => Y(), width: ut() ? "100%" : 600, children: e.jsxs(Me, { spinning: a, children: [e.jsx(he, { style: { marginTop: 20 }, label: O("名称"), name: "name", placeholder: O("请输入名称"), onChange: l => A("name", l), value: F, autoComplete: "new-password", required: !u }), e.jsx(He, {}), e.jsx(Vs, { label: O("过期时间"), name: "expired_time", placeholder: O("请选择过期时间"), onChange: l => A("expired_time", l), value: p, autoComplete: "new-password", type: "dateTime" }), e.jsx("div", { style: { marginTop: 20 }, children: e.jsxs(ye, { children: [e.jsx($, { type: "tertiary", onClick: () => { N(0, 0, 0, 0) }, children: O("永不过期") }), e.jsx($, { type: "tertiary", onClick: () => { N(0, 0, 1, 0) }, children: O("一小时") }), e.jsx($, { type: "tertiary", onClick: () => { N(1, 0, 0, 0) }, children: O("一个月") }), e.jsx($, { type: "tertiary", onClick: () => { N(0, 1, 0, 0) }, children: O("一天") })] }) }), e.jsx(He, {}), e.jsx(Ge, { type: "warning", description: O("注意，令牌的额度仅用于限制令牌本身的最大额度使用量，实际的使用受到账户的剩余额度限制。") }), e.jsx("div", { style: { marginTop: 20 }, children: e.jsx(ne.Text, { children: `${O("额度")}${Zt(g)}` }) }), e.jsx(Wn, { style: { marginTop: 8 }, name: "remain_quota", placeholder: O("请输入额度"), onChange: l => A("remain_quota", l), value: g, autoComplete: "new-password", type: "number", data: [{ value: 5e5, label: "1$" }, { value: 5e6, label: "10$" }, { value: 25e6, label: "50$" }, { value: 5e7, label: "100$" }, { value: 25e7, label: "500$" }, { value: 5e8, label: "1000$" }], disabled: m }), !u && e.jsxs(e.Fragment, { children: [e.jsx("div", { style: { marginTop: 20 }, children: e.jsx(ne.Text, { children: O("新建数量") }) }), e.jsx(Wn, { style: { marginTop: 8 }, label: O("数量"), placeholder: O("请选择或输入创建令牌的数量"), onChange: l => j(l), onSelect: l => j(l), value: C.toString(), autoComplete: "off", type: "number", data: [{ value: 10, label: O("10个") }, { value: 20, label: O("20个") }, { value: 30, label: O("30个") }, { value: 100, label: O("100个") }], disabled: m })] }), e.jsx("div", { children: e.jsx($, { style: { marginTop: 8 }, type: "warning", onClick: () => { U() }, children: O(m ? "取消无限额度" : "设为无限额度") }) }), e.jsx(He, {}), e.jsx("div", { style: { marginTop: 10 }, children: e.jsx(ne.Text, { children: O("IP白名单（请勿过度信任此功能）") }) }), e.jsx(pt, { label: O("IP白名单"), name: "allow_ips", placeholder: O("允许的IP，一行一个，不填写则不限制"), onChange: l => { A("allow_ips", l) }, value: c.allow_ips, style: { fontFamily: "JetBrains Mono, Consolas" } }), e.jsx("div", { style: { marginTop: 10, display: "flex" }, children: e.jsx(ye, { children: e.jsx(zn, { name: "model_limits_enabled", checked: d, onChange: l => A("model_limits_enabled", l.target.checked), children: O("启用模型限制（非必要，不建议启用）") }) }) }), e.jsx(Ue, { style: { marginTop: 8 }, placeholder: O("请选择该渠道所支持的模型"), name: "models", required: !0, multiple: !0, selection: !0, onChange: l => { A("model_limits", l) }, value: c.model_limits, autoComplete: "new-password", optionList: T, disabled: !d }), e.jsx("div", { style: { marginTop: 10 }, children: e.jsx(ne.Text, { children: O("令牌分组，默认为用户的分组") }) }), ae.length > 0 ? e.jsx(Ue, { style: { marginTop: 8 }, placeholder: O("令牌分组，默认为用户的分组"), name: "gruop", required: !0, selection: !0, onChange: l => { A("group", l) }, position: "topLeft", renderOptionItem: ds, value: c.group, autoComplete: "new-password", optionList: ae }) : e.jsx(Ue, { style: { marginTop: 8 }, placeholder: O("管理员未设置用户可选分组"), name: "gruop", disabled: !0 })] }) }) }) }; function Eu(n) { return e.jsx(e.Fragment, { children: Xe(n) }) } const Ar = () => {
  const { t: n } = Ce(), u = (D, B = !1) => { switch (D) { case 1: return B ? e.jsx(K, { color: "green", size: "large", children: n("已启用：限制模型") }) : e.jsx(K, { color: "green", size: "large", children: n("已启用") }); case 2: return e.jsx(K, { color: "red", size: "large", children: n("已禁用") }); case 3: return e.jsx(K, { color: "yellow", size: "large", children: n("已过期") }); case 4: return e.jsx(K, { color: "grey", size: "large", children: n("已耗尽") }); default: return e.jsx(K, { color: "black", size: "large", children: n("未知状态") }) } }, s = [{ title: n("名称"), dataIndex: "name" }, { title: n("状态"), dataIndex: "status", key: "status", render: (D, B, k) => e.jsx("div", { children: e.jsxs(ye, { children: [u(D, B.model_limits_enabled), Yt(B.group)] }) }) }, { title: n("已用额度"), dataIndex: "used_quota", render: (D, B, k) => e.jsx("div", { children: ve(parseInt(D)) }) }, { title: n("剩余额度"), dataIndex: "remain_quota", render: (D, B, k) => e.jsx("div", { children: B.unlimited_quota ? e.jsx(K, { size: "large", color: "white", children: n("无限制") }) : e.jsx(K, { size: "large", color: "light-blue", children: ve(parseInt(D)) }) }) }, { title: n("创建时间"), dataIndex: "created_time", render: (D, B, k) => e.jsx("div", { children: Eu(D) }) }, { title: n("过期时间"), dataIndex: "expired_time", render: (D, B, k) => e.jsx("div", { children: B.expired_time === -1 ? n("永不过期") : Eu(D) }) }, { title: "", dataIndex: "operate", render: (D, B, k) => { let J = localStorage.getItem("chats"), Q = [], ce = localStorage.getItem("chat_link"), pe = localStorage.getItem("chat_link2"), ge = !0; if (ce && (ge = !1, ce += '/#/?settings={"key":"{key}","url":"{address}"}', Q.push({ node: "item", key: "default", name: "ChatGPT Next Web", onClick: () => { R("default", ce, B) } })), pe && (ge = !1, pe += '/#/?settings={"key":"{key}","url":"{address}"}', Q.push({ node: "item", key: "mj", name: "ChatGPT Next Midjourney", onClick: () => { R("mj", pe, B) } })), ge) try { if (J = JSON.parse(J), Array.isArray(J)) for (let xe = 0; xe < J.length; xe++) { let Ee = {}; Ee.node = "item"; for (let ze in J[xe]) J[xe].hasOwnProperty(ze) && (Ee.key = xe, Ee.name = ze, Ee.onClick = () => { R(ze, J[xe][ze], B) }); Q.push(Ee) } } catch (xe) { console.log(xe), b(n("聊天链接配置错误，请联系管理员")) } return e.jsxs("div", { children: [e.jsx(Cn, { content: "sk-" + B.key, style: { padding: 20 }, position: "top", children: e.jsx($, { theme: "light", type: "tertiary", style: { marginRight: 1 }, children: n("查看") }) }), e.jsx($, { theme: "light", type: "secondary", style: { marginRight: 1 }, onClick: async xe => { await j("sk-" + B.key) }, children: n("复制") }), e.jsxs(Yu, { style: { marginRight: 1 }, "aria-label": n("项目操作按钮组"), children: [e.jsx($, { theme: "light", style: { color: "rgba(var(--semi-teal-7), 1)" }, onClick: () => { Q.length === 0 ? b(n("请联系管理员配置聊天链接")) : R("default", J[0][Object.keys(J[0])[0]], B) }, children: n("聊天") }), e.jsx(et, { trigger: "click", position: "bottomRight", menu: Q, children: e.jsx($, { style: { padding: "8px 4px", color: "rgba(var(--semi-teal-7), 1)" }, type: "primary", icon: e.jsx(Zu, {}) }) })] }), e.jsx(Ye, { title: n("确定是否要删除此令牌？"), content: n("此修改将不可逆"), okType: "danger", position: "left", onConfirm: () => { l(B.id, "delete", B).then(() => { v(B.key) }) }, children: e.jsx($, { theme: "light", type: "danger", style: { marginRight: 1 }, children: n("删除") }) }), B.status === 1 ? e.jsx($, { theme: "light", type: "warning", style: { marginRight: 1 }, onClick: async () => { l(B.id, "disable", B) }, children: n("禁用") }) : e.jsx($, { theme: "light", type: "secondary", style: { marginRight: 1 }, onClick: async () => { l(B.id, "enable", B) }, children: n("启用") }), e.jsx($, { theme: "light", type: "tertiary", style: { marginRight: 1 }, onClick: () => { U(B), c(!0) }, children: n("编辑") })] }) } }], [a, r] = i.useState(_e), [o, c] = i.useState(!1), [h, F] = i.useState([]), [g, p] = i.useState([]), [m, d] = i.useState(a), [E, _] = i.useState(!0), [I, T] = i.useState(1), [H, ae] = i.useState(""), [Z, O] = i.useState(""), [A, Y] = i.useState(!1); i.useState([]); const [N, U] = i.useState({ id: void 0 }), q = () => { c(!1), setTimeout(() => { U({ id: void 0 }) }, 500) }, w = D => { F(D), D.length >= a ? d(D.length + a) : d(D.length) }; let V = h.slice((I - 1) * a, I * a); const C = async D => { _(!0); const B = await W.get(`/api/token/?p=${D}&size=${a}`), { success: k, message: J, data: Q } = B.data; if (k) if (D === 0) w(Q); else { let ce = [...h]; ce.splice(D * a, Q.length, ...Q), w(ce) } else b(J); _(!1) }, P = async () => { await C(I - 1) }, j = async D => { await nt(D) ? ie(n("已复制到剪贴板！")) : De.error({ title: n("无法复制到剪贴板，请手动复制"), content: D, size: "large" }) }, R = async (D, B, k) => { let J = localStorage.getItem("status"), Q = ""; J && (J = JSON.parse(J), Q = J.server_address), Q === "" && (Q = window.location.origin); let ce = encodeURIComponent(Q); B = B.replaceAll("{address}", ce), B = B.replaceAll("{key}", "sk-" + k.key), window.open(B, "_blank") }; i.useEffect(() => { C(0).then().catch(D => { b(D) }) }, [a]); const v = D => { let B = [...h]; if (D != null) { let k = B.findIndex(J => J.key === D); k > -1 && (B.splice(k, 1), w(B)) } }, l = async (D, B, k) => { _(!0); let J = { id: D }, Q; switch (B) { case "delete": Q = await W.delete(`/api/token/${D}/`); break; case "enable": J.status = 1, Q = await W.put("/api/token/?status_only=true", J); break; case "disable": J.status = 2, Q = await W.put("/api/token/?status_only=true", J); break }const { success: ce, message: pe } = Q.data; if (ce) { ie("操作成功完成！"); let ge = Q.data.data, xe = [...h]; B === "delete" || (k.status = ge.status), w(xe) } else b(pe); _(!1) }, f = async () => { if (H === "" && Z === "") { await C(0), T(1); return } Y(!0); const D = await W.get(`/api/token/search?keyword=${H}&token=${Z}`), { success: B, message: k, data: J } = D.data; B ? (w(J), T(1)) : b(k), Y(!1) }, y = async D => { ae(D.trim()) }, x = async D => { O(D.trim()) }, S = D => { T(D), D === Math.ceil(h.length / a) + 1 && C(D - 1).then(B => { }) }, X = { onSelect: (D, B) => { }, onSelectAll: (D, B) => { }, onChange: (D, B) => { p(B) } }, te = (D, B) => D.status !== 1 ? { style: { background: "var(--semi-color-disabled-border)" } } : {}; return e.jsxs(e.Fragment, {
    children: [e.jsx(wr, { refresh: P, editingToken: N, visiable: o, handleClose: q }), e.jsxs(M, { layout: "horizontal", style: { marginTop: 10 }, labelPosition: "left", children: [e.jsx(M.Input, { field: "keyword", label: n("搜索关键字"), placeholder: n("令牌名称"), value: H, loading: A, onChange: y }), e.jsx(M.Input, { field: "token", label: n("密钥"), placeholder: n("密钥"), value: Z, loading: A, onChange: x }), e.jsx($, { label: n("查询"), type: "primary", htmlType: "submit", className: "btn-margin-right", onClick: f, style: { marginRight: 8 }, children: n("查询") })] }), e.jsx(Ct, { style: { margin: "15px 0" } }), e.jsxs("div", {
      children: [e.jsx($, { theme: "light", type: "primary", style: { marginRight: 8 }, onClick: () => { U({ id: void 0 }), c(!0) }, children: n("添加令牌") }), e.jsx($, {
        label: n("复制所选令牌"), type: "warning", onClick: async () => {
          if (g.length === 0) { b(n("请至少选择一个令牌！")); return } let D = ""; for (let B = 0; B < g.length; B++)D += g[B].name + "    sk-" + g[B].key + `
`; await j(D)
        }, children: n("复制所选令牌到剪贴板")
      })]
    }), e.jsx(ft, { style: { marginTop: 20 }, columns: s, dataSource: V, pagination: { currentPage: I, pageSize: a, total: m, showSizeChanger: !0, pageSizeOptions: [10, 20, 50, 100], formatPageText: D => n("第 {{start}} - {{end}} 条，共 {{total}} 条", { start: D.currentStart, end: D.currentEnd, total: h.length }), onPageSizeChange: D => { r(D), T(1) }, onPageChange: S }, loading: E, rowSelection: X, onRow: te })]
  })
}, vr = () => { const { t: n } = Ce(); return e.jsx(e.Fragment, { children: e.jsxs(Fe, { children: [e.jsx(Fe.Header, { children: e.jsx(Ge, { type: "warning", description: n("令牌无法精确控制使用额度，只允许自用，请勿直接将令牌分发给他人。") }) }), e.jsx(Fe.Content, { children: e.jsx(Ar, {}) })] }) }) }, Br = n => {
  const { t: u } = Ce(), s = n.editingRedemption.id !== void 0, [a, r] = i.useState(s); as(), it(); const o = { name: "", quota: 1e5, count: 1 }, [c, h] = i.useState(o), { name: F, quota: g, count: p } = c, m = () => { n.handleClose() }, d = (I, T) => { h(H => ({ ...H, [I]: T })) }, E = async () => { r(!0); let I = await W.get(`/api/redemption/${n.editingRedemption.id}`); const { success: T, message: H, data: ae } = I.data; T ? h(ae) : b(H), r(!1) }; i.useEffect(() => { s ? E().then(() => { }) : h(o) }, [n.editingRedemption.id]); const _ = async () => {
    let I = c.name; !s && c.name === "" && (I = ve(g)), r(!0); let T = c; T.count = parseInt(T.count), T.quota = parseInt(T.quota), T.name = I; let H; s ? H = await W.put("/api/redemption/", { ...T, id: parseInt(n.editingRedemption.id) }) : H = await W.post("/api/redemption/", { ...T }); const { success: ae, message: Z, data: O } = H.data; if (ae ? s ? (ie(u("兑换码更新成功！")), n.refresh(), n.handleClose()) : (ie(u("兑换码创建成功！")), h(o), n.refresh(), n.handleClose()) : b(Z), !s && O) {
      let A = ""; for (let Y = 0; Y < O.length; Y++)A += O[Y] + `
`; De.confirm({ title: u("兑换码创建成功"), content: e.jsxs("div", { children: [e.jsx("p", { children: u("兑换码创建成功，是否下载兑换码？") }), e.jsx("p", { children: u("兑换码将以文本文件的形式下载，文件名为兑换码的名称。") })] }), onOk: () => { ka(A, `${c.name}.txt`) } })
    } r(!1)
  }; return e.jsx(e.Fragment, { children: e.jsx(qt, { placement: s ? "right" : "left", title: e.jsx(jt, { level: 3, children: u(s ? "更新兑换码信息" : "创建新的兑换码") }), headerStyle: { borderBottom: "1px solid var(--semi-color-border)" }, bodyStyle: { borderBottom: "1px solid var(--semi-color-border)" }, visible: n.visiable, footer: e.jsx("div", { style: { display: "flex", justifyContent: "flex-end" }, children: e.jsxs(ye, { children: [e.jsx($, { theme: "solid", size: "large", onClick: _, children: u("提交") }), e.jsx($, { theme: "solid", size: "large", type: "tertiary", onClick: m, children: u("取消") })] }) }), closeIcon: null, onCancel: () => m(), width: ut() ? "100%" : 600, children: e.jsxs(Me, { spinning: a, children: [e.jsx(he, { style: { marginTop: 20 }, label: u("名称"), name: "name", placeholder: u("请输入名称"), onChange: I => d("name", I), value: F, autoComplete: "new-password", required: !s }), e.jsx(He, {}), e.jsx("div", { style: { marginTop: 20 }, children: e.jsx(ne.Text, { children: u("额度") + Zt(g) }) }), e.jsx(Wn, { style: { marginTop: 8 }, name: "quota", placeholder: u("请输入额度"), onChange: I => d("quota", I), value: g, autoComplete: "new-password", type: "number", position: "bottom", data: [{ value: 5e5, label: "1$" }, { value: 5e6, label: "10$" }, { value: 25e6, label: "50$" }, { value: 5e7, label: "100$" }, { value: 25e7, label: "500$" }, { value: 5e8, label: "1000$" }] }), !s && e.jsxs(e.Fragment, { children: [e.jsx(He, {}), e.jsx(ne.Text, { children: u("生成数量") }), e.jsx(he, { style: { marginTop: 8 }, label: u("生成数量"), name: "count", placeholder: u("请输入生成数量"), onChange: I => d("count", I), value: p, autoComplete: "new-password", type: "number" })] })] }) }) })
}; function Sr(n) { return e.jsx(e.Fragment, { children: Xe(n) }) } const kr = () => {
  const { t: n } = Ce(), u = x => { switch (x) { case 1: return e.jsx(K, { color: "green", size: "large", children: n("未使用") }); case 2: return e.jsx(K, { color: "red", size: "large", children: n("已禁用") }); case 3: return e.jsx(K, { color: "grey", size: "large", children: n("已使用") }); default: return e.jsx(K, { color: "black", size: "large", children: n("未知状态") }) } }, s = [{ title: n("ID"), dataIndex: "id" }, { title: n("名称"), dataIndex: "name" }, { title: n("状态"), dataIndex: "status", key: "status", render: (x, S, X) => e.jsx("div", { children: u(x) }) }, { title: n("额度"), dataIndex: "quota", render: (x, S, X) => e.jsx("div", { children: ve(parseInt(x)) }) }, { title: n("创建时间"), dataIndex: "created_time", render: (x, S, X) => e.jsx("div", { children: Sr(x) }) }, { title: n("兑换人ID"), dataIndex: "used_user_id", render: (x, S, X) => e.jsx("div", { children: x === 0 ? n("无") : x }) }, { title: "", dataIndex: "operate", render: (x, S, X) => e.jsxs("div", { children: [e.jsx(Cn, { content: S.key, style: { padding: 20 }, position: "top", children: e.jsx($, { theme: "light", type: "tertiary", style: { marginRight: 1 }, children: n("查看") }) }), e.jsx($, { theme: "light", type: "secondary", style: { marginRight: 1 }, onClick: async te => { await V(S.key) }, children: n("复制") }), e.jsx(Ye, { title: n("确定是否要删除此兑换码？"), content: n("此修改将不可逆"), okType: "danger", position: "left", onConfirm: () => { P(S.id, "delete", S).then(() => { w(S.key) }) }, children: e.jsx($, { theme: "light", type: "danger", style: { marginRight: 1 }, children: n("删除") }) }), S.status === 1 ? e.jsx($, { theme: "light", type: "warning", style: { marginRight: 1 }, onClick: async () => { P(S.id, "disable", S) }, children: n("禁用") }) : e.jsx($, { theme: "light", type: "secondary", style: { marginRight: 1 }, onClick: async () => { P(S.id, "enable", S) }, disabled: S.status === 3, children: n("启用") }), e.jsx($, { theme: "light", type: "tertiary", style: { marginRight: 1 }, onClick: () => { O(S), Y(!0) }, disabled: S.status !== 1, children: n("编辑") })] }) }], [a, r] = i.useState([]), [o, c] = i.useState(!0), [h, F] = i.useState(1), [g, p] = i.useState(""), [m, d] = i.useState(!1), [E, _] = i.useState(_e), [I, T] = i.useState([]), [H, ae] = i.useState(_e), [Z, O] = i.useState({ id: void 0 }), [A, Y] = i.useState(!1), N = () => { Y(!1) }, U = x => { r(x) }, q = async (x, S) => { const X = await W.get(`/api/redemption/?p=${x}&page_size=${S}`), { success: te, message: D, data: B } = X.data; if (te) { const k = B.items; F(B.page), _(B.total), U(k) } else b(D); c(!1) }, w = x => { let S = [...a]; if (x != null) { let X = S.findIndex(te => te.key === x); X > -1 && (S.splice(X, 1), r(S)) } }, V = async x => { await nt(x) ? ie(n("已复制到剪贴板！")) : De.error({ title: n("无法复制到剪贴板，请手动复制"), content: x }) }; i.useEffect(() => { q(0, H).then().catch(x => { b(x) }) }, []); const C = async () => { await q(h - 1, H) }, P = async (x, S, X) => { let te = { id: x }, D; switch (S) { case "delete": D = await W.delete(`/api/redemption/${x}/`); break; case "enable": te.status = 1, D = await W.put("/api/redemption/?status_only=true", te); break; case "disable": te.status = 2, D = await W.put("/api/redemption/?status_only=true", te); break }const { success: B, message: k } = D.data; if (B) { ie(n("操作成功完成！")); let J = D.data.data, Q = [...a]; S === "delete" || (X.status = J.status), r(Q) } else b(k) }, j = async (x, S, X) => { if (g === "") { await q(S, X); return } d(!0); const te = await W.get(`/api/redemption/search?keyword=${x}&p=${S}&page_size=${X}`), { success: D, message: B, data: k } = te.data; if (D) { const J = k.items; F(k.page), _(k.total), U(J) } else b(B); d(!1) }, R = async x => { p(x.trim()) }, v = x => { F(x), g === "" ? q(x, H).then() : j(g, x, H).then() }; let l = a; const f = { onSelect: (x, S) => { }, onSelectAll: (x, S) => { }, onChange: (x, S) => { T(S) } }, y = (x, S) => x.status !== 1 ? { style: { background: "var(--semi-color-disabled-border)" } } : {}; return e.jsxs(e.Fragment, {
    children: [e.jsx(Br, { refresh: C, editingRedemption: Z, visiable: A, handleClose: N }), e.jsx(M, { onSubmit: () => { j(g, h, H).then() }, children: e.jsx(M.Input, { label: n("搜索关键字"), field: "keyword", icon: "search", iconPosition: "left", placeholder: n("关键字(id或者名称)"), value: g, loading: m, onChange: R }) }), e.jsx(Ct, { style: { margin: "5px 0 15px 0" } }), e.jsxs("div", {
      children: [e.jsx($, { theme: "light", type: "primary", style: { marginRight: 8 }, onClick: () => { O({ id: void 0 }), Y(!0) }, children: n("添加兑换码") }), e.jsx($, {
        label: n("复制所选兑换码"), type: "warning", onClick: async () => {
          if (I.length === 0) { b(n("请至少选择一个兑换码！")); return } let x = ""; for (let S = 0; S < I.length; S++)x += I[S].name + "    " + I[S].key + `
`; await V(x)
        }, children: n("复制所选兑换码到剪贴板")
      })]
    }), e.jsx(ft, { style: { marginTop: 20 }, columns: s, dataSource: l, pagination: { currentPage: h, pageSize: H, total: E, showSizeChanger: !0, pageSizeOpts: [10, 20, 50, 100], formatPageText: x => n("第 {{start}} - {{end}} 条，共 {{total}} 条", { start: x.currentStart, end: x.currentEnd, total: E }), onPageSizeChange: x => { ae(x), F(1), g === "" ? q(1, x).then() : j(g, 1, x).then() }, onPageChange: v }, loading: o, rowSelection: f, onRow: y })]
  })
}, _r = () => { const { t: n } = Ce(); return e.jsx(e.Fragment, { children: e.jsxs(Fe, { children: [e.jsx(Fe.Header, { children: e.jsx("h3", { children: n("管理兑换码") }) }), e.jsx(Fe.Content, { children: e.jsx(kr, {}) })] }) }) };/*! clipboard-copy. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */var Tr = Mr; function uu() { return new DOMException("The request is not allowed", "NotAllowedError") } async function Ir(n) { if (!navigator.clipboard) throw uu(); return navigator.clipboard.writeText(n) } async function Pr(n) { const u = document.createElement("span"); u.textContent = n, u.style.whiteSpace = "pre", u.style.webkitUserSelect = "auto", u.style.userSelect = "all", document.body.appendChild(u); const s = window.getSelection(), a = window.document.createRange(); s.removeAllRanges(), a.selectNode(u), s.addRange(a); let r = !1; try { r = window.document.execCommand("copy") } finally { s.removeAllRanges(), window.document.body.removeChild(u) } if (!r) throw uu() } async function Mr(n) { try { await Ir(n) } catch (u) { try { await Pr(n) } catch (s) { throw s || u || uu() } } } const Or = ss(Tr), Lr = () => { const [n, u] = i.useState(""), [s, a] = i.useState(null), [r, o] = i.useState([]), [c, h] = i.useState(0), [F, g] = i.useState(0), [p, m] = i.useState(0), [d, E] = i.useState([]), [_, I] = i.useState(null), [T, H] = i.useState(null), ae = U => { Or(U), Te("Address has been Copied") }; let Z = ""; const O = U => { const [q, w] = n.split(" / "); h(U.target.value); const V = r.find(C => C.currency === q && C.network === w); V !== void 0 && m(V.conversion_rate * U.target.value) }, A = U => { const q = setInterval(async () => { try { const w = Math.floor(Date.now() / 1e3), V = U - w; V <= 0 ? (clearInterval(q), H(0)) : H(V) } catch (w) { console.error("Error fetching redirect URL:", w) } }, 1e3) }, Y = U => { const q = Math.floor(U / 60), w = U % 60; return `${q}m ${w}s` }, N = () => { if (p > F) { const [U, q] = n.split(" / "), w = r.find(V => V.currency === U && V.network === q); w !== void 0 && W.post("/api/user/createtransaction", { currency: w.currency, network: w.network, amount: String(c) }).then(V => { I(V.data), a(V.data.uuid), console.log("data", V.data); const C = V.data.created_at + V.data.lifetime; A(C) }).catch(V => { b(V.response.data.message) }) } else b("Amount is very low") }; return i.useEffect(() => { (async () => { try { const q = await W.get("/api/user/getcurrencies"); o(q.data); const w = q.data.map(V => V.currency + " / " + V.network); E(w), u(d[0]) } catch (q) { console.error("Error fetching currencies:", q) } })() }, []), i.useEffect(() => { if (s) { const q = setInterval(async () => { try { const w = await W.get(`/api/transaction-status/${s}`); console.log(w), w.data.status == "success" && (window.location.href = w.data.redirect_url) } catch (w) { console.error("Error checking transaction status:", w) } }, 3e3); return () => clearInterval(q) } }, [s]), i.useEffect(() => { if (n != null) { const [U, q] = n.split(" / "), w = r.find(V => V.currency === U && V.network === q); w !== void 0 && (g(w.min_amount), m(w.conversion_rate * c)) } d.find(U => U == n) ? Z = n : u(Z) }, [n]), i.useEffect(() => { h(Math.max(0, c)) }, [c]), e.jsxs("div", { className: "flex", children: [e.jsx("div", { className: "md:mt-0 md:w-1/2 text-sm bg-white text-black", children: e.jsx("div", { className: "border-0", children: e.jsxs("div", { className: "px-4 py-4", children: [e.jsxs("div", { className: "w-full text-sm", children: [e.jsxs("div", { className: "flex justify-between px-0 py-0 my-2", children: [e.jsx("p", { children: "Crypto currencies" }), e.jsx("p", { children: "Input Amount (USD)" })] }), e.jsxs("div", { className: "flex", children: [e.jsx("div", { className: "w-1/2", children: e.jsxs("select", { value: n, onChange: U => u(U.target.value), className: "w-full border border-gray-300 rounded text-sm p-2 bg-white text-black", children: [e.jsx("option", { value: "", disabled: !0, children: "Select" }), d.map(U => e.jsx("option", { value: U, children: U }, U))] }) }), e.jsx("div", { className: "w-1/2 ml-5", children: e.jsx("input", { type: "number", value: c, onChange: O, className: "w-full border border-gray-300 rounded text-sm p-2 bg-white text-black" }) })] })] }), e.jsxs("div", { className: "w-full text-sm mt-4", children: [e.jsxs("div", { className: "flex justify-between px-0 py-0 my-2", children: [e.jsx("p", { children: "Min Amount (Coin)" }), e.jsx("p", { children: "Estimated Amount (Coin)" })] }), e.jsxs("div", { className: "flex", children: [e.jsx("div", { className: "w-1/2", children: e.jsx("input", { type: "number", value: F, readOnly: !0, className: "w-full border border-gray-300 rounded text-sm p-2 bg-gray-100 text-black" }) }), e.jsx("div", { className: "w-1/2 ml-5", children: e.jsx("input", { type: "number", value: p, readOnly: !0, className: "w-full border border-gray-300 rounded text-sm p-2 bg-gray-100 text-black" }) })] })] }), e.jsxs("div", { className: "mt-10 px-4 py-4", children: [e.jsx("p", { className: "text-lg font-semibold", children: "Guide" }), e.jsxs("p", { className: "text-sm py-1", children: [e.jsx("i", { className: "mdi mdi-check" }), " Please sends coins with the transfer information."] }), e.jsxs("p", { className: "text-sm py-1", children: [e.jsx("i", { className: "mdi mdi-check" }), " After sends coins, system will processes and exchanges them, and settles the payment to your balance."] })] }), e.jsx("div", { className: "flex mt-4", children: e.jsx("div", { className: "w-1/2 flex justify-center items-end", children: e.jsx("button", { onClick: N, className: "bg-black text-white mt-2 text-xs shadow-lg px-4 py-2 rounded", children: "Create Transaction" }) }) })] }) }) }), e.jsx("div", { className: "md:mt-0 md:w-1/2 text-sm bg-white text-black", children: _ !== null && e.jsx("div", { className: "px-2", children: e.jsx("div", { className: "px-4 py-4", children: e.jsxs("div", { className: "flex flex-col", children: [e.jsxs("div", { className: "w-full", children: [e.jsx("p", { className: "text-lg font-semibold", children: "Transaction Information" }), e.jsxs("div", { className: "text-sm", children: [e.jsxs("p", { className: "py-1", children: ["Price: ", _ == null ? void 0 : _.amount, " ", _ == null ? void 0 : _.currency] }), e.jsxs("p", { className: "py-1", children: ["Amount: ", _ == null ? void 0 : _.pay_amount, " ", _ == null ? void 0 : _.pay_currency] }), e.jsxs("div", { className: "py-1 flex items-center", children: ["Address:", e.jsx("span", { children: _ == null ? void 0 : _.address }), e.jsx("button", { onClick: () => ae(_ == null ? void 0 : _.address), className: "ml-2", children: e.jsx("i", { class: "fas fa-copy" }) })] }), T !== null && e.jsxs("p", { className: "py-1", children: ["Time Left: ", T > 0 ? Y(T) : "Expired"] })] })] }), e.jsx("img", { src: _ == null ? void 0 : _.qrCode, className: "w-1/2 qr", alt: "QR Code" })] }) }) }) })] }) }, $e = []; for (let n = 0; n < 256; ++n)$e.push((n + 256).toString(16).slice(1)); function Rr(n, u = 0) { return ($e[n[u + 0]] + $e[n[u + 1]] + $e[n[u + 2]] + $e[n[u + 3]] + "-" + $e[n[u + 4]] + $e[n[u + 5]] + "-" + $e[n[u + 6]] + $e[n[u + 7]] + "-" + $e[n[u + 8]] + $e[n[u + 9]] + "-" + $e[n[u + 10]] + $e[n[u + 11]] + $e[n[u + 12]] + $e[n[u + 13]] + $e[n[u + 14]] + $e[n[u + 15]]).toLowerCase() } let Mn; const Nr = new Uint8Array(16); function $r() { if (!Mn) { if (typeof crypto > "u" || !crypto.getRandomValues) throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported"); Mn = crypto.getRandomValues.bind(crypto) } return Mn(Nr) } const Ur = typeof crypto < "u" && crypto.randomUUID && crypto.randomUUID.bind(crypto), bu = { randomUUID: Ur }; function ju(n, u, s) { var r; if (bu.randomUUID && !n) return bu.randomUUID(); n = n || {}; const a = n.random ?? ((r = n.rng) == null ? void 0 : r.call(n)) ?? $r(); if (a.length < 16) throw new Error("Random bytes length must be >= 16"); return a[6] = a[6] & 15 | 64, a[8] = a[8] & 63 | 128, Rr(a) } const zr = async n => { try { return (await W.post("/api/user/intent/create", n)).data } catch (u) { throw console.error("Error creating payment intent:", u), u } }; var yt, Vt, Cs, bn, Es = -1, tn = function (n) { addEventListener("pageshow", function (u) { u.persisted && (Es = u.timeStamp, n(u)) }, !0) }, bs = function () { return window.performance && performance.getEntriesByType && performance.getEntriesByType("navigation")[0] }, su = function () { var n = bs(); return n && n.activationStart || 0 }, Et = function (n, u) { var s = bs(), a = "navigate"; return Es >= 0 ? a = "back-forward-cache" : s && (document.prerendering || su() > 0 ? a = "prerender" : document.wasDiscarded ? a = "restore" : s.type && (a = s.type.replace(/_/g, "-"))), { name: n, value: u === void 0 ? -1 : u, rating: "good", delta: 0, entries: [], id: "v3-".concat(Date.now(), "-").concat(Math.floor(8999999999999 * Math.random()) + 1e12), navigationType: a } }, _n = function (n, u, s) { try { if (PerformanceObserver.supportedEntryTypes.includes(n)) { var a = new PerformanceObserver(function (r) { Promise.resolve().then(function () { u(r.getEntries()) }) }); return a.observe(Object.assign({ type: n, buffered: !0 }, s || {})), a } } catch { } }, bt = function (n, u, s, a) { var r, o; return function (c) { u.value >= 0 && (c || a) && ((o = u.value - (r || 0)) || r === void 0) && (r = u.value, u.delta = o, u.rating = function (h, F) { return h > F[1] ? "poor" : h > F[0] ? "needs-improvement" : "good" }(u.value, s), n(u)) } }, au = function (n) { requestAnimationFrame(function () { return requestAnimationFrame(function () { return n() }) }) }, ru = function (n) { var u = function (s) { s.type !== "pagehide" && document.visibilityState !== "hidden" || n(s) }; addEventListener("visibilitychange", u, !0), addEventListener("pagehide", u, !0) }, iu = function (n) { var u = !1; return function (s) { u || (n(s), u = !0) } }, Ot = -1, Du = function () { return document.visibilityState !== "hidden" || document.prerendering ? 1 / 0 : 0 }, jn = function (n) { document.visibilityState === "hidden" && Ot > -1 && (Ot = n.type === "visibilitychange" ? n.timeStamp : 0, Wr()) }, wu = function () { addEventListener("visibilitychange", jn, !0), addEventListener("prerenderingchange", jn, !0) }, Wr = function () { removeEventListener("visibilitychange", jn, !0), removeEventListener("prerenderingchange", jn, !0) }, ou = function () { return Ot < 0 && (Ot = Du(), wu(), tn(function () { setTimeout(function () { Ot = Du(), wu() }, 0) })), { get firstHiddenTime() { return Ot } } }, lu = function (n) { document.prerendering ? addEventListener("prerenderingchange", function () { return n() }, !0) : n() }, Au = [1800, 3e3], qr = function (n, u) { u = u || {}, lu(function () { var s, a = ou(), r = Et("FCP"), o = _n("paint", function (c) { c.forEach(function (h) { h.name === "first-contentful-paint" && (o.disconnect(), h.startTime < a.firstHiddenTime && (r.value = Math.max(h.startTime - su(), 0), r.entries.push(h), s(!0))) }) }); o && (s = bt(n, r, Au, u.reportAllChanges), tn(function (c) { r = Et("FCP"), s = bt(n, r, Au, u.reportAllChanges), au(function () { r.value = performance.now() - c.timeStamp, s(!0) }) })) }) }, vu = [.1, .25], Gr = function (n, u) { u = u || {}, qr(iu(function () { var s, a = Et("CLS", 0), r = 0, o = [], c = function (F) { F.forEach(function (g) { if (!g.hadRecentInput) { var p = o[0], m = o[o.length - 1]; r && g.startTime - m.startTime < 1e3 && g.startTime - p.startTime < 5e3 ? (r += g.value, o.push(g)) : (r = g.value, o = [g]) } }), r > a.value && (a.value = r, a.entries = o, s()) }, h = _n("layout-shift", c); h && (s = bt(n, a, vu, u.reportAllChanges), ru(function () { c(h.takeRecords()), s(!0) }), tn(function () { r = 0, a = Et("CLS", 0), s = bt(n, a, vu, u.reportAllChanges), au(function () { return s() }) }), setTimeout(s, 0)) })) }, Ht = { passive: !0, capture: !0 }, Kr = new Date, Bu = function (n, u) { yt || (yt = u, Vt = n, Cs = new Date, Ds(removeEventListener), js()) }, js = function () { if (Vt >= 0 && Vt < Cs - Kr) { var n = { entryType: "first-input", name: yt.type, target: yt.target, cancelable: yt.cancelable, startTime: yt.timeStamp, processingStart: yt.timeStamp + Vt }; bn.forEach(function (u) { u(n) }), bn = [] } }, Hr = function (n) { if (n.cancelable) { var u = (n.timeStamp > 1e12 ? new Date : performance.now()) - n.timeStamp; n.type == "pointerdown" ? function (s, a) { var r = function () { Bu(s, a), c() }, o = function () { c() }, c = function () { removeEventListener("pointerup", r, Ht), removeEventListener("pointercancel", o, Ht) }; addEventListener("pointerup", r, Ht), addEventListener("pointercancel", o, Ht) }(u, n) : Bu(u, n) } }, Ds = function (n) { ["mousedown", "keydown", "touchstart", "pointerdown"].forEach(function (u) { return n(u, Hr, Ht) }) }, Su = [100, 300], Vr = function (n, u) { u = u || {}, lu(function () { var s, a = ou(), r = Et("FID"), o = function (F) { F.startTime < a.firstHiddenTime && (r.value = F.processingStart - F.startTime, r.entries.push(F), s(!0)) }, c = function (F) { F.forEach(o) }, h = _n("first-input", c); s = bt(n, r, Su, u.reportAllChanges), h && ru(iu(function () { c(h.takeRecords()), h.disconnect() })), h && tn(function () { var F; r = Et("FID"), s = bt(n, r, Su, u.reportAllChanges), bn = [], Vt = -1, yt = null, Ds(addEventListener), F = o, bn.push(F), js() }) }) }, ku = [2500, 4e3], On = {}, Jr = function (n, u) { u = u || {}, lu(function () { var s, a = ou(), r = Et("LCP"), o = function (F) { var g = F[F.length - 1]; g && g.startTime < a.firstHiddenTime && (r.value = Math.max(g.startTime - su(), 0), r.entries = [g], s()) }, c = _n("largest-contentful-paint", o); if (c) { s = bt(n, r, ku, u.reportAllChanges); var h = iu(function () { On[r.id] || (o(c.takeRecords()), c.disconnect(), On[r.id] = !0, s(!0)) });["keydown", "click"].forEach(function (F) { addEventListener(F, function () { return setTimeout(h, 0) }, !0) }), ru(h), tn(function (F) { r = Et("LCP"), s = bt(n, r, ku, u.reportAllChanges), au(function () { r.value = performance.now() - F.timeStamp, On[r.id] = !0, s(!0) }) }) } }) }, Qr = Object.defineProperty, Yr = Object.defineProperties, Zr = Object.getOwnPropertyDescriptors, _u = Object.getOwnPropertySymbols, Xr = Object.prototype.hasOwnProperty, ei = Object.prototype.propertyIsEnumerable, Tu = (n, u, s) => u in n ? Qr(n, u, { enumerable: !0, configurable: !0, writable: !0, value: s }) : n[u] = s, lt = (n, u) => { for (var s in u || (u = {})) Xr.call(u, s) && Tu(n, s, u[s]); if (_u) for (var s of _u(u)) ei.call(u, s) && Tu(n, s, u[s]); return n }, Ln = (n, u) => Yr(n, Zr(u)), ws = (n, u, s) => new Promise((a, r) => { var o = F => { try { h(s.next(F)) } catch (g) { r(g) } }, c = F => { try { h(s.throw(F)) } catch (g) { r(g) } }, h = F => F.done ? a(F.value) : Promise.resolve(F.value).then(o, c); h((s = s.apply(n, u)).next()) }), As = (n => (n.android = "android", n.ios = "ios", n.windows = "windows", n.macos = "macos", n.linux = "linux", n.other = "other", n))(As || {}), vt = (n => (n.production = "prod", n.demo = "demo", n.staging = "staging", n))(vt || {}), St = "airTracker_unknown", ti = { appName: St, appVersion: St, env: "staging", isWebappContainer: !1, delay: 2e3, errorRepeatTime: 3, enableErrorMonitoring: !1, enableWebVitals: !1, assetSpeedMonitoringWhiteList: [], enableDetectPageChange: !1, assetSpeedMonitoringWhiteListByMFE: {} }, ni = { appName: St, env: "staging", sessionId: St, deviceId: St, platform: "other" }, ui = n => !n || /^\s*$/.test(n) ? !1 : (n = n.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@"), n = n.replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]"), n = n.replace(/(?:^|:|,)(?:\s*\[)+/g, ""), /^[\],:{}\s]*$/.test(n)), Iu = () => {
  const n = new WeakSet; return (u, s) => {
    if (s instanceof Error) return `Error.message: ${s.message} 
  Error.stack: ${s.stack}`; if (typeof s == "object" && s !== null) { if (n.has(s)) return `[Circular ${u || "root"}]`; n.add(s) } return typeof s == "function" ? "function" : typeof s == "symbol" ? "symbol" : typeof s > "u" ? null : s
  }
}, Jt = n => { if (typeof n == "string") return n; try { return n instanceof Error ? (JSON.stringify(n, Iu()) || "undefined").replace(/"/gim, "") : JSON.stringify(n, Iu()) } catch { return '{"error":"error happen when airTracker stringify"}' } }, si = ({ method: n = "post", url: u, data: s, success: a, fail: r }) => { if (!ui(s)) return; const o = new XMLHttpRequest; o.addEventListener("readystatechange", () => { o.readyState === 4 && (o.status >= 400 || o.status === 0 ? r == null || r(o.response) : a == null || a(o.response)) }), o.open(n, u), o.setRequestHeader("Content-Type", "application/json"), o.send(s) }, Bt = { onInit: "onInit", onConfigInit: "onConfigInit", onConfigUpdated: "onConfigUpdated", onCommonDataInit: "onCommonDataInit", onCommonUpdated: "onCommonUpdated", onPageChange: "onPageChange", onDestroy: "onDestroy," }, Pu = "AIR_ANALYTICS_DEVICE_ID", ai = n => n == "prod" ? "https://api.airwallex.com/papluginlogs/cors-logs" : n == "demo" ? "https://api-demo.airwallex.com/papluginlogs/cors-logs" : "https://api-staging.airwallex.com/papluginlogs/cors-logs", ri = n => n == "prod" ? "https://api.airwallex.com/papluginlogs/logs" : n == "demo" ? "https://api-demo.airwallex.com/papluginlogs/logs" : "https://api-staging.airwallex.com/papluginlogs/logs", vs = () => "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, u => { const s = Math.random() * 16 | 0; return (u === "x" ? s : s & 3 | 8).toString(16) }), Dn = () => { var n, u; return ((u = (n = location == null ? void 0 : location.pathname) == null ? void 0 : n.split("/")) == null ? void 0 : u[2]) || "unknown" }, ii = () => { try { let n = window.localStorage.getItem(Pu); return n || (n = vs(), window.localStorage.setItem(Pu, n)), n } catch { } }, oi = () => { const n = { android: /\bAndroid\s*([^;]+)/, ios: /\b(iPad|iPhone|iPod)\b.*? OS ([\d_]+)/, windows: /\b(Windows NT)/, macos: /\b(Mac OS)/, linux: /\b(Linux)/i }, u = a => n[a].test(navigator.userAgent), s = Object.keys(n).find(u); return s ? As[s] : "other" }, li = () => /^[a-zA-Z0-9.-]*.airwallex.com$/g.test(window.location.host), ci = () => { var n, u; let s = ""; const a = navigator.userAgent.match(/NetType\/(\w+)/); return a ? [, s] = a : navigator != null && navigator.connection && (s = ((n = navigator == null ? void 0 : navigator.connection) == null ? void 0 : n.effectiveType) || ((u = navigator == null ? void 0 : navigator.connection) == null ? void 0 : u.type)), s || (s = "unknown"), di(s) }, di = n => (n = String(n).toLowerCase(), n.indexOf("4g") >= 0 ? "net4g" : n.indexOf("wifi") >= 0 ? "wifi" : n.indexOf("5g") >= 0 ? "net5g" : n.indexOf("3g") >= 0 ? "net3g" : n.indexOf("2g") >= 0 ? "net2g" : "unknown"), Bs = function () { return typeof window.performance < "u" && typeof window.performance.clearResourceTimings == "function" && typeof window.performance.getEntriesByType == "function" && typeof window.performance.now == "function" }, hi = function () { return typeof window.PerformanceObserver == "function" }, pi = n => typeof n == "string" ? (n.split("?")[0] || "").slice(0, 200) : n, mi = n => typeof n == "string" ? n.split("?")[1] || "" : n, gi = n => typeof n == "string" && n.startsWith("//") ? typeof location < "u" && location.protocol === "https:" : /^https/.test(n), Mu = (n, u) => typeof n == "number" || typeof n == "string" ? n : u ? "" : -1, fi = (n, u) => { var s; let a = !1; if (!u.config.isWebappContainer) return a = Ou(n, u.config.assetSpeedMonitoringWhiteList), a; const r = Dn(); return a || Ou(n, (s = u.config.assetSpeedMonitoringWhiteListByMFE) == null ? void 0 : s[r]) }, Ou = (n, u) => { if (!(u != null && u.length)) return !1; for (let s = 0; s < u.length; s++) { const a = u[s]; if (a instanceof RegExp && a.test(n) || typeof a == "string" && n.includes(a)) return !0 } return !1 }, Fi = n => u => { var s; const r = { commonData: n.config.isWebappContainer ? lt(lt({}, n.commonData || {}), ((s = n.MFECommonDataMap) == null ? void 0 : s[Dn()]) || {}) : n.commonData, data: Array.isArray(u) ? u : [u] }, o = Jt(r), c = { method: "post", url: li() ? ai(n.commonData.env) : ri(n.commonData.env), data: o }; si(c) }, xi = (n, u) => { let s; const a = [], { config: r } = n; return (o, c) => { if (a.push(o), n.lifeCycle.on(Bt.onCommonUpdated, () => { a.length > 0 && (c == null || c(a.splice(0, a.length)), n.lifeCycle.remove(Bt.onCommonUpdated), s && clearTimeout(s)) }), a.length >= u) { c == null || c(a.splice(0, a.length)), s && clearTimeout(s); return } s && clearTimeout(s), s = setTimeout(() => { s = null, a.length > 0 && (c == null || c(a.splice(0, a.length)), n.lifeCycle.remove(Bt.onCommonUpdated)) }, r.delay) } }, yi = n => { const u = {}; return (s, a) => { const r = typeof n.config.errorRepeatTime == "number" ? n.config.errorRepeatTime : 5; if (r === 0) return a == null ? void 0 : a(s); a == null || a(s.filter(o => o.severity == "autoDetectError" ? (u[o.error] = u[o.error] || 0, u[o.error] += 1, !(u[o.error] > r)) : !0)) } }, Lu = () => { }, Ci = n => { if (!n || !n.reduce || !n.length) throw new TypeError("createPipeline need at least one function param"); return n.length === 1 ? (u, s) => { n[0](u, s || Lu) } : n.reduce((u, s) => (a, r = Lu) => u(a, o => s == null ? void 0 : s(o, r))) }, Ei = class { constructor() { this.emit = (n, u) => { if (!this) return; let s = this.eventsList[n], a; if (s != null && s.length) { s = s.slice(); for (let r = 0; r < s.length; r++) { a = s[r]; try { const o = a.callback.apply(this, [u]); if (a.type === 1 && this.remove(n, a.callback), o === !1) break } catch (o) { throw o } } } return this }, this.eventsList = {} } indexOf(n, u) { for (let s = 0; s < n.length; s++)if (n[s].callback === u) return s; return -1 } on(n, u, s = 0) { if (!this) return; let a = this.eventsList[n]; if (a || (this.eventsList[n] = [], a = this.eventsList[n]), this.indexOf(a, u) === -1) { const r = { name: n, type: s || 0, callback: u }; return a.push(r), this } return this } one(n, u) { this.on(n, u, 1) } remove(n, u) { if (!this) return; const s = this.eventsList[n]; if (!s) return null; if (!u) { try { delete this.eventsList[n] } catch { } return null } if (s.length) { const a = this.indexOf(s, u); s.splice(a, 1) } return this } clear() { this.eventsList = {} } }, Tn = class { constructor(n) { this.name = "", this.isInit = !1, this.name = n.name, this.option = n } patch(n) { var u, s; this.isInit || (this.isInit = !0, (s = (u = this.option) == null ? void 0 : u.setUp) == null || s.call(this.option, n)) } uninstall() { var n, u; (u = (n = this.option) == null ? void 0 : n.destroy) == null || u.apply(this), this.isInit = !1 } }, In, Ru = n => {
  const u = `${Jt(n.message) || ""} @ (${Jt(n.filename) || ""}:${n.lineno || 0}:${n.colno || 0})
${Jt(n.error || "")}`; In.normalLogPipeLine({ severity: "autoDetectError", eventName: "windowOnError", extraInfo: { error: u } })
}, Nu = n => { const u = n && Jt(n.reason); In.normalLogPipeLine({ severity: "autoDetectError", eventName: "promiseError", extraInfo: { error: u } }) }, $u = n => { const u = (n == null ? void 0 : n.target) || (n == null ? void 0 : n.srcElement); if (!u) return; const s = (u == null ? void 0 : u.src) || (u == null ? void 0 : u.href), { tagName: a } = u; let r = "unknown"; if (typeof s == "string" && a) { if (window.location.href.indexOf(s) > -1) return; if (/\.js$/.test(s)) r = "script"; else if (/\.css$/.test(s)) r = "css"; else switch (a.toLowerCase()) { case "script": r = "script"; break; case "link": r = "css"; break; case "img": r = "image"; break; case "audio": case "video": r = "media"; break; default: return }In.normalLogPipeLine({ severity: "autoDetectError", eventName: "staticFileLoadError", extraInfo: { staticFileType: r, error: `${a} load fail: ${s}` } }) } }, bi = new Tn({ name: "errorDetectionPlugin", setUp: n => { In = n, window.addEventListener("error", Ru), window.addEventListener("unhandledrejection", Nu), window.document.addEventListener("error", $u, !0) }, destroy: () => { window.removeEventListener("unhandledrejection", Nu), window.document.removeEventListener("error", $u, !0), window.removeEventListener("error", Ru) } }), ji = new Tn({ name: "webVitalsPlugin", setUp: n => ws(void 0, null, function* () { if (!Bs() || !hi()) return; const u = s => { const { name: a, navigationType: r, rating: o, value: c } = s; n.normalLogPipeLine({ severity: "performance", eventName: a, extraInfo: { log: { navigationType: r, rating: o, value: c } } }) }; Gr(u), Vr(u), Jr(u) }) }), Di = ["img", "css", "script", "link", "audio", "video", "iframe"], Rn = "resource", wi = n => { const u = n.name; return { url: pi(u), method: "get", duration: Number(n.duration.toFixed(2)), type: "static", isHttps: gi(u), urlQuery: mi(u), domainLookup: Mu(n.domainLookupEnd - n.domainLookupStart), connectTime: Mu(n.connectEnd - n.connectStart) } }, Nn = (n, u) => { for (let s = 0, a = n.length; s < a; s++) { const r = n[s]; Di.indexOf(r.initiatorType) !== -1 && fi(r.name, u) && u.normalLogPipeLine({ severity: "performance", eventName: "assets_speed", extraInfo: { log: wi(r) } }) } }, $n, pn, Ai = new Tn({ name: "assetsSpeedPlugin", setUp: n => { if (!Bs()) return; let u = 0; window.performance.onresourcetimingbufferfull = () => { u = 0, window.performance.clearResourceTimings() }, typeof window.PerformanceObserver == "function" ? (Nn(window.performance.getEntriesByType(Rn), n), pn = new window.PerformanceObserver(s => { Nn(s.getEntries(), n) }), pn.observe({ entryTypes: [Rn] })) : $n = setInterval(() => { const s = window.performance.getEntriesByType(Rn), a = s.slice(u); u = s.length, Nn(a, n) }, 3e3) }, destroy: () => { pn == null || pn.disconnect(), $n && clearInterval($n) } }), mn, vi = new Tn({ name: "onPageChangePlugin", setUp: n => ws(void 0, null, function* () { let u = location == null ? void 0 : location.href; const s = document.querySelector("body"); mn = new MutationObserver(() => { if (location.href !== u) { const r = u; u = location.href, n.normalLogPipeLine({ severity: "autoDetectEvent", eventName: "onPageChange", extraInfo: { prevHref: r, href: (location == null ? void 0 : location.href) || "", hostname: location == null ? void 0 : location.hostname, pathName: location == null ? void 0 : location.pathname, protocol: location == null ? void 0 : location.protocol, search: location == null ? void 0 : location.search } }) } }); const a = { subtree: !0, childList: !0 }; mn.observe(s || document, a) }), destroy: () => { mn == null || mn.disconnect() } }), Bi = class { constructor({ config: n, plugins: u = [] }) { this.config = ti, this.lifeCycle = new Ei, this.plugins = [], this._commonData = ni, this._MFECommonDataMap = {}, this.timeMap = {}, this.normalPipelineObj = Ci([xi(this, 8), yi(this), Fi(this)]), this.normalLogPipeLine = ({ severity: s, eventName: a, extraInfo: r }) => { const o = lt({ severity: s, eventName: a, currentHref: (location == null ? void 0 : location.href) || "unknown href" }, r); return this.config.isWebappContainer && (o.MFEName = Dn()), this.normalPipelineObj(o) }, this.plugins = [...u], this.setConfig(n), this.initCommonData(n), this.lifeCycle.emit(Bt.onInit), n.enableErrorMonitoring && this.plugins.push(bi), n.enableWebVitals && this.plugins.push(ji), (n != null && n.assetSpeedMonitoringWhiteList && n.assetSpeedMonitoringWhiteList.length > 0 || n.isWebappContainer) && this.plugins.push(Ai), n != null && n.enableDetectPageChange && this.plugins.push(vi), this.installPlugins() } installPlugins() { this.plugins.forEach(n => { n.patch(this) }) } get commonData() { return this._commonData } get MFECommonDataMap() { return this._MFECommonDataMap } initCommonData(n) { this._commonData.sessionId = vs(), this._commonData.deviceId = ii() || St, this._commonData.platform = oi(), this._commonData.networkType = ci() || "unknown", this._commonData.env = n.env || this._commonData.env, this._commonData.accountId = n.accountId || St, this._commonData.appVersion = n.appVersion, this._commonData.appName = n.appName, this.lifeCycle.emit(Bt.onCommonDataInit, this.commonData) } updateCommonDataBasedOnConfig(n) { this._commonData.env = n.env || this._commonData.env, this._commonData.appName = n.appName || this._commonData.appName, this._commonData.env = n.env || this._commonData.env, this._commonData.accountId = n.accountId || this._commonData.accountId, this._commonData.appVersion = n.appVersion || this._commonData.appVersion, this.lifeCycle.emit(Bt.onCommonUpdated, this._commonData) } updateCommonData(n) { this._commonData = lt(lt({}, this._commonData), n) } addToMFECommonData({ MFEName: n, MFECommonData: u }) { var s; this.config.isWebappContainer && (!n || !u || (this._MFECommonDataMap = Ln(lt({}, this._MFECommonDataMap || {}), { [n]: lt(lt({}, ((s = this._MFECommonDataMap) == null ? void 0 : s[n]) || {}), u) }))) } setConfig(n) { if (this.config.isWebappContainer) return; const u = (s, a) => { this.config[s] = a }; Object.entries(n).forEach(s => { const [a, r] = s; typeof r !== void 0 && u(a, r) }), this.lifeCycle.emit(Bt.onConfigInit, this.config), this.updateCommonDataBasedOnConfig(n) } info(n, u) { this.normalLogPipeLine({ severity: "info", eventName: n, extraInfo: u }) } warn(n, u) { this.normalLogPipeLine({ severity: "warn", eventName: n, extraInfo: u }) } error(n, u) { this.normalLogPipeLine({ severity: "error", eventName: n, extraInfo: u }) } businessLog(n, u) { this.normalLogPipeLine({ severity: "info", eventName: n, extraInfo: Ln(lt({}, u), { isBusinessLog: !0 }) }) } reportDuration(n, u) { if (typeof n != "string") { console.warn("reportDuration: eventName (first param) must be a string"); return } if (typeof u != "number") { console.warn("reportDuration: duration (second param) must be number"); return } if (u < 0 || u > 6e4) { console.warn("reportDuration: duration (second param) must between 0 and 60000"); return } this.normalLogPipeLine({ severity: "speed", eventName: n, extraInfo: { duration: u } }) } getTimerKey(n) { return this.config.isWebappContainer ? `${Dn()}_${n}` : n } timeStart(n) { if (typeof n != "string") { console.warn("time: first param must be a string"); return } this.timeMap[this.getTimerKey(n)] && console.warn(`Timer ${n} already exists`), this.timeMap[this.getTimerKey(n)] = Date.now() } timeEnd(n, u) { if (typeof n != "string") { console.warn("timeEnd: first param must be a string"); return } if (this.timeMap[this.getTimerKey(n)]) { const s = Date.now() - this.timeMap[this.getTimerKey(n)] + (u || 0); this.normalLogPipeLine({ severity: "speed", eventName: n, extraInfo: { duration: s } }), delete this.timeMap[this.getTimerKey(n)] } else console.warn(`Timer key :${n} does not exist`) } addToAssetSpeedWhiteListByMFE({ MFEName: n, whiteList: u }) { var s, a, r; this.config.isWebappContainer && (!n || !(u != null && u.length) || (this.config.assetSpeedMonitoringWhiteListByMFE || (this.config.assetSpeedMonitoringWhiteListByMFE = {}), (s = this.config.assetSpeedMonitoringWhiteListByMFE) != null && s[n] ? (r = (a = this.config.assetSpeedMonitoringWhiteListByMFE) == null ? void 0 : a[n]) == null || r.push(...u) : this.config.assetSpeedMonitoringWhiteListByMFE = Ln(lt({}, this.config.assetSpeedMonitoringWhiteListByMFE), { [n]: u }))) } destroy() { this.config.isWebappContainer || this.plugins.forEach(n => { n.uninstall() }) } }, Si = Bi, st = function () { return st = Object.assign || function (u) { for (var s, a = 1, r = arguments.length; a < r; a++) { s = arguments[a]; for (var o in s) Object.prototype.hasOwnProperty.call(s, o) && (u[o] = s[o]) } return u }, st.apply(this, arguments) }; function wn(n, u, s, a) { function r(o) { return o instanceof s ? o : new s(function (c) { c(o) }) } return new (s || (s = Promise))(function (o, c) { function h(p) { try { g(a.next(p)) } catch (m) { c(m) } } function F(p) { try { g(a.throw(p)) } catch (m) { c(m) } } function g(p) { p.done ? o(p.value) : r(p.value).then(h, F) } g((a = a.apply(n, [])).next()) }) } function An(n, u) { var s = { label: 0, sent: function () { if (o[0] & 1) throw o[1]; return o[1] }, trys: [], ops: [] }, a, r, o, c; return c = { next: h(0), throw: h(1), return: h(2) }, typeof Symbol == "function" && (c[Symbol.iterator] = function () { return this }), c; function h(g) { return function (p) { return F([g, p]) } } function F(g) { if (a) throw new TypeError("Generator is already executing."); for (; c && (c = 0, g[0] && (s = 0)), s;)try { if (a = 1, r && (o = g[0] & 2 ? r.return : g[0] ? r.throw || ((o = r.return) && o.call(r), 0) : r.next) && !(o = o.call(r, g[1])).done) return o; switch (r = 0, o && (g = [g[0] & 2, o.value]), g[0]) { case 0: case 1: o = g; break; case 4: return s.label++, { value: g[1], done: !1 }; case 5: s.label++, r = g[1], g = [0]; continue; case 7: g = s.ops.pop(), s.trys.pop(); continue; default: if (o = s.trys, !(o = o.length > 0 && o[o.length - 1]) && (g[0] === 6 || g[0] === 2)) { s = 0; continue } if (g[0] === 3 && (!o || g[1] > o[0] && g[1] < o[3])) { s.label = g[1]; break } if (g[0] === 6 && s.label < o[1]) { s.label = o[1], o = g; break } if (o && s.label < o[2]) { s.label = o[2], s.ops.push(g); break } o[2] && s.ops.pop(), s.trys.pop(); continue }g = u.call(n, s) } catch (p) { g = [6, p], r = 0 } finally { a = o = 0 } if (g[0] & 5) throw g[1]; return { value: g[0] ? g[1] : void 0, done: !0 } } } function Uu(n, u, s) { for (var a = 0, r = u.length, o; a < r; a++)(o || !(a in u)) && (o || (o = Array.prototype.slice.call(u, 0, a)), o[a] = u[a]); return n.concat(o || Array.prototype.slice.call(u)) } var ki = "@airwallex/components-sdk", _i = "1.17.1", Ti = "./lib/index.js", Ii = "./lib/index.mjs", Pi = "./lib/index.d.ts", Mi = ["lib/**"], Oi = "MIT", Li = { "load-types": "node ./load-types.js && yarn prettier -w src/types/*d.ts", prebuild: "yarn clean", build: "yarn rollup --config", postbuild: "yarn bundle-types", "bundle-types": "dts-bundle-generator -o ./lib/index.d.ts ./src/index.ts", clean: "rm -rf dist lib", lint: 'eslint "src/**/*.ts*"', test: "jest", sonar: "sonar-scanner", release: "semantic-release", "lint-stage": "lint-staged", prepare: "husky" }, Ri = { semi: !0, singleQuote: !0, printWidth: 80, trailingComma: "all" }, Ni = { access: "public" }, $i = { "@babel/preset-typescript": "^7.18.6", "@rollup/plugin-commonjs": "^25.0.7", "@rollup/plugin-json": "^6.1.0", "@rollup/plugin-node-resolve": "^15.2.3", "@rollup/plugin-terser": "^0.4.4", "@rollup/plugin-typescript": "^11.1.6", "@semantic-release/changelog": "^5.0.1", "@semantic-release/commit-analyzer": "^8.0.1", "@semantic-release/git": "^9.0.0", "@semantic-release/gitlab": "^6.1.0", "@semantic-release/release-notes-generator": "^9.0.0", "@swc/core": "^1.3.46", "@types/jest": "^29.5.0", "@typescript-eslint/eslint-plugin": "^5.57.0", "@typescript-eslint/parser": "^5.57.0", "dts-bundle-generator": "^9.0.0", eslint: "^7.23.0", "eslint-config-prettier": "^8.3.0", "eslint-plugin-prettier": "^5.1.3", husky: "^9.0.11", jest: "^29.5.0", "jest-environment-jsdom": "^29.5.0", "lint-staged": "^15.2.7", prettier: "^3.3.2", rollup: "^4.9.6", "semantic-release": "^17.3.8", "sonarqube-scanner": "^3.0.1", "ts-jest": "^29.0.5", "ts-loader": "^9.5.1", tslib: "^2.6.2", typescript: "^4.5.2" }, Ui = { "@airwallex/airtracker": "1.2.0" }, zi = { name: ki, version: _i, main: Ti, module: Ii, types: Pi, files: Mi, license: Oi, scripts: Li, prettier: Ri, "lint-staged": { "src/**/*.{ts,tsx}": ["yarn lint"], "src/**/*.{js,jsx,ts,tsx,json,css,scss,md}": "prettier --write" }, publishConfig: Ni, devDependencies: $i, dependencies: Ui }, Wi = { dev: vt.staging, staging: vt.staging, demo: vt.demo, prod: vt.production }, qi = function (n, u) { return n === void 0 && (n = vt.production), window._AirwallexSDKs.airTracker || (window._AirwallexSDKs.airTracker = new Si({ config: { appName: "components-sdk", appVersion: zi.version, env: Wi[n] || vt.production } }), window._AirwallexSDKs.airTracker.updateCommonData({ clientId: u })), window._AirwallexSDKs.airTracker }, Ss = function (n) { if (typeof n != "object") return n; try { var u = JSON.parse(JSON.stringify(n)); return Object.keys(u).forEach(function (s) { typeof s == "string" && ["auth", "code"].some(function (a) { return s.includes(a) }) && (u[s] = "***") }), u } catch { return n } }, en = function (n, u) { var s, a; (a = (s = window._AirwallexSDKs) === null || s === void 0 ? void 0 : s.airTracker) === null || a === void 0 || a.error(n, st(st({}, u), { context: "components-sdk" })) }, Gi = function (n, u) { var s; (s = window._AirwallexSDKs.airTracker) === null || s === void 0 || s.warn(n, st(st({}, u), { context: "components-sdk" })) }, cu = function (n, u) { var s; (s = window._AirwallexSDKs.airTracker) === null || s === void 0 || s.info(n, st(st({}, u), { context: "components-sdk" })) }, Pt, Mt, qe; (function (n) { n.dev = "dev", n.staging = "staging", n.demo = "demo", n.prod = "prod" })(qe || (qe = {})); var Ki = (Pt = {}, Pt[qe.dev] = "https://checkout-staging.airwallex.com", Pt[qe.staging] = "https://checkout-staging.airwallex.com", Pt[qe.demo] = "https://checkout-demo.airwallex.com", Pt[qe.prod] = "https://checkout.airwallex.com", Pt), Hi = (Mt = {}, Mt[qe.dev] = "https://static-staging.airwallex.com", Mt[qe.staging] = "https://static-staging.airwallex.com", Mt[qe.demo] = "https://static-demo.airwallex.com", Mt[qe.prod] = "https://static.airwallex.com", Mt), ks = "sdkController", Vi = { kyc: "/widgets/kyc/sdk/v1/index.js", rfi: "/widgets/kycRfi/sdk/v1/index.js", paymentsKyb: "/widgets/paymentsKyb/sdk/v1/index.js", sdkController: "/widgets/sdk-controller/sdk/v1/index.js", payouts: "/widgets/payouts/sdk/v1/index.js", payments: "/assets/elements.bundle.min.js", sca: "/hosted-sca/sdk/v1/index.js", taxForm: "/widgets/taxForm/sdk/v1/index.js" }, Ji = { kyc: "kyc", paymentsKyb: "paymentsKyb", kycRfi: "rfi", transactionRfi: "rfi", paymentEnablementRfi: "rfi", payoutForm: "payouts", beneficiaryForm: "payouts", hpp: "payments", cvc: "payments", card: "payments", expiry: "payments", dropIn: "payments", cardNumber: "payments", applePayButton: "payments", googlePayButton: "payments", scaSetup: "sca", scaVerify: "sca", scaManagement: "sca", taxForm: "taxForm" }, _s = { payments: ["hpp", "cvc", "card", "expiry", "dropIn", "cardNumber", "applePayButton", "googlePayButton"], payouts: ["payoutForm", "beneficiaryForm"], onboarding: ["kyc", "paymentsKyb"], risk: ["scaSetup", "scaVerify", "scaManagement", "transactionRfi", "kycRfi", "paymentEnablementRfi"] }, Ts = ["payments", "sca"], Qi = Date.now(), Yi = function (n) { return Object.keys(_s).includes(n) }, Zi = function (n) { return n === void 0 && (n = 500), new Promise(function (u) { return window.setTimeout(u, n) }) }, Is = function (n) { return Ji[n] }, Xi = function (n, u) { var s = n === "payments" ? Ki : Hi; return s[u] || s.prod }, Ps = function (n) { var u = n.reduce(function (s, a) { return s.concat(Yi(a) ? _s[a] : a) }, []); return Array.from(new Set(u)).map(function (s) { return { elementName: s, sdkName: Is(s) } }) }, eo = function (n) { return Array.from(new Set(Ps(n).map(function (u) { var s = u.sdkName; return s }).filter(function (u) { return Ts.includes(u) }))) }, Hn = function (n) { return n === "payments" ? "payment" : n }, Ms = function (n) { var u = n.name, s = n.env, a = s === void 0 ? qe.prod : s, r = Xi(u, a), o = Vi[u]; if (!o) throw en("[components-sdk] Element static resource not found", { elementName: u }), new Error("Element ".concat(u, " static resource URL is invalid.")); return "".concat(r).concat(o, "?ts=").concat(Qi) }, to = function () { return Ts.reduce(function (n, u) { var s; return st(st({}, n), (s = {}, s[u] = window._AirwallexSDKs.__controller__.internalSDKs[u], s)) }, {}) }, Ut = function () { return Math.floor(performance.now()) }, no = function (n) { var u = document.createElement("script"); u.src = n, u.type = "module"; var s = document.head || document.body; return s.appendChild(u), u }, uo = 3, so = function (n) { return wn(void 0, void 0, void 0, function () { var u, s; return An(this, function (a) { switch (a.label) { case 0: if (typeof window > "u") throw new Error("Please load script in browser environment"); u = 0, s = function () { return wn(void 0, void 0, void 0, function () { var r, o; return An(this, function (c) { return r = Ut(), o = no(n), [2, new Promise(function (h, F) { o.addEventListener("load", function () { var g = Ut(); cu("[components-sdk] SDK script loaded", { scriptUrl: n, start: r, latency: g - r, end: g }), h(!0) }), o.addEventListener("error", function (g) { o.remove(), console.error(g); var p = Ut(); en("[components-sdk] Failed to load script", { scriptUrl: n, error: g, start: r, latency: p - r, end: p }), F(new Error("Failed to load Airwallex SDK scripts: ".concat(n))) }) })] }) }) }, a.label = 1; case 1: if (!(u < uo)) return [3, 7]; a.label = 2; case 2: return a.trys.push([2, 4, , 6]), [4, s()]; case 3: return [2, a.sent()]; case 4: return a.sent(), u++, [4, Zi()]; case 5: return a.sent(), [3, 6]; case 6: return [3, 1]; case 7: throw en("[components-sdk] Failed to load script after retry", { scriptUrl: n }), new Error("Failed to load Airwallex SDK scripts: ".concat(n)) } }) }) }, vn, zu = new Map, yn = function (n) { var u = n.env, s = n.scriptName, a = Ms({ name: s, env: u }), r = zu.get(s); if (r) return r; var o = so(a); return zu.set(s, o), o }, Os = function (n) { return wn(void 0, void 0, void 0, function () { return An(this, function (u) { if (typeof window > "u") throw new Error("Please call init function in browser environment"); return qi(n.env, n.clientId), vn = new Promise(function (s, a) { var r, o = st(st({}, n), { env: n.env && qe[n.env] ? n.env : qe.prod }); window.AirwallexComponentsSDK.__env__ = o.env; var c = yn({ env: o.env, scriptName: ks }).then(function () { return window._AirwallexSDKs.__controller__.init(o) }), h = (r = n.enabledElements) !== null && r !== void 0 ? r : [], F = eo(h), g = F.map(function (d) { return yn({ env: o.env, scriptName: d }).then(function () { return c }).then(function () { return window._AirwallexSDKs.__controller__.registerFunctions({ functionsNamespace: d, instance: window._AirwallexSDKs[Hn(d)] }) }) }), p = Ps(h), m = p.map(function (d) { var E = d.sdkName, _ = d.elementName; return yn({ scriptName: E, env: o.env }).then(function () { return c }).then(function () { return window._AirwallexSDKs.__controller__.registerElement({ sdkName: E, elementName: _, instance: window._AirwallexSDKs[Hn(E)] }) }) }); Promise.all(Uu(Uu([c], g, !0), m)).then(function () { cu("[components-sdk] SDK initialized", { options: Ss(n), start: Ut() }), s(to()) }).catch(function (d) { d.code || en("[components-sdk] Unexpected errors when init", { error: d }), a(d) }) }), [2, vn] }) }) }, Ls = function (n, u) { return wn(void 0, void 0, void 0, function () { var s, a, r, o, c; return An(this, function (h) { switch (h.label) { case 0: if (!vn) throw Gi("[components-sdk] Did not call init before createElement"), new Error("Please initialize Airwallex SDK before createElement()"); return [4, vn]; case 1: h.sent(), s = Is(n), a = Ut(), h.label = 2; case 2: return h.trys.push([2, 6, , 7]), [4, yn({ scriptName: s, env: window.AirwallexComponentsSDK.__env__ || qe.prod })]; case 3: return h.sent(), [4, window._AirwallexSDKs.__controller__.registerElement({ sdkName: s, elementName: n, instance: window._AirwallexSDKs[Hn(s)] })]; case 4: return h.sent(), [4, window._AirwallexSDKs.__controller__.createElement(n, u)]; case 5: return r = h.sent(), o = Ut(), cu("[components-sdk] SDK createElement being called", { elementName: n, options: Ss(u), start: a, latency: o - a, end: o }), [3, 7]; case 6: if (c = h.sent(), !c.code) en("[components-sdk] Unexpected errors when createElement", { error: c }); else throw c; return [3, 7]; case 7: return [2, r] } }) }) }, ao = [ks], Wu = function () { ao.forEach(function (n) { var u = Ms({ name: n, env: qe.prod }), s = document.createElement("link"); s.href = u, s.rel = "modulepreload", s.as = "script"; var a = document.head || document.body; a.appendChild(s) }) }; document.readyState === "loading" ? document.addEventListener("DOMContentLoaded", Wu) : Wu(); typeof window < "u" && (Object.defineProperties(window, { AirwallexComponentsSDK: { value: {}, writable: !1 }, _AirwallexSDKs: { value: {}, writable: !1 } }), window.AirwallexComponentsSDK.init = Os, window.AirwallexComponentsSDK.createElement = Ls); const ro = () => { const [n, u] = i.useState(""), [s, a] = i.useState(!1), [r, o] = i.useState(!1), c = it(); return i.useEffect(() => { (async () => { try { const F = await W.get("/api/option/"), { success: g, data: p } = F.data; if (g) { const m = p.find(d => d.key === "LiveAirwallex"); o((m == null ? void 0 : m.value) === "true") } } catch (F) { console.error("Failed to fetch Airwallex environment setting", F) } })() }, []), i.useEffect(() => { s && n && (async () => { var F, g; try { const p = r ? "production" : "demo"; console.log("env", p), await Os({ env: p, enabledElements: ["payments"] }); const m = parseFloat(n); if (!m || m <= 0) return; const d = await zr({ request_id: ju(), merchant_order_id: ju(), amount: m, currency: "USD", order: { products: [{ url: "https://via.placeholder.com/503x570", name: "Charge", desc: "For charge", unit_price: m, currency: "USD", quantity: 1 }] } }), { id: E, client_secret: _, currency: I } = d, T = await Ls("dropIn", { intent_id: E, client_secret: _, currency: I, style: { popupWidth: 400, popupHeight: 549 } }); T == null || T.mount("dropIn"); const H = Z => { console.log(`Confirm success with ${JSON.stringify(Z.detail)}`), c("/checkout-success") }, ae = Z => { console.error("There is an error", Z.detail.error) }; (F = document.getElementById("dropIn")) == null || F.addEventListener("onSuccess", H), (g = document.getElementById("dropIn")) == null || g.addEventListener("onError", ae) } catch (p) { console.error(p) } })() }, [s, n, c, r]), e.jsxs("div", { children: [e.jsx("div", { style: { marginBottom: "24px", textAlign: "center" }, children: e.jsxs("label", { children: ["Enter Amount (USD):", " ", e.jsx("input", { type: "number", value: n, onChange: h => u(h.target.value), placeholder: "Enter amount", style: { padding: "8px", fontSize: "16px" } })] }) }), e.jsx("div", { style: { textAlign: "center" }, children: e.jsx("button", { onClick: () => a(!0), style: { padding: "10px 20px", fontSize: "16px", cursor: "pointer", backgroundColor: "#4CAF50", color: "white", border: "none", borderRadius: "5px" }, children: "Confirm Payment" }) }), e.jsx("div", { id: "dropIn", style: { width: "540px", margin: "48px auto" } })] }) }, io = () => { const { t: n } = Ce(), [u, s] = i.useState(""), [a, r] = i.useState(""), [o, c] = i.useState(0); i.useState(1); const [h, F] = i.useState(0), [g, p] = i.useState(1), [m, d] = i.useState(""), [E, _] = i.useState(!1), [I, T] = i.useState(0), [H, ae] = i.useState(!1), [Z, O] = i.useState(!1), [A, Y] = i.useState(!1), [N, U] = i.useState(!1), [q, w] = i.useState(""), [V, C] = i.useState(!1), [P, j] = i.useState(!1), R = async () => { if (u === "") { Te(n("请输入兑换码！")); return } ae(!0); try { const Q = await W.post("/api/user/topup", { key: u }), { success: ce, message: pe, data: ge } = Q.data; ce ? (ie(n("兑换成功！")), De.success({ title: n("兑换成功！"), content: n("成功兑换额度：") + ve(ge), centered: !0 }), T(xe => xe + ge), s("")) : b(pe) } catch { b(n("请求失败")) } finally { ae(!1) } }, v = () => { if (!m) { b(n("超级管理员未设置充值链接！")); return } window.open(m, "_blank") }, l = async Q => { if (!E) { b(n("管理员未开启在线充值！")); return } if (await D(), o < g) { b(n("充值数量不能小于") + g); return } w(Q), O(!0) }, f = async () => { Y(!0) }, y = async () => { U(!0) }, x = async () => { try { const Q = await W.get("/api/option/"), { success: ce, message: pe, data: ge } = Q.data; if (ce) { let xe = {}; ge.forEach(Ee => { (Ee.key === "EnabledCryptomus" || Ee.key === "EnabledAirwallex") && (xe[Ee.key] = Ee.value === "true") }), C(xe.EnabledCryptomus || !1), j(xe.EnabledAirwallex || !1) } else b(pe) } catch { b("Error fetching options") } }, S = async () => { if (h === 0 && await D(), o < g) { b("充值数量不能小于" + g); return } O(!1); try { const Q = await W.post("/api/user/pay", { amount: parseInt(o), top_up_code: a, payment_method: q }); if (Q !== void 0) { const { message: ce, data: pe } = Q.data; if (ce === "success") { let ge = pe, xe = Q.data.url, Ee = document.createElement("form"); Ee.action = xe, Ee.method = "POST", navigator.userAgent.indexOf("Safari") > -1 && navigator.userAgent.indexOf("Chrome") < 1 || (Ee.target = "_blank"); for (let G in ge) { let ee = document.createElement("input"); ee.type = "hidden", ee.name = G, ee.value = ge[G], Ee.appendChild(ee) } document.body.appendChild(Ee), Ee.submit(), document.body.removeChild(Ee) } else b(pe) } else b(Q) } catch (Q) { console.log(Q) } finally { } }, X = async () => { let Q = await W.get("/api/user/self"); const { success: ce, message: pe, data: ge } = Q.data; ce ? T(ge.quota) : b(pe) }; i.useEffect(() => { x(); let Q = localStorage.getItem("status"); Q && (Q = JSON.parse(Q), Q.top_up_link && d(Q.top_up_link), Q.min_topup && p(Q.min_topup), Q.enable_online_topup && _(Q.enable_online_topup)), X().then() }, []); const te = () => h + " " + n("元"), D = async Q => { Q === void 0 && (Q = o); try { const ce = await W.post("/api/user/amount", { amount: parseFloat(Q), top_up_code: a }); if (ce !== void 0) { const { message: pe, data: ge } = ce.data; pe === "success" ? F(parseFloat(ge)) : (F(0), rt.error({ content: "错误：" + ge, id: "getAmount" })) } else b(ce) } catch (ce) { console.log(ce) } finally { } }, B = () => { O(!1) }, k = () => { Y(!1) }, J = () => { U(!1) }; return e.jsx("div", { children: e.jsxs(Fe, { children: [e.jsx(Fe.Header, { children: e.jsx("h3", { children: n("我的钱包") }) }), e.jsxs(Fe.Content, { children: [e.jsxs(De, { title: n("确定要充值吗"), visible: Z, onOk: S, onCancel: B, maskClosable: !1, size: "small", centered: !0, children: [e.jsxs("p", { children: [n("充值数量"), "：", o] }), e.jsxs("p", { children: [n("实付金额"), "：", te()] }), e.jsx("p", { children: n("是否确认充值？") })] }), e.jsx(De, { title: "Cryptomus Payment", visible: A, onOk: k, onCancel: k, maskClosable: !1, size: "large", centered: !0, children: e.jsx(Lr, {}) }), e.jsx(De, { title: "Airwallex Payment", visible: N, onOk: J, onCancel: J, maskClosable: !1, size: "large", centered: !0, children: e.jsx(ro, {}) }), e.jsx("div", { style: { marginTop: 20, display: "flex", justifyContent: "center" }, children: e.jsxs(Re, { style: { width: "500px", padding: "20px" }, children: [e.jsxs(jt, { level: 3, style: { textAlign: "center" }, children: [n("余额"), " ", ve(I)] }), e.jsxs("div", { style: { marginTop: 20 }, children: [e.jsx(Ct, { children: n("兑换余额") }), e.jsxs(M, { children: [e.jsx(M.Input, { field: "redemptionCode", label: n("兑换码"), placeholder: n("兑换码"), name: "redemptionCode", value: u, onChange: Q => { s(Q) } }), e.jsxs(ye, { children: [m ? e.jsx($, { type: "primary", theme: "solid", onClick: v, children: n("获取兑换码") }) : null, e.jsx($, { type: "warning", theme: "solid", onClick: R, disabled: H, children: n(H ? "兑换中..." : "兑换") })] })] })] }), e.jsxs("div", { style: { marginTop: 20 }, children: [e.jsx(Ct, { children: n("在线充值") }), e.jsxs(M, { children: [e.jsx(M.Input, { disabled: !E, field: "redemptionCount", label: n("实付金额：") + " " + te(), placeholder: n("充值数量，最低 ") + Ma(g), name: "redemptionCount", type: "number", value: o, onChange: async Q => { Q < 1 && (Q = 1), c(Q), await D(Q) } }), e.jsxs(ye, { children: [e.jsx($, { type: "primary", theme: "solid", onClick: async () => { l("zfb") }, children: n("支付宝") }), e.jsx($, { style: { backgroundColor: "rgba(var(--semi-green-5), 1)" }, type: "primary", theme: "solid", onClick: async () => { l("wx") }, children: n("微信") }), V && e.jsx($, { style: { backgroundColor: "rgba(var(--semi-yellow-5), 1)" }, type: "primary", theme: "solid", onClick: async () => { f() }, children: "Cryptomus" }), P && e.jsx($, { style: { backgroundColor: "rgba(var(--semi-red-5), 1)" }, type: "primary", theme: "solid", onClick: async () => { y() }, children: "AirWallex" })] })] })] })] }) })] })] }) }) }, oo = () => e.jsx("div", { style: { display: "flex", justifyContent: "center", alignItems: "center", height: "100vh", backgroundColor: "#f9f9f9" }, children: e.jsxs(zt, { positive: !0, style: { maxWidth: "500px", textAlign: "center" }, children: [e.jsx(Ea, { name: "check circle", size: "big", color: "green" }), e.jsx(zt.Header, { style: { fontSize: "1.5em", marginBottom: "0.5em" }, children: "付款成功！" }), e.jsx("p", { style: { fontSize: "1.1em", marginBottom: "1em" }, children: "感谢您的付款！我们已收到您的订单。" }), e.jsx(Rt, { color: "green", onClick: () => window.location.href = "/", children: "返回首页" })] }) }); function Un(n) { return (n === void 0 || n === "") && (n = "{}"), JSON.parse(n) } const Gt = kt.createContext({ dispatch: () => null }), lo = ({ children: n }) => { const [u, s] = i.useState({ isMobile: !1, showSider: !1, shouldInnerPadding: !1 }), a = r => { if ("type" in r) switch (r.type) { case "TOGGLE_SIDER": s(o => ({ ...o, showSider: !o.showSider })); break; case "SET_SIDER": s(o => ({ ...o, showSider: r.payload })); break; case "SET_MOBILE": s(o => ({ ...o, isMobile: r.payload })); break; case "SET_INNER_PADDING": s(o => ({ ...o, shouldInnerPadding: r.payload })); break; default: s(o => ({ ...o, ...r })) } else s(o => ({ ...o, ...r })) }; return i.useEffect(() => { const r = () => { a({ type: "SET_MOBILE", payload: ut() }) }; return r(), (() => { const c = window.location.pathname; c === "" || c === "/" || c.includes("/home") || c.includes("/chat") ? (a({ type: "SET_SIDER", payload: !1 }), a({ type: "SET_INNER_PADDING", payload: !1 })) : (a({ type: "SET_SIDER", payload: !0 }), a({ type: "SET_INNER_PADDING", payload: !0 })), ut() && a({ type: "SET_SIDER", payload: !1 }) })(), window.addEventListener("resize", r), () => { window.removeEventListener("resize", r) } }, []), e.jsx(Gt.Provider, { value: [u, a], children: n }) }, { Header: co } = Fe, qu = ["amber", "blue", "cyan", "green", "grey", "indigo", "light-blue", "lime", "orange", "pink", "purple", "red", "teal", "violet", "yellow"], ho = () => { const { t: n } = Ce(); function u(G) { switch (G) { case 1: return e.jsx(K, { color: "cyan", size: "large", children: n("充值") }); case 2: return e.jsx(K, { color: "lime", size: "large", children: n("消费") }); case 3: return e.jsx(K, { color: "orange", size: "large", children: n("管理") }); case 4: return e.jsx(K, { color: "purple", size: "large", children: n("系统") }); default: return e.jsx(K, { color: "black", size: "large", children: n("未知") }) } } function s(G) { return G ? e.jsx(K, { color: "blue", size: "large", children: n("流") }) : e.jsx(K, { color: "purple", size: "large", children: n("非流") }) } function a(G) { const ee = parseInt(G); return ee < 101 ? e.jsxs(K, { color: "green", size: "large", children: [" ", ee, " s", " "] }) : ee < 300 ? e.jsxs(K, { color: "orange", size: "large", children: [" ", ee, " s", " "] }) : e.jsxs(K, { color: "red", size: "large", children: [" ", ee, " s", " "] }) } function r(G) { let ee = parseFloat(G) / 1e3; return ee = ee.toFixed(1), ee < 3 ? e.jsxs(K, { color: "green", size: "large", children: [" ", ee, " s", " "] }) : ee < 10 ? e.jsxs(K, { color: "orange", size: "large", children: [" ", ee, " s", " "] }) : e.jsxs(K, { color: "red", size: "large", children: [" ", ee, " s", " "] }) } const o = [{ title: n("时间"), dataIndex: "timestamp2string" }, { title: n("渠道"), dataIndex: "channel", className: Ve() ? "tableShow" : "tableHiddle", render: (G, ee, me) => w ? ee.type === 0 || ee.type === 2 ? e.jsx("div", { children: e.jsxs(K, { color: qu[parseInt(G) % qu.length], size: "large", children: [" ", G, " "] }) }) : e.jsx(e.Fragment, {}) : e.jsx(e.Fragment, {}) }, { title: n("用户"), dataIndex: "username", className: Ve() ? "tableShow" : "tableHiddle", render: (G, ee, me) => w ? e.jsxs("div", { children: [e.jsx(Vn, { size: "small", color: Xt(G), style: { marginRight: 4 }, onClick: ue => { ue.stopPropagation(), J(ee.user_id) }, children: typeof G == "string" && G.slice(0, 1) }), G] }) : e.jsx(e.Fragment, {}) }, { title: n("令牌"), dataIndex: "token_name", render: (G, ee, me) => ee.type === 0 || ee.type === 2 ? e.jsx("div", { children: e.jsxs(K, { color: "grey", size: "large", onClick: ue => { Ee(ue, G) }, children: [" ", n(G), " "] }) }) : e.jsx(e.Fragment, {}) }, { title: n("分组"), dataIndex: "group", render: (G, ee, me) => { if (ee.type === 0 || ee.type === 2) { if (ee.group) return e.jsx(e.Fragment, { children: Yt(ee.group) }); { let ue = JSON.parse(ee.other); return ue === null ? e.jsx(e.Fragment, {}) : ue.group !== void 0 ? e.jsx(e.Fragment, { children: Yt(ue.group) }) : e.jsx(e.Fragment, {}) } } else return e.jsx(e.Fragment, {}) } }, { title: n("类型"), dataIndex: "type", render: (G, ee, me) => e.jsx(e.Fragment, { children: u(G) }) }, { title: n("模型"), dataIndex: "model_name", render: (G, ee, me) => ee.type === 0 || ee.type === 2 ? e.jsx(e.Fragment, { children: e.jsxs(K, { color: Xt(G), size: "large", onClick: ue => { Ee(ue, G) }, children: [" ", G, " "] }) }) : e.jsx(e.Fragment, {}) }, { title: n("用时/首字"), dataIndex: "use_time", render: (G, ee, me) => { if (ee.is_stream) { let ue = Un(ee.other); return e.jsx(e.Fragment, { children: e.jsxs(ye, { children: [a(G), r(ue.frt), s(ee.is_stream)] }) }) } else return e.jsx(e.Fragment, { children: e.jsxs(ye, { children: [a(G), s(ee.is_stream)] }) }) } }, { title: n("提示"), dataIndex: "prompt_tokens", render: (G, ee, me) => ee.type === 0 || ee.type === 2 ? e.jsx(e.Fragment, { children: e.jsxs("span", { children: [" ", G, " "] }) }) : e.jsx(e.Fragment, {}) }, { title: n("补全"), dataIndex: "completion_tokens", render: (G, ee, me) => parseInt(G) > 0 && (ee.type === 0 || ee.type === 2) ? e.jsx(e.Fragment, { children: e.jsxs("span", { children: [" ", G, " "] }) }) : e.jsx(e.Fragment, {}) }, { title: n("花费"), dataIndex: "quota", render: (G, ee, me) => ee.type === 0 || ee.type === 2 ? e.jsx(e.Fragment, { children: ve(G, 6) }) : e.jsx(e.Fragment, {}) }, { title: n("重试"), dataIndex: "retry", className: Ve() ? "tableShow" : "tableHiddle", render: (G, ee, me) => { let ue = n("渠道") + `：${ee.channel}`; if (ee.other !== "") { let be = JSON.parse(ee.other); if (be === null) return e.jsx(e.Fragment, {}); if (be.admin_info !== void 0 && be.admin_info.use_channel !== null && be.admin_info.use_channel !== void 0 && be.admin_info.use_channel !== "") { let Je = be.admin_info.use_channel.join("->"); ue = n("渠道") + `：${Je}` } } return w ? e.jsx("div", { children: ue }) : e.jsx(e.Fragment, {}) } }, { title: n("详情"), dataIndex: "content", render: (G, ee, me) => { let ue = Un(ee.other); if (ue == null || ee.type !== 2) return e.jsx(hu, { ellipsis: { rows: 2, showTooltip: { type: "popover", opts: { style: { width: 240 } } } }, style: { maxWidth: 240 }, children: G }); let be = La(ue.model_ratio, ue.model_price, ue.group_ratio); return e.jsx(hu, { ellipsis: { rows: 2 }, style: { maxWidth: 240 }, children: be }) } }], [c, h] = i.useContext(Gt), [F, g] = i.useState([]), [p, m] = i.useState({}), [d, E] = i.useState(!1), [_, I] = i.useState(!1), [T, H] = i.useState(!1), [ae, Z] = i.useState(1), [O, A] = i.useState(_e), [Y, N] = i.useState(_e), [U, q] = i.useState(0), w = Ve(); let V = new Date; const [C, P] = i.useState({ username: "", token_name: "", model_name: "", start_timestamp: Xe(Sa()), end_timestamp: Xe(V.getTime() / 1e3 + 3600), channel: "", group: "" }), { username: j, token_name: R, model_name: v, start_timestamp: l, end_timestamp: f, channel: y, group: x } = C, [S, X] = i.useState({ quota: 0, token: 0 }), te = (G, ee) => { P(me => ({ ...me, [ee]: G })) }, D = async () => { let G = Date.parse(l) / 1e3, ee = Date.parse(f) / 1e3, me = `/api/log/self/stat?type=${U}&token_name=${R}&model_name=${v}&start_timestamp=${G}&end_timestamp=${ee}&group=${x}`; me = encodeURI(me); let ue = await W.get(me); const { success: be, message: Ne, data: Je } = ue.data; be ? X(Je) : b(Ne) }, B = async () => { let G = Date.parse(l) / 1e3, ee = Date.parse(f) / 1e3, me = `/api/log/stat?type=${U}&username=${j}&token_name=${R}&model_name=${v}&start_timestamp=${G}&end_timestamp=${ee}&channel=${y}&group=${x}`; me = encodeURI(me); let ue = await W.get(me); const { success: be, message: Ne, data: Je } = ue.data; be ? X(Je) : b(Ne) }, k = async () => { T || (H(!0), w ? await B() : await D(), E(!0), H(!1)) }, J = async G => { if (!w) return; const ee = await W.get(`/api/user/${G}`), { success: me, message: ue, data: be } = ee.data; me ? De.info({ title: n("用户信息"), content: e.jsxs("div", { style: { padding: 12 }, children: [e.jsxs("p", { children: [n("用户名"), ": ", be.username] }), e.jsxs("p", { children: [n("余额"), ": ", ve(be.quota)] }), e.jsxs("p", { children: [n("已用额度"), "：", ve(be.used_quota)] }), e.jsxs("p", { children: [n("请求次数"), "：", En(be.request_count)] })] }), centered: !0 }) : b(ue) }, Q = G => { let ee = {}; for (let me = 0; me < G.length; me++) { G[me].timestamp2string = Xe(G[me].created_at), G[me].key = G[me].id; let ue = Un(G[me].other), be = []; if (Ve(), (ue != null && ue.ws || ue != null && ue.audio) && (be.push({ key: n("语音输入"), value: ue.audio_input }), be.push({ key: n("语音输出"), value: ue.audio_output }), be.push({ key: n("文字输入"), value: ue.text_input }), be.push({ key: n("文字输出"), value: ue.text_output })), be.push({ key: n("日志详情"), value: G[me].content }), G[me].type === 2) { let Ne = ""; ue != null && ue.ws || ue != null && ue.audio ? Ne = Ra(ue.text_input, ue.text_output, ue.model_ratio, ue.model_price, ue.completion_ratio, ue.audio_input, ue.audio_output, ue == null ? void 0 : ue.audio_ratio, ue == null ? void 0 : ue.audio_completion_ratio, ue.group_ratio) : Ne = Oa(G[me].prompt_tokens, G[me].completion_tokens, ue.model_ratio, ue.model_price, ue.completion_ratio, ue.group_ratio), be.push({ key: n("计费过程"), value: Ne }) } ee[G[me].key] = be } m(ee), g(G) }, ce = async (G, ee, me = 0) => { I(!0); let ue = "", be = Date.parse(l) / 1e3, Ne = Date.parse(f) / 1e3; w ? ue = `/api/log/?p=${G}&page_size=${ee}&type=${me}&username=${j}&token_name=${R}&model_name=${v}&start_timestamp=${be}&end_timestamp=${Ne}&channel=${y}&group=${x}` : ue = `/api/log/self/?p=${G}&page_size=${ee}&type=${me}&token_name=${R}&model_name=${v}&start_timestamp=${be}&end_timestamp=${Ne}&group=${x}`, ue = encodeURI(ue); const Je = await W.get(ue), { success: _t, message: Tt, data: dt } = Je.data; if (_t) { const It = dt.items; Z(dt.page), N(dt.page_size), A(dt.total), Q(It) } else b(Tt); I(!1) }, pe = G => { Z(G), ce(G, Y, U).then(ee => { }) }, ge = async G => { localStorage.setItem("page-size", G + ""), N(G), Z(1), ce(ae, G).then().catch(ee => { b(ee) }) }, xe = async () => { Z(1), k(), await ce(ae, Y, U) }, Ee = async (G, ee) => { G.stopPropagation(), await nt(ee) ? ie("已复制：" + ee) : De.error({ title: n("无法复制到剪贴板，请手动复制"), content: ee }) }; i.useEffect(() => { const G = parseInt(localStorage.getItem("page-size")) || _e; N(G), ce(ae, G).then().catch(ee => { b(ee) }), k() }, []); const ze = (G, ee) => e.jsx(ht, { data: p[G.key] }); return e.jsx(e.Fragment, { children: e.jsxs(Fe, { children: [e.jsx(co, { children: e.jsx(Me, { spinning: T, children: e.jsxs(ye, { children: [e.jsxs(K, { color: "green", size: "large", style: { padding: 15 }, children: [n("总消耗额度"), ": ", ve(S.quota)] }), e.jsxs(K, { color: "blue", size: "large", style: { padding: 15 }, children: ["RPM: ", S.rpm] }), e.jsxs(K, { color: "purple", size: "large", style: { padding: 15 }, children: ["TPM: ", S.tpm] })] }) }) }), e.jsx(M, { layout: "horizontal", style: { marginTop: 10 }, children: e.jsxs(e.Fragment, { children: [e.jsx(M.Section, { children: e.jsx("div", { style: { marginBottom: 10 }, children: c.isMobile ? e.jsxs("div", { children: [e.jsx(M.DatePicker, { field: "start_timestamp", label: n("起始时间"), style: { width: 272 }, initValue: l, type: "dateTime", onChange: G => { console.log(G), te(G, "start_timestamp") } }), e.jsx(M.DatePicker, { field: "end_timestamp", fluid: !0, label: n("结束时间"), style: { width: 272 }, initValue: f, type: "dateTime", onChange: G => te(G, "end_timestamp") })] }) : e.jsx(M.DatePicker, { field: "range_timestamp", label: n("时间范围"), initValue: [l, f], type: "dateTimeRange", name: "range_timestamp", onChange: G => { Array.isArray(G) && G.length === 2 && (te(G[0], "start_timestamp"), te(G[1], "end_timestamp")) } }) }) }), e.jsx(M.Input, { field: "token_name", label: n("令牌名称"), value: R, placeholder: n("可选值"), name: "token_name", onChange: G => te(G, "token_name") }), e.jsx(M.Input, { field: "model_name", label: n("模型名称"), value: v, placeholder: n("可选值"), name: "model_name", onChange: G => te(G, "model_name") }), e.jsx(M.Input, { field: "group", label: n("分组"), value: x, placeholder: n("可选值"), name: "group", onChange: G => te(G, "group") }), w && e.jsxs(e.Fragment, { children: [e.jsx(M.Input, { field: "channel", label: n("渠道 ID"), value: y, placeholder: n("可选值"), name: "channel", onChange: G => te(G, "channel") }), e.jsx(M.Input, { field: "username", label: n("用户名称"), value: j, placeholder: n("可选值"), name: "username", onChange: G => te(G, "username") })] }), e.jsx($, { label: n("查询"), type: "primary", htmlType: "submit", className: "btn-margin-right", onClick: xe, loading: _, style: { marginTop: 24 }, children: n("查询") }), e.jsx(M.Section, {})] }) }), e.jsx("div", { style: { marginTop: 10 }, children: e.jsxs(Ue, { defaultValue: "0", style: { width: 120 }, onChange: G => { q(parseInt(G)), ce(0, Y, parseInt(G)) }, children: [e.jsx(Ue.Option, { value: "0", children: n("全部") }), e.jsx(Ue.Option, { value: "1", children: n("充值") }), e.jsx(Ue.Option, { value: "2", children: n("消费") }), e.jsx(Ue.Option, { value: "3", children: n("管理") }), e.jsx(Ue.Option, { value: "4", children: n("系统") })] }) }), e.jsx(ft, { style: { marginTop: 5 }, columns: o, expandedRowRender: ze, expandRowByClick: !0, dataSource: F, rowKey: "key", pagination: { formatPageText: G => n("第 {{start}} - {{end}} 条，共 {{total}} 条", { start: G.currentStart, end: G.currentEnd, total: F.length }), currentPage: ae, pageSize: Y, total: O, pageSizeOpts: [10, 20, 50, 100], showSizeChanger: !0, onPageSizeChange: G => { ge(G) }, onPageChange: pe } })] }) }) }, po = () => e.jsx(e.Fragment, { children: e.jsx(ho, {}) }); async function mo() { try { const n = await W.get("/api/token/?p=0&size=100"), { success: u, data: s } = n.data; if (u) return s.filter(r => r.status === 1).map(r => r.key); throw new Error("Failed to fetch token keys") } catch (n) { return console.error("Error fetching token keys:", n), [] } } function go() { let n = localStorage.getItem("status"), u = ""; if (n) try { n = JSON.parse(n), u = n.server_address || "" } catch (s) { console.error("Failed to parse status from localStorage:", s) } return u || (u = window.location.origin), u } function Rs(n) { const [u, s] = i.useState([]), [a, r] = i.useState(""), [o, c] = i.useState(!0); return i.useEffect(() => { (async () => { const F = await mo(); F.length === 0 && (b("当前没有可用的启用令牌，请确认是否有令牌处于启用状态！"), setTimeout(() => { window.location.href = "/token" }, 1500)), s(F), c(!1); const g = go(); r(g) })() }, []), { keys: u, serverAddress: a, isLoading: o } } const fo = () => { const { id: n } = as(), { keys: u, serverAddress: s, isLoading: a } = Rs(), r = c => { if (!s || !c) return ""; let h = localStorage.getItem("chat_link"); if (h) h = `${h}/#/?settings={"key":"sk-${c}","url":"${encodeURIComponent(s)}"}`; else if (n) { let F = localStorage.getItem("chats"); if (F && (F = JSON.parse(F), Array.isArray(F) && F.length > 0)) for (let g in F[n]) h = F[n][g], h = h.replaceAll("{address}", encodeURIComponent(s)), h = h.replaceAll("{key}", "sk-" + c) } return h }, o = u.length > 0 ? r(u[0]) : ""; return !a && o ? e.jsx("iframe", { src: o, style: { width: "100%", height: "100%", border: "none" }, title: "Token Frame", allow: "camera;microphone" }) : e.jsx("div", { children: e.jsx(Fe, { children: e.jsx(Fe.Header, { children: e.jsx(Ge, { description: "正在跳转......", type: "warning" }) }) }) }) }, Fo = () => { const { keys: n, chatLink: u, serverAddress: s, isLoading: a } = Rs(), r = o => !u || !s || !o ? "" : `${u}/#/?settings={"key":"sk-${o}","url":"${encodeURIComponent(s)}"}`; if (n.length > 0) { const o = r(n[0]); o && (window.location.href = o) } return e.jsx("div", { children: e.jsx("h3", { children: "正在加载，请稍候..." }) }) }, Gu = ["amber", "blue", "cyan", "green", "grey", "indigo", "light-blue", "lime", "orange", "pink", "purple", "red", "teal", "violet", "yellow"], xo = () => { const { t: n } = Ce(), [u, s] = i.useState(!1), [a, r] = i.useState(""); function o(k) { switch (k) { case "IMAGINE": return e.jsx(K, { color: "blue", size: "large", children: n("绘图") }); case "UPSCALE": return e.jsx(K, { color: "orange", size: "large", children: n("放大") }); case "VARIATION": return e.jsx(K, { color: "purple", size: "large", children: n("变换") }); case "HIGH_VARIATION": return e.jsx(K, { color: "purple", size: "large", children: n("强变换") }); case "LOW_VARIATION": return e.jsx(K, { color: "purple", size: "large", children: n("弱变换") }); case "PAN": return e.jsx(K, { color: "cyan", size: "large", children: n("平移") }); case "DESCRIBE": return e.jsx(K, { color: "yellow", size: "large", children: n("图生文") }); case "BLEND": return e.jsx(K, { color: "lime", size: "large", children: n("图混合") }); case "UPLOAD": return e.jsx(K, { color: "blue", size: "large", children: "上传文件" }); case "SHORTEN": return e.jsx(K, { color: "pink", size: "large", children: n("缩词") }); case "REROLL": return e.jsx(K, { color: "indigo", size: "large", children: n("重绘") }); case "INPAINT": return e.jsx(K, { color: "violet", size: "large", children: n("局部重绘-提交") }); case "ZOOM": return e.jsx(K, { color: "teal", size: "large", children: n("变焦") }); case "CUSTOM_ZOOM": return e.jsx(K, { color: "teal", size: "large", children: n("自定义变焦-提交") }); case "MODAL": return e.jsx(K, { color: "green", size: "large", children: n("窗口处理") }); case "SWAP_FACE": return e.jsx(K, { color: "light-green", size: "large", children: n("换脸") }); default: return e.jsx(K, { color: "white", size: "large", children: n("未知") }) } } function c(k) { switch (k) { case 1: return e.jsx(K, { color: "green", size: "large", children: n("已提交") }); case 21: return e.jsx(K, { color: "lime", size: "large", children: n("等待中") }); case 22: return e.jsx(K, { color: "orange", size: "large", children: n("重复提交") }); case 0: return e.jsx(K, { color: "yellow", size: "large", children: n("未提交") }); default: return e.jsx(K, { color: "white", size: "large", children: n("未知") }) } } function h(k) { switch (k) { case "SUCCESS": return e.jsx(K, { color: "green", size: "large", children: n("成功") }); case "NOT_START": return e.jsx(K, { color: "grey", size: "large", children: n("未启动") }); case "SUBMITTED": return e.jsx(K, { color: "yellow", size: "large", children: n("队列中") }); case "IN_PROGRESS": return e.jsx(K, { color: "blue", size: "large", children: n("执行中") }); case "FAILURE": return e.jsx(K, { color: "red", size: "large", children: n("失败") }); case "MODAL": return e.jsx(K, { color: "yellow", size: "large", children: n("窗口等待") }); default: return e.jsx(K, { color: "white", size: "large", children: n("未知") }) } } const F = k => { const J = new Date(k * 1e3), Q = J.getFullYear(), ce = ("0" + (J.getMonth() + 1)).slice(-2), pe = ("0" + J.getDate()).slice(-2), ge = ("0" + J.getHours()).slice(-2), xe = ("0" + J.getMinutes()).slice(-2), Ee = ("0" + J.getSeconds()).slice(-2); return `${Q}-${ce}-${pe} ${ge}:${xe}:${Ee}` }; function g(k, J) { if (!k || !J) return "N/A"; const Q = new Date(k), ge = ((new Date(J) - Q) / 1e3).toFixed(1), xe = ge > 60 ? "red" : "green"; return e.jsxs(K, { color: xe, size: "large", children: [ge, " ", n("秒")] }) } const p = [{ title: n("提交时间"), dataIndex: "submit_time", render: (k, J, Q) => e.jsx("div", { children: F(k / 1e3) }) }, { title: n("花费时间"), dataIndex: "finish_time", key: "finish_time", render: (k, J) => g(J.submit_time, k) }, { title: n("渠道"), dataIndex: "channel_id", className: Ve() ? "tableShow" : "tableHiddle", render: (k, J, Q) => e.jsx("div", { children: e.jsxs(K, { color: Gu[parseInt(k) % Gu.length], size: "large", onClick: () => { B(k) }, children: [" ", k, " "] }) }) }, { title: n("类型"), dataIndex: "action", render: (k, J, Q) => e.jsx("div", { children: o(k) }) }, { title: n("任务ID"), dataIndex: "mj_id", render: (k, J, Q) => e.jsx("div", { children: k }) }, { title: n("提交结果"), dataIndex: "code", className: Ve() ? "tableShow" : "tableHiddle", render: (k, J, Q) => e.jsx("div", { children: c(k) }) }, { title: n("任务状态"), dataIndex: "status", className: Ve() ? "tableShow" : "tableHiddle", render: (k, J, Q) => e.jsx("div", { children: h(k) }) }, { title: n("进度"), dataIndex: "progress", render: (k, J, Q) => e.jsx("div", { children: e.jsx(Xu, { stroke: J.status === "FAILURE" ? "var(--semi-color-warning)" : null, percent: k ? parseInt(k.replace("%", "")) : 0, showInfo: !0, "aria-label": "drawing progress" }) }) }, { title: n("结果图片"), dataIndex: "image_url", render: (k, J, Q) => k ? e.jsx($, { onClick: () => { V(k), N(!0) }, children: n("查看图片") }) : n("无") }, { title: "Prompt", dataIndex: "prompt", render: (k, J, Q) => k ? e.jsx(ne.Text, { ellipsis: { showTooltip: !0 }, style: { width: 100 }, onClick: () => { r(k), s(!0) }, children: k }) : n("无") }, { title: "PromptEn", dataIndex: "prompt_en", render: (k, J, Q) => k ? e.jsx(ne.Text, { ellipsis: { showTooltip: !0 }, style: { width: 100 }, onClick: () => { r(k), s(!0) }, children: k }) : n("无") }, { title: n("失败原因"), dataIndex: "fail_reason", render: (k, J, Q) => k ? e.jsx(ne.Text, { ellipsis: { showTooltip: !0 }, style: { width: 100 }, onClick: () => { r(k), s(!0) }, children: k }) : n("无") }], [m, d] = i.useState([]), [E, _] = i.useState(!0), [I, T] = i.useState(1), [H, ae] = i.useState(_e), [Z, O] = i.useState(0), A = Ve(), [Y, N] = i.useState(!1), [U, q] = i.useState(!1), [w, V] = i.useState(""); let C = new Date; const [P, j] = i.useState({ channel_id: "", mj_id: "", start_timestamp: Xe(C.getTime() / 1e3 - 2592e3), end_timestamp: Xe(C.getTime() / 1e3 + 3600) }), { channel_id: R, mj_id: v, start_timestamp: l, end_timestamp: f } = P; i.useState({ quota: 0, token: 0 }); const y = (k, J) => { j(Q => ({ ...Q, [J]: k })) }, x = k => { for (let J = 0; J < k.length; J++)k[J].timestamp2string = Xe(k[J].created_at), k[J].key = "" + k[J].id; d(k), ae(k.length + _e) }, S = async k => { _(!0); let J = "", Q = Date.parse(l), ce = Date.parse(f); A ? J = `/api/mj/?p=${k}&channel_id=${R}&mj_id=${v}&start_timestamp=${Q}&end_timestamp=${ce}` : J = `/api/mj/self/?p=${k}&mj_id=${v}&start_timestamp=${Q}&end_timestamp=${ce}`; const pe = await W.get(J), { success: ge, message: xe, data: Ee } = pe.data; if (ge) if (k === 0) x(Ee); else { let ze = [...m]; ze.splice(k * _e, Ee.length, ...Ee), x(ze) } else b(xe); _(!1) }, X = m.slice((I - 1) * _e, I * _e), te = k => { T(k), k === Math.ceil(m.length / _e) + 1 && S(k - 1).then(J => { }) }, D = async () => { T(1), await S(0) }, B = async k => { await nt(k) ? ie("已复制：" + k) : De.error({ title: "无法复制到剪贴板，请手动复制", content: k }) }; return i.useEffect(() => { D().then() }, [Z]), i.useEffect(() => { localStorage.getItem("mj_notify_enabled") !== "true" && q(!0) }, []), e.jsx(e.Fragment, { children: e.jsxs(Fe, { children: [A && U ? e.jsx(Ge, { type: "info", description: n("当前未开启Midjourney回调，部分项目可能无法获得绘图结果，可在运营设置中开启。") }) : e.jsx(e.Fragment, {}), e.jsx(M, { layout: "horizontal", style: { marginTop: 10 }, children: e.jsxs(e.Fragment, { children: [e.jsx(M.Input, { field: "channel_id", label: n("渠道 ID"), style: { width: 176 }, value: R, placeholder: n("可选值"), name: "channel_id", onChange: k => y(k, "channel_id") }), e.jsx(M.Input, { field: "mj_id", label: n("任务 ID"), style: { width: 176 }, value: v, placeholder: n("可选值"), name: "mj_id", onChange: k => y(k, "mj_id") }), e.jsx(M.DatePicker, { field: "start_timestamp", label: n("起始时间"), style: { width: 272 }, initValue: l, value: l, type: "dateTime", name: "start_timestamp", onChange: k => y(k, "start_timestamp") }), e.jsx(M.DatePicker, { field: "end_timestamp", fluid: !0, label: n("结束时间"), style: { width: 272 }, initValue: f, value: f, type: "dateTime", name: "end_timestamp", onChange: k => y(k, "end_timestamp") }), e.jsx(M.Section, { children: e.jsx($, { label: n("查询"), type: "primary", htmlType: "submit", className: "btn-margin-right", onClick: D, children: n("查询") }) })] }) }), e.jsx(ft, { style: { marginTop: 5 }, columns: p, dataSource: X, pagination: { currentPage: I, pageSize: _e, total: H, pageSizeOpts: [10, 20, 50, 100], onPageChange: te, formatPageText: k => n("第 {{start}} - {{end}} 条，共 {{total}} 条", { start: k.currentStart, end: k.currentEnd, total: H }) }, loading: E }), e.jsx(De, { visible: u, onOk: () => s(!1), onCancel: () => s(!1), closable: null, bodyStyle: { height: "400px", overflow: "auto" }, width: 800, children: e.jsx("p", { style: { whiteSpace: "pre-line" }, children: a }) }), e.jsx(es, { src: w, visible: Y, onVisibleChange: k => N(k) })] }) }) }, yo = () => e.jsx(e.Fragment, { children: e.jsx(xo, {}) }), Co = () => { const { t: n } = Ce(), [u, s] = i.useState([]), a = i.useRef({ isComposition: !1 }), [r, o] = i.useState([]), [c, h] = i.useState(""), [F, g] = i.useState(!1), [p, m] = i.useState("default"), d = i.useMemo(() => ({ onChange: (l, f) => { o(l) } }), []), E = l => { if (a.current.isComposition) return; s(l ? [l] : []) }, _ = () => { a.current.isComposition = !0 }, I = l => { a.current.isComposition = !1; const f = l.target.value; s(f ? [f] : []) }; function T(l) { switch (l) { case 1: return e.jsx(K, { color: "teal", size: "large", children: n("按次计费") }); case 0: return e.jsx(K, { color: "violet", size: "large", children: n("按量计费") }); default: return n("未知") } } function H(l) { return e.jsx(Cn, { content: e.jsx("div", { style: { padding: 8 }, children: n("您的分组可以使用该模型") }), position: "top", style: { backgroundColor: "rgba(var(--semi-blue-4),1)", borderColor: "rgba(var(--semi-blue-4),1)", color: "var(--semi-color-white)", borderWidth: 1, borderStyle: "solid" }, children: e.jsx(pu, { style: { color: "green" }, size: "large" }) }, l) } const ae = [{ title: n("可用性"), dataIndex: "available", render: (l, f, y) => H(f.enable_groups.includes(p)), sorter: (l, f) => l.available - f.available }, { title: n("模型名称"), dataIndex: "model_name", render: (l, f, y) => e.jsx(e.Fragment, { children: e.jsx(K, { color: "green", size: "large", onClick: () => { v(l) }, children: l }) }), onFilter: (l, f) => f.model_name.toLowerCase().includes(l.toLowerCase()), filteredValue: u }, { title: n("计费类型"), dataIndex: "quota_type", render: (l, f, y) => T(parseInt(l)), sorter: (l, f) => l.quota_type - f.quota_type }, { title: n("可用分组"), dataIndex: "enable_groups", render: (l, f, y) => e.jsx(ye, { children: l.map(x => { if (V[x]) return x === p ? e.jsx(K, { color: "blue", size: "large", prefixIcon: e.jsx(pu, {}), children: x }) : e.jsx(K, { color: "blue", size: "large", onClick: () => { m(x), Te(n("当前查看的分组为：{{group}}，倍率为：{{ratio}}", { group: x, ratio: q[x] })) }, children: x }) }) }) }, { title: () => e.jsxs("span", { style: { display: "flex", alignItems: "center" }, children: [n("倍率"), e.jsx(Cn, { content: e.jsxs("div", { style: { padding: 8 }, children: [n("倍率是为了方便换算不同价格的模型"), e.jsx("br", {}), n("点击查看倍率说明")] }), position: "top", style: { backgroundColor: "rgba(var(--semi-blue-4),1)", borderColor: "rgba(var(--semi-blue-4),1)", color: "var(--semi-color-white)", borderWidth: 1, borderStyle: "solid" }, children: e.jsx(Js, { onClick: () => { h("/ratio.png"), g(!0) } }) })] }), dataIndex: "model_ratio", render: (l, f, y) => { let x = l, S = parseFloat(f.completion_ratio.toFixed(3)); return x = e.jsxs(e.Fragment, { children: [e.jsxs(mt, { children: [n("模型倍率"), "：", f.quota_type === 0 ? l : n("无")] }), e.jsx("br", {}), e.jsxs(mt, { children: [n("补全倍率"), "：", f.quota_type === 0 ? S : n("无")] }), e.jsx("br", {}), e.jsxs(mt, { children: [n("分组倍率"), "：", q[p]] })] }), e.jsx("div", { children: x }) } }, { title: n("模型价格"), dataIndex: "model_price", render: (l, f, y) => { let x = l; if (f.quota_type === 0) { let S = f.model_ratio * 2 * q[p], X = f.model_ratio * f.completion_ratio * 2 * q[p]; x = e.jsxs(e.Fragment, { children: [e.jsxs(mt, { children: [n("提示"), " $", S, " / 1M tokens"] }), e.jsx("br", {}), e.jsxs(mt, { children: [n("补全"), " $", X, " / 1M tokens"] })] }) } else { let S = parseFloat(l) * q[p]; x = e.jsxs(e.Fragment, { children: ["$", n("模型价格"), "：$", S] }) } return e.jsx("div", { children: x }) } }], [Z, O] = i.useState([]), [A, Y] = i.useState(!0), [N, U] = i.useContext(Ft), [q, w] = i.useState({}), [V, C] = i.useState({}), P = (l, f) => { for (let y = 0; y < l.length; y++)l[y].key = l[y].model_name, l[y].group_ratio = f[l[y].model_name]; l.sort((y, x) => y.quota_type - x.quota_type), l.sort((y, x) => y.model_name.startsWith("gpt") && !x.model_name.startsWith("gpt") ? -1 : !y.model_name.startsWith("gpt") && x.model_name.startsWith("gpt") ? 1 : y.model_name.localeCompare(x.model_name)), O(l) }, j = async () => { Y(!0); let l = ""; l = "/api/pricing"; const f = await W.get(l), { success: y, message: x, data: S, group_ratio: X, usable_group: te } = f.data; y ? (w(X), C(te), m(N.user ? N.user.group : "default"), P(S, X)) : b(x), Y(!1) }, R = async () => { await j() }, v = async l => { await nt(l) ? ie("已复制：" + l) : De.error({ title: "无法复制到剪贴板，请手动复制", content: l }) }; return i.useEffect(() => { R().then() }, []), e.jsx(e.Fragment, { children: e.jsxs(Fe, { children: [N.user ? e.jsx(Ge, { type: "success", fullMode: !1, closeIcon: "null", description: n("您的默认分组为：{{group}}，分组倍率为：{{ratio}}", { group: N.user.group, ratio: q[N.user.group] }) }) : e.jsx(Ge, { type: "warning", fullMode: !1, closeIcon: "null", description: n("您还未登陆，显示的价格为默认分组倍率: {{ratio}}", { ratio: q.default }) }), e.jsx("br", {}), e.jsx(Ge, { type: "info", fullMode: !1, description: e.jsx("div", { children: n("按量计费费用 = 分组倍率 × 模型倍率 × （提示token数 + 补全token数 × 补全倍率）/ 500000 （单位：美元）") }), closeIcon: "null" }), e.jsx("br", {}), e.jsxs(ye, { style: { marginBottom: 16 }, children: [e.jsx(he, { placeholder: n("模糊搜索模型名称"), style: { width: 200 }, onCompositionStart: _, onCompositionEnd: I, onChange: E, showClear: !0 }), e.jsx($, { theme: "light", type: "tertiary", style: { width: 150 }, onClick: () => { v(r) }, disabled: r == "", children: n("复制选中模型") })] }), e.jsx(ft, { style: { marginTop: 5 }, columns: ae, dataSource: Z, loading: A, pagination: { formatPageText: l => n("第 {{start}} - {{end}} 条，共 {{total}} 条", { start: l.currentStart, end: l.currentEnd, total: Z.length }), pageSize: Z.length, showSizeChanger: !1 }, rowSelection: d }), e.jsx(es, { src: c, visible: F, onVisibleChange: l => g(l) })] }) }) }, Eo = () => e.jsx(e.Fragment, { children: e.jsx(Co, {}) }), Ku = ["amber", "blue", "cyan", "green", "grey", "indigo", "light-blue", "lime", "orange", "pink", "purple", "red", "teal", "violet", "yellow"], Hu = n => { const u = new Date(n * 1e3), s = u.getFullYear(), a = ("0" + (u.getMonth() + 1)).slice(-2), r = ("0" + u.getDate()).slice(-2), o = ("0" + u.getHours()).slice(-2), c = ("0" + u.getMinutes()).slice(-2), h = ("0" + u.getSeconds()).slice(-2); return `${s}-${a}-${r} ${o}:${c}:${h}` }; function bo(n, u) { if (!n || !u) return "N/A"; const s = new Date(n), o = ((new Date(u) - s) / 1e3).toFixed(1), c = o > 60 ? "red" : "green"; return e.jsxs(K, { color: c, size: "large", children: [o, " 秒"] }) } const jo = () => { const [n, u] = i.useState(!1), [s, a] = i.useState(""), r = Ve(), o = [{ title: "提交时间", dataIndex: "submit_time", render: (l, f, y) => e.jsx("div", { children: l ? Hu(l) : "-" }) }, { title: "结束时间", dataIndex: "finish_time", render: (l, f, y) => e.jsx("div", { children: l ? Hu(l) : "-" }) }, { title: "进度", dataIndex: "progress", width: 50, render: (l, f, y) => e.jsx("div", { children: isNaN(l.replace("%", "")) ? l : e.jsx(Xu, { width: 42, type: "circle", showInfo: !0, percent: Number(l.replace("%", "") || 0), "aria-label": "drawing progress" }) }) }, { title: "花费时间", dataIndex: "finish_time", key: "finish_time", render: (l, f) => e.jsx(e.Fragment, { children: l ? bo(f.submit_time, l) : "-" }) }, { title: "渠道", dataIndex: "channel_id", className: r ? "tableShow" : "tableHiddle", render: (l, f, y) => e.jsx("div", { children: e.jsxs(K, { color: Ku[parseInt(l) % Ku.length], size: "large", onClick: () => { P(l) }, children: [" ", l, " "] }) }) }, { title: "平台", dataIndex: "platform", render: (l, f, y) => e.jsx("div", { children: R(l) }) }, { title: "类型", dataIndex: "action", render: (l, f, y) => e.jsx("div", { children: j(l) }) }, { title: "任务ID（点击查看详情）", dataIndex: "task_id", render: (l, f, y) => e.jsx(ne.Text, { ellipsis: { showTooltip: !0 }, onClick: () => { a(JSON.stringify(f, null, 2)), u(!0) }, children: e.jsx("div", { children: l }) }) }, { title: "任务状态", dataIndex: "status", render: (l, f, y) => e.jsx("div", { children: v(l) }) }, { title: "失败原因", dataIndex: "fail_reason", render: (l, f, y) => l ? e.jsx(ne.Text, { ellipsis: { showTooltip: !0 }, style: { width: 100 }, onClick: () => { a(l), u(!0) }, children: l }) : "无" }], [c, h] = i.useState([]), [F, g] = i.useState(!0), [p, m] = i.useState(1), [d, E] = i.useState(_e), [_] = i.useState(0); let I = new Date, T = new Date(I.getFullYear(), I.getMonth(), I.getDate()); const [H, ae] = i.useState({ channel_id: "", task_id: "", start_timestamp: Xe(T.getTime() / 1e3), end_timestamp: "" }), { channel_id: Z, task_id: O, start_timestamp: A, end_timestamp: Y } = H, N = (l, f) => { ae(y => ({ ...y, [f]: l })) }, U = l => { for (let f = 0; f < l.length; f++)l[f].timestamp2string = Xe(l[f].created_at), l[f].key = "" + l[f].id; h(l), E(l.length + _e) }, q = async l => { g(!0); let f = "", y = parseInt(Date.parse(A) / 1e3), x = parseInt(Date.parse(Y) / 1e3); r ? f = `/api/task/?p=${l}&channel_id=${Z}&task_id=${O}&start_timestamp=${y}&end_timestamp=${x}` : f = `/api/task/self?p=${l}&task_id=${O}&start_timestamp=${y}&end_timestamp=${x}`; const S = await W.get(f); let { success: X, message: te, data: D } = S.data; if (X) if (l === 0) U(D); else { let B = [...c]; B.splice(l * _e, D.length, ...D), U(B) } else b(te); g(!1) }, w = c.slice((p - 1) * _e, p * _e), V = l => { m(l), l === Math.ceil(c.length / _e) + 1 && q(l - 1).then(f => { }) }, C = async () => { m(1), await q(0) }, P = async l => { await nt(l) ? ie("已复制：" + l) : De.error({ title: "无法复制到剪贴板，请手动复制", content: l }) }; i.useEffect(() => { C().then() }, [_]); const j = l => { switch (l) { case "MUSIC": return e.jsx(Ke, { basic: !0, color: "grey", children: " 生成音乐 " }); case "LYRICS": return e.jsx(Ke, { basic: !0, color: "pink", children: " 生成歌词 " }); default: return e.jsx(Ke, { basic: !0, color: "black", children: " 未知 " }) } }, R = l => { switch (l) { case "suno": return e.jsx(Ke, { basic: !0, color: "green", children: " Suno " }); default: return e.jsx(Ke, { basic: !0, color: "black", children: " 未知 " }) } }, v = l => { switch (l) { case "SUCCESS": return e.jsx(Ke, { basic: !0, color: "green", children: " 成功 " }); case "NOT_START": return e.jsx(Ke, { basic: !0, color: "black", children: " 未启动 " }); case "SUBMITTED": return e.jsx(Ke, { basic: !0, color: "yellow", children: " 队列中 " }); case "IN_PROGRESS": return e.jsx(Ke, { basic: !0, color: "blue", children: " 执行中 " }); case "FAILURE": return e.jsx(Ke, { basic: !0, color: "red", children: " 失败 " }); case "QUEUED": return e.jsx(Ke, { basic: !0, color: "red", children: " 排队中 " }); case "UNKNOWN": return e.jsx(Ke, { basic: !0, color: "red", children: " 未知 " }); case "": return e.jsx(Ke, { basic: !0, color: "black", children: " 正在提交 " }); default: return e.jsx(Ke, { basic: !0, color: "black", children: " 未知 " }) } }; return e.jsx(e.Fragment, { children: e.jsxs(Fe, { children: [e.jsx(M, { layout: "horizontal", labelPosition: "inset", children: e.jsxs(e.Fragment, { children: [r && e.jsx(M.Input, { field: "channel_id", label: "渠道 ID", style: { width: "236px", marginBottom: "10px" }, value: Z, placeholder: "可选值", name: "channel_id", onChange: l => N(l, "channel_id") }), e.jsx(M.Input, { field: "task_id", label: "任务 ID", style: { width: "236px", marginBottom: "10px" }, value: O, placeholder: "可选值", name: "task_id", onChange: l => N(l, "task_id") }), e.jsx(M.DatePicker, { field: "start_timestamp", label: "起始时间", style: { width: "236px", marginBottom: "10px" }, initValue: A, value: A, type: "dateTime", name: "start_timestamp", onChange: l => N(l, "start_timestamp") }), e.jsx(M.DatePicker, { field: "end_timestamp", fluid: !0, label: "结束时间", style: { width: "236px", marginBottom: "10px" }, initValue: Y, value: Y, type: "dateTime", name: "end_timestamp", onChange: l => N(l, "end_timestamp") }), e.jsx($, { label: "查询", type: "primary", htmlType: "submit", className: "btn-margin-right", onClick: C, children: "查询" })] }) }), e.jsx(Re, { children: e.jsx(ft, { columns: o, dataSource: w, pagination: { currentPage: p, pageSize: _e, total: d, pageSizeOpts: [10, 20, 50, 100], onPageChange: V }, loading: F }) }), e.jsx(De, { visible: n, onOk: () => u(!1), onCancel: () => u(!1), closable: null, bodyStyle: { height: "400px", overflow: "auto" }, width: 800, children: e.jsx("p", { style: { whiteSpace: "pre-line" }, children: s }) })] }) }) }, Do = () => e.jsx(e.Fragment, { children: e.jsx(jo, {}) }); var Ze = function (n, u) {
  if (!(this instanceof Ze)) return new Ze(n, u); this.url = n, u = u || {}, this.headers = u.headers || {}, this.payload = u.payload !== void 0 ? u.payload : "", this.method = u.method || this.payload && "POST" || "GET", this.withCredentials = !!u.withCredentials, this.debug = !!u.debug, this.FIELD_SEPARATOR = ":", this.listeners = {}, this.xhr = null, this.readyState = Ze.INITIALIZING, this.progress = 0, this.chunk = "", this.lastEventId = "", this.addEventListener = function (s, a) { this.listeners[s] === void 0 && (this.listeners[s] = []), this.listeners[s].indexOf(a) === -1 && this.listeners[s].push(a) }, this.removeEventListener = function (s, a) { if (this.listeners[s] === void 0) return; const r = []; this.listeners[s].forEach(function (o) { o !== a && r.push(o) }), r.length === 0 ? delete this.listeners[s] : this.listeners[s] = r }, this.dispatchEvent = function (s) { if (!s) return !0; this.debug && console.debug(s), s.source = this; const a = "on" + s.type; return this.hasOwnProperty(a) && (this[a].call(this, s), s.defaultPrevented) ? !1 : this.listeners[s.type] ? this.listeners[s.type].every(function (r) { return r(s), !s.defaultPrevented }) : !0 }, this._markClosed = function () { this.xhr = null, this._setReadyState(Ze.CLOSED) }, this._setReadyState = function (s) { const a = new CustomEvent("readystatechange"); a.readyState = s, this.readyState = s, this.dispatchEvent(a) }, this._onStreamFailure = function (s) { const a = new CustomEvent("error"); a.responseCode = s.currentTarget.status, a.data = s.currentTarget.response, this.dispatchEvent(a), this._markClosed() }, this._onStreamAbort = function () { this.dispatchEvent(new CustomEvent("abort")), this._markClosed() }, this._onStreamProgress = function (s) { if (!this.xhr) return; if (this.xhr.status < 200 || this.xhr.status >= 300) { this._onStreamFailure(s); return } const a = this.xhr.responseText.substring(this.progress); this.progress += a.length; const r = (this.chunk + a).split(/(\r\n\r\n|\r\r|\n\n)/g), o = r.pop(); r.forEach((function (c) { c.trim().length > 0 && this.dispatchEvent(this._parseEventChunk(c)) }).bind(this)), this.chunk = o }, this._onStreamLoaded = function (s) { this._onStreamProgress(s), this.dispatchEvent(this._parseEventChunk(this.chunk)), this.chunk = "", this._markClosed() }, this._parseEventChunk = function (s) {
    if (!s || s.length === 0) return null; this.debug && console.debug(s); const a = { id: null, retry: null, data: null, event: null }; s.split(/\n|\r\n|\r/).forEach((function (o) {
      const c = o.indexOf(this.FIELD_SEPARATOR); let h, F; if (c > 0) { const g = o[c + 1] === " " ? 2 : 1; h = o.substring(0, c), F = o.substring(c + g) } else if (c < 0) h = o, F = ""; else return; h in a && (h === "data" && a[h] !== null ? a.data += `
`+ F : a[h] = F)
    }).bind(this)), a.id !== null && (this.lastEventId = a.id); const r = new CustomEvent(a.event || "message"); return r.id = a.id, r.data = a.data || "", r.lastEventId = this.lastEventId, r
  }, this._onReadyStateChange = function () {
    if (this.xhr && this.xhr.readyState === XMLHttpRequest.HEADERS_RECEIVED) {
      const s = {}, a = this.xhr.getAllResponseHeaders().trim().split(`\r
`); for (const o of a) { const [c, ...h] = o.split(":"), F = h.join(":").trim(); s[c.trim().toLowerCase()] = s[c.trim().toLowerCase()] || [], s[c.trim().toLowerCase()].push(F) } const r = new CustomEvent("open"); r.responseCode = this.xhr.status, r.headers = s, this.dispatchEvent(r), this._setReadyState(Ze.OPEN)
    }
  }, this.stream = function () { if (!this.xhr) { this._setReadyState(Ze.CONNECTING), this.xhr = new XMLHttpRequest, this.xhr.addEventListener("progress", this._onStreamProgress.bind(this)), this.xhr.addEventListener("load", this._onStreamLoaded.bind(this)), this.xhr.addEventListener("readystatechange", this._onReadyStateChange.bind(this)), this.xhr.addEventListener("error", this._onStreamFailure.bind(this)), this.xhr.addEventListener("abort", this._onStreamAbort.bind(this)), this.xhr.open(this.method, this.url); for (let s in this.headers) this.xhr.setRequestHeader(s, this.headers[s]); this.lastEventId.length > 0 && this.xhr.setRequestHeader("Last-Event-ID", this.lastEventId), this.xhr.withCredentials = this.withCredentials, this.xhr.send(this.payload) } }, this.close = function () { this.readyState !== Ze.CLOSED && this.xhr.abort() }, (u.start === void 0 || u.start) && this.stream()
}; Ze.INITIALIZING = -1; Ze.CONNECTING = 0; Ze.OPEN = 1; Ze.CLOSED = 2; typeof exports < "u" && (exports.SSE = Ze); const wo = { user: { name: "User", avatar: "https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/docs-icon.png" }, assistant: { name: "Assistant", avatar: "logo.png" }, system: { name: "System", avatar: "https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/other/logo.png" } }; let Ao = 4; function Vu() { return `${Ao++}` } const vo = () => { const { t: n } = Ce(), u = [{ role: "user", id: "2", createAt: 1715676751919, content: n("你好") }, { role: "assistant", id: "3", createAt: 1715676751919, content: n("你好，请问有什么可以帮助您的吗？") }], [s, a] = i.useState({ model: "gpt-4o-mini", group: "", max_tokens: 0, temperature: 0 }), [r, o] = Sn(), [c, h] = i.useContext(Ft), [F, g] = i.useState({}), [p, m] = i.useState("You are a helpful assistant. You can help me by answering my questions. You can also ask me questions."), [d, E] = i.useState(u), [_, I] = i.useState([]), [T, H] = i.useState([]), [ae, Z] = i.useState(!0), [O, A] = i.useContext(Gt), Y = (f, y) => { a(x => ({ ...x, [f]: y })) }; i.useEffect(() => { r.get("expired") && b(n("未登录或登录已过期，请重新登录！")); let f = localStorage.getItem("status"); f && (f = JSON.parse(f), g(f)), N(), U() }, []); const N = async () => { let f = await W.get("/api/user/models"); const { success: y, message: x, data: S } = f.data; if (y) { let X = S.map(te => ({ label: te, value: te })); I(X) } else b(n(x)) }, U = async () => { let f = await W.get("/api/user/self/groups"); const { success: y, message: x, data: S } = f.data; if (y) { let X = Object.entries(S).map(([te, D]) => ({ label: D.desc, value: te, ratio: D.ratio })); if (X.length === 0) X = [{ label: n("用户分组"), value: "", ratio: 1 }]; else { const te = JSON.parse(localStorage.getItem("user")), D = c.user && c.user.group || te && te.group; if (D) { const B = X.findIndex(k => k.value === D); if (B > -1) { const k = X.splice(B, 1)[0]; X.unshift(k) } } } H(X), Y("group", X[0].value) } else b(n(x)) }, q = { border: "1px solid var(--semi-color-border)", borderRadius: "16px", margin: "0px 8px" }, w = () => { if (p !== "") return { role: "system", id: "1", createAt: 1715676751919, content: p } }; let V = f => { let y = new Ze("/pg/chat/completions", { headers: { "Content-Type": "application/json", "New-Api-User": Zn() }, method: "POST", payload: JSON.stringify(f) }); y.addEventListener("message", x => { if (x.data !== "[DONE]") { let S = JSON.parse(x.data); if (S.choices.length === 0) y.close(), P(); else { let X = S.choices[0].delta.content; X && j(X) } } else P() }), y.addEventListener("error", x => { j(x.data), P("error") }), y.addEventListener("readystatechange", x => { x.readyState >= 2 && y.status === void 0 && (y.close(), P()) }), y.stream() }; const C = i.useCallback((f, y) => { console.log("attachment: ", y), E(x => { const S = [...x, { role: "user", content: f, createAt: Date.now(), id: Vu() }]; return V((() => { let te = w(), D = S.map(B => ({ role: B.role, content: B.content })); return te && D.unshift(te), { messages: D, stream: !0, model: s.model, group: s.group, max_tokens: parseInt(s.max_tokens), temperature: s.temperature } })()), S.push({ role: "assistant", content: "", createAt: Date.now(), id: Vu(), status: "loading" }), S }) }, [w]), P = i.useCallback((f = "complete") => { E(y => { const x = y[y.length - 1]; return x.status === "complete" || x.status === "error" ? y : [...y.slice(0, -1), { ...x, status: f }] }) }, []), j = i.useCallback(f => { E(y => { const x = y[y.length - 1]; let S = { ...x }; return (x.status === "loading" || x.status === "incomplete") && (S = { ...S, content: (x.content || "") + f, status: "incomplete" }), [...y.slice(0, -1), S] }) }, []), R = () => O.isMobile ? e.jsx($, { icon: e.jsx(ts, {}), style: { position: "absolute", left: ae ? -10 : -20, top: "50%", transform: "translateY(-50%)", zIndex: 1e3, width: 40, height: 40, borderRadius: "0 20px 20px 0", padding: 0, boxShadow: "2px 0 8px rgba(0, 0, 0, 0.15)" }, onClick: () => Z(!ae), theme: "solid", type: "primary" }) : null; function v(f) { const { detailProps: y } = f, { clearContextNode: x, uploadNode: S, inputNode: X, sendNode: te, onClick: D } = y; return e.jsxs("div", { style: { margin: "8px 16px", display: "flex", flexDirection: "row", alignItems: "flex-end", borderRadius: 16, padding: 10, border: "1px solid var(--semi-color-border)" }, onClick: D, children: [X, te] }) } const l = i.useCallback(f => e.jsx(v, { ...f }), []); return e.jsxs(Fe, { style: { height: "100%" }, children: [(ae || !O.isMobile) && e.jsx(Fe.Sider, { style: { display: O.isMobile ? "block" : "initial" }, children: e.jsxs(Re, { style: q, children: [e.jsx("div", { style: { marginTop: 10 }, children: e.jsxs(ne.Text, { strong: !0, children: [n("分组"), "："] }) }), e.jsx(Ue, { placeholder: n("请选择分组"), name: "group", required: !0, selection: !0, onChange: f => { Y("group", f) }, value: s.group, autoComplete: "new-password", optionList: T, renderOptionItem: ds, style: { width: "100%" } }), e.jsx("div", { style: { marginTop: 10 }, children: e.jsxs(ne.Text, { strong: !0, children: [n("模型"), "："] }) }), e.jsx(Ue, { placeholder: n("请选择模型"), name: "model", required: !0, selection: !0, searchPosition: "dropdown", filter: !0, onChange: f => { Y("model", f) }, value: s.model, autoComplete: "new-password", optionList: _ }), e.jsx("div", { style: { marginTop: 10 }, children: e.jsx(ne.Text, { strong: !0, children: "Temperature：" }) }), e.jsx(Qs, { step: .1, min: .1, max: 1, value: s.temperature, onChange: f => { Y("temperature", f) } }), e.jsx("div", { style: { marginTop: 10 }, children: e.jsx(ne.Text, { strong: !0, children: "MaxTokens：" }) }), e.jsx(he, { placeholder: "MaxTokens", name: "max_tokens", required: !0, autoComplete: "new-password", defaultValue: 0, value: s.max_tokens, onChange: f => { Y("max_tokens", f) } }), e.jsx("div", { style: { marginTop: 10 }, children: e.jsx(ne.Text, { strong: !0, children: "System：" }) }), e.jsx(pt, { placeholder: "System Prompt", name: "system", required: !0, autoComplete: "new-password", autosize: !0, defaultValue: p, onChange: f => { m(f) } })] }) }), e.jsx(Fe.Content, { children: e.jsxs("div", { style: { height: "100%", position: "relative" }, children: [e.jsx(R, {}), e.jsx(Ys, { chatBoxRenderConfig: { renderChatBoxAction: () => e.jsx("div", {}) }, renderInputArea: l, roleConfig: wo, style: q, chats: d, onMessageSend: C, showClearContext: !0, onClear: () => { E([]) } })] }) })] }) }, Ju = n => { const [u, s] = Sn(), [a, r] = i.useContext(Ft), [o, c] = i.useState("处理中..."); i.useState(!0); let h = it(); const F = async (g, p, m) => { const d = await W.get(`/api/oauth/${n.type}?code=${g}&state=${p}`), { success: E, message: _, data: I } = d.data; if (E) _ === "bind" ? (ie("绑定成功！"), h("/setting")) : (r({ type: "login", payload: I }), localStorage.setItem("user", JSON.stringify(I)), $t(I), Nt(), ie("登录成功！"), h("/token")); else { b(_); { c("操作失败，重定向至登录界面中..."), h("/setting"); return } } }; return i.useEffect(() => { let g = u.get("code"), p = u.get("state"); F(g, p).then() }, []), e.jsx(Jn, { style: { minHeight: "300px" }, children: e.jsx(ba, { active: !0, inverted: !0, children: e.jsx(ja, { size: "large", children: o }) }) }) }, Bo = (n, u) => { switch (u.type) { case "set": return { ...n, status: u.payload }; case "unset": return { ...n, status: void 0 }; default: return n } }, Ns = { status: void 0 }, du = kt.createContext({ state: Ns, dispatch: () => null }), So = ({ children: n }) => { const [u, s] = kt.useReducer(Bo, Ns); return e.jsx(du.Provider, { value: [u, s], children: n }) }, ko = i.lazy(() => Qn(() => import("./index--_WPcRBS.js"), __vite__mapDeps([0, 1, 2, 3, 4, 5, 6, 7]))), _o = i.lazy(() => Qn(() => import("./index-DU0zzs9C.js"), __vite__mapDeps([8, 1, 2, 3, 9, 7, 5, 4, 6]))), To = i.lazy(() => Qn(() => import("./index-B0knQSRf.js"), __vite__mapDeps([10, 1, 2, 3, 4, 6, 5, 7]))); function Io() { return e.jsx(e.Fragment, { children: e.jsxs(ma, { children: [e.jsx(we, { path: "/", element: e.jsx(i.Suspense, { fallback: e.jsx(Ie, {}), children: e.jsx(ko, {}) }) }), e.jsx(we, { path: "/channel", element: e.jsx(Qe, { children: e.jsx(Dr, {}) }) }), e.jsx(we, { path: "/channel/edit/:id", element: e.jsx(i.Suspense, { fallback: e.jsx(Ie, {}), children: e.jsx(Kn, {}) }) }), e.jsx(we, { path: "/channel/add", element: e.jsx(i.Suspense, { fallback: e.jsx(Ie, {}), children: e.jsx(Kn, {}) }) }), e.jsx(we, { path: "/token", element: e.jsx(Qe, { children: e.jsx(vr, {}) }) }), e.jsx(we, { path: "/playground", element: e.jsx(Qe, { children: e.jsx(vo, {}) }) }), e.jsx(we, { path: "/redemption", element: e.jsx(Qe, { children: e.jsx(_r, {}) }) }), e.jsx(we, { path: "/user", element: e.jsx(Qe, { children: e.jsx(Wa, {}) }) }), e.jsx(we, { path: "/user/edit/:id", element: e.jsx(i.Suspense, { fallback: e.jsx(Ie, {}), children: e.jsx(Gn, {}) }) }), e.jsx(we, { path: "/user/edit", element: e.jsx(i.Suspense, { fallback: e.jsx(Ie, {}), children: e.jsx(Gn, {}) }) }), e.jsx(we, { path: "/user/reset", element: e.jsx(i.Suspense, { fallback: e.jsx(Ie, {}), children: e.jsx(Fr, {}) }) }), e.jsx(we, { path: "/login", element: e.jsx(i.Suspense, { fallback: e.jsx(Ie, {}), children: e.jsx(Ja, {}) }) }), e.jsx(we, { path: "/register", element: e.jsx(i.Suspense, { fallback: e.jsx(Ie, {}), children: e.jsx(Va, {}) }) }), e.jsx(we, { path: "/reset", element: e.jsx(i.Suspense, { fallback: e.jsx(Ie, {}), children: e.jsx(fr, {}) }) }), e.jsx(we, { path: "/oauth/github", element: e.jsx(i.Suspense, { fallback: e.jsx(Ie, {}), children: e.jsx(Ju, { type: "github" }) }) }), e.jsx(we, { path: "/oauth/linuxdo", element: e.jsx(i.Suspense, { fallback: e.jsx(Ie, {}), children: e.jsx(Ju, { type: "linuxdo" }) }) }), e.jsx(we, { path: "/setting", element: e.jsx(Qe, { children: e.jsx(i.Suspense, { fallback: e.jsx(Ie, {}), children: e.jsx(gr, {}) }) }) }), e.jsx(we, { path: "/topup", element: e.jsx(Qe, { children: e.jsx(i.Suspense, { fallback: e.jsx(Ie, {}), children: e.jsx(io, {}) }) }) }), e.jsx(we, { path: "/checkout-success", element: e.jsx(Qe, { children: e.jsx(i.Suspense, { fallback: e.jsx(Ie, {}), children: e.jsx(oo, {}) }) }) }), e.jsx(we, { path: "/log", element: e.jsx(Qe, { children: e.jsx(po, {}) }) }), e.jsx(we, { path: "/detail", element: e.jsx(Qe, { children: e.jsx(i.Suspense, { fallback: e.jsx(Ie, {}), children: e.jsx(_o, {}) }) }) }), e.jsx(we, { path: "/midjourney", element: e.jsx(Qe, { children: e.jsx(i.Suspense, { fallback: e.jsx(Ie, {}), children: e.jsx(yo, {}) }) }) }), e.jsx(we, { path: "/task", element: e.jsx(Qe, { children: e.jsx(i.Suspense, { fallback: e.jsx(Ie, {}), children: e.jsx(Do, {}) }) }) }), e.jsx(we, { path: "/pricing", element: e.jsx(i.Suspense, { fallback: e.jsx(Ie, {}), children: e.jsx(Eo, {}) }) }), e.jsx(we, { path: "/about", element: e.jsx(i.Suspense, { fallback: e.jsx(Ie, {}), children: e.jsx(To, {}) }) }), e.jsx(we, { path: "/chat/:id?", element: e.jsx(i.Suspense, { fallback: e.jsx(Ie, {}), children: e.jsx(fo, {}) }) }), e.jsx(we, { path: "/chat2link", element: e.jsx(Qe, { children: e.jsx(i.Suspense, { fallback: e.jsx(Ie, {}), children: e.jsx(Fo, {}) }) }) }), e.jsx(we, { path: "*", element: e.jsx(Qa, {}) })] }) }) } const Po = () => { const { t: n, i18n: u } = Ce(), [s, a] = i.useContext(Ft), [r, o] = i.useContext(Gt); let c = it(); const [h, F] = i.useState(u.language), g = Yn(), p = kn(), m = new Date, d = m.getMonth() === 0 && m.getDate() === 1; let E = [{ text: n("首页"), itemKey: "home", to: "/" }, { text: n("控制台"), itemKey: "detail", to: "/" }, { text: n("定价"), itemKey: "pricing", to: "/pricing" }, { text: n("关于"), itemKey: "about", to: "/about" }]; async function _() { await W.get("/api/user/logout"), ie(n("注销成功!")), a({ type: "logout" }), localStorage.removeItem("user"), c("/login") } const I = () => { Pn.init("root", {}), Pn.start(), setTimeout(() => { Pn.stop(), setTimeout(() => { window.location.reload() }, 1e4) }, 3e3) }, T = nu(), H = xs(); i.useEffect(() => { T === "dark" ? document.body.setAttribute("theme-mode", "dark") : document.body.removeAttribute("theme-mode"); const Z = document.querySelector("iframe"); Z && Z.contentWindow.postMessage({ themeMode: T }, "*"), d && console.log("Happy New Year!") }, [T]), i.useEffect(() => { const Z = O => { F(O); const A = document.querySelector("iframe"); A && A.contentWindow.postMessage({ lang: O }, "*") }; return u.on("languageChanged", Z), () => { u.off("languageChanged", Z) } }, [u]); const ae = Z => { u.changeLanguage(Z) }; return e.jsx(e.Fragment, { children: e.jsx(Fe, { children: e.jsx("div", { style: { width: "100%" }, children: e.jsx(At, { className: "topnav", mode: "horizontal", renderWrapper: ({ itemElement: Z, isSubNav: O, isInSubNav: A, props: Y }) => { const N = { about: "/about", login: "/login", register: "/register", pricing: "/pricing", detail: "/detail", home: "/", chat: "/chat" }; return e.jsx("div", { onClick: U => { Y.itemKey === "home" ? (o({ type: "SET_INNER_PADDING", payload: !1 }), o({ type: "SET_SIDER", payload: !1 })) : (o({ type: "SET_INNER_PADDING", payload: !0 }), r.isMobile || o({ type: "SET_SIDER", payload: !0 })) }, children: e.jsx(Qt, { className: "header-bar-text", style: { textDecoration: "none" }, to: N[Y.itemKey], children: Z }) }) }, selectedKeys: [], onSelect: Z => { }, header: r.isMobile ? { logo: e.jsx(e.Fragment, { children: r.showSider ? e.jsx($, { icon: e.jsx(Xs, {}), theme: "light", "aria-label": n("闭侧边栏"), onClick: () => o({ type: "SET_SIDER", payload: !1 }) }) : e.jsx($, { icon: e.jsx(Zs, {}), theme: "light", "aria-label": n("展开侧边栏"), onClick: () => o({ type: "SET_SIDER", payload: !0 }) }) }) } : { logo: e.jsx("img", { src: p, alt: "logo" }), text: g }, items: E, footer: e.jsxs(e.Fragment, { children: [d && e.jsx(et, { position: "bottomRight", render: e.jsx(et.Menu, { children: e.jsx(et.Item, { onClick: I, children: "Happy New Year!!!" }) }), children: e.jsx(At.Item, { itemKey: "new-year", text: "🎉" }) }), e.jsx(e.Fragment, { children: e.jsx(fn, { checkedText: "🌞", size: r.isMobile ? "default" : "large", checked: T === "dark", uncheckedText: "🌙", onChange: Z => { H(Z) } }) }), e.jsx(et, { position: "bottomRight", render: e.jsxs(et.Menu, { children: [e.jsx(et.Item, { onClick: () => ae("zh"), type: h === "zh" ? "primary" : "tertiary", children: "中文" }), e.jsx(et.Item, { onClick: () => ae("en"), type: h === "en" ? "primary" : "tertiary", children: "English" })] }), children: e.jsx(At.Item, { itemKey: "language", icon: e.jsx(ea, {}) }) }), s.user ? e.jsx(e.Fragment, { children: e.jsxs(et, { position: "bottomRight", render: e.jsx(et.Menu, { children: e.jsx(et.Item, { onClick: _, children: n("退出") }) }), children: [e.jsx(Vn, { size: "small", color: Xt(s.user.username), style: { margin: 4 }, children: s.user.username[0] }), r.isMobile ? null : e.jsx(mt, { children: s.user.username })] }) }) : e.jsxs(e.Fragment, { children: [e.jsx(At.Item, { itemKey: "login", text: r.isMobile ? null : n("登录"), icon: e.jsx(ns, {}) }), !r.isMobile && e.jsx(At.Item, { itemKey: "register", text: n("注册"), icon: e.jsx(us, {}) })] })] }) }) }) }) }) }, Mo = () => { const { t: n } = Ce(), [u, s] = i.useContext(Gt); i.useContext(du); const a = localStorage.getItem("default_collapse_sidebar") === "true", [r, o] = i.useState(["home"]), [c, h] = i.useState(a), [F, g] = i.useState([]); nu(), xs(); const p = { home: "/", channel: "/channel", token: "/token", redemption: "/redemption", topup: "/topup", user: "/user", log: "/log", midjourney: "/midjourney", setting: "/setting", about: "/about", chat: "/chat", detail: "/detail", pricing: "/pricing", task: "/task", playground: "/playground" }, m = i.useMemo(() => [{ text: "Playground", itemKey: "playground", to: "/playground", icon: e.jsx(ta, {}) }, { text: n("渠道"), itemKey: "channel", to: "/channel", icon: e.jsx(na, {}), className: Ve() ? "semi-navigation-item-normal" : "tableHiddle" }, { text: n("聊天"), itemKey: "chat", items: F, icon: e.jsx(ua, {}) }, { text: n("令牌"), itemKey: "token", to: "/token", icon: e.jsx(us, {}) }, { text: n("数据看板"), itemKey: "detail", to: "/detail", icon: e.jsx(sa, {}), className: localStorage.getItem("enable_data_export") === "true" ? "semi-navigation-item-normal" : "tableHiddle" }, { text: n("兑换码"), itemKey: "redemption", to: "/redemption", icon: e.jsx(aa, {}), className: Ve() ? "semi-navigation-item-normal" : "tableHiddle" }, { text: n("钱包"), itemKey: "topup", to: "/topup", icon: e.jsx(ra, {}) }, { text: n("用户管理"), itemKey: "user", to: "/user", icon: e.jsx(ns, {}), className: Ve() ? "semi-navigation-item-normal" : "tableHiddle" }, { text: n("日志"), itemKey: "log", to: "/log", icon: e.jsx(ia, {}) }, { text: n("绘图"), itemKey: "midjourney", to: "/midjourney", icon: e.jsx(oa, {}), className: localStorage.getItem("enable_drawing") === "true" ? "semi-navigation-item-normal" : "tableHiddle" }, { text: n("异步任务"), itemKey: "task", to: "/task", icon: e.jsx(la, {}), className: localStorage.getItem("enable_task") === "true" ? "semi-navigation-item-normal" : "tableHiddle" }, { text: n("设置"), itemKey: "setting", to: "/setting", icon: e.jsx(ts, {}) }], [localStorage.getItem("enable_data_export"), localStorage.getItem("enable_drawing"), localStorage.getItem("enable_task"), localStorage.getItem("chat_link"), F, Ve(), n]); return i.useEffect(() => { let d = window.location.pathname.split("/")[1]; if (d === "" && (d = "home"), o([d]), !localStorage.getItem("chat_link")) { let _ = localStorage.getItem("chats"); if (_) try { if (_ = JSON.parse(_), Array.isArray(_)) { let I = []; for (let T = 0; T < _.length; T++) { let H = {}; for (let ae in _[T]) H.text = ae, H.itemKey = "chat" + T, H.to = "/chat/" + T; I.push(H) } g(I) } } catch (I) { console.error(I), b("聊天数据解析失败") } } h(localStorage.getItem("default_collapse_sidebar") === "true") }, []), e.jsx(e.Fragment, { children: e.jsx(At, { style: { maxWidth: 220, height: "100%" }, defaultIsCollapsed: localStorage.getItem("default_collapse_sidebar") === "true", isCollapsed: c, onCollapseChange: d => { h(d) }, selectedKeys: r, renderWrapper: ({ itemElement: d, isSubNav: E, isInSubNav: _, props: I }) => { if (!localStorage.getItem("chat_link")) { let H = localStorage.getItem("chats"); if (H && (H = JSON.parse(H), Array.isArray(H) && H.length > 0)) { for (let ae = 0; ae < H.length; ae++)p["chat" + ae] = "/chat/" + ae; H.length > 1 ? p.chat && delete p.chat : p.chat = "/chat/0" } } return e.jsx(Qt, { style: { textDecoration: "none" }, to: p[I.itemKey], children: d }) }, items: m, onSelect: d => { d.itemKey.toString().startsWith("chat") ? s({ type: "SET_INNER_PADDING", payload: !1 }) : s({ type: "SET_INNER_PADDING", payload: !0 }), o([d.itemKey]) }, footer: e.jsx(e.Fragment, {}), children: e.jsx(At.Footer, { collapseButton: !0 }) }) }) }, Oo = () => { const { t: n } = Ce(); Yn(); const [u, s] = i.useState(Ba()); let a = 5; const r = () => { let c = localStorage.getItem("footer_html"); c && s(c) }, o = e.jsxs("div", { className: "custom-footer", children: [e.jsxs("a", { href: "https://github.com/Calcium-Ion/new-api", target: "_blank", rel: "noreferrer", children: ["New API ", void 0, " "] }), n("由"), " ", e.jsx("a", { href: "https://github.com/Calcium-Ion", target: "_blank", rel: "noreferrer", children: "Calcium-Ion" }), " ", n("开发，基于"), " ", e.jsx("a", { href: "https://github.com/songquanpeng/one-api", target: "_blank", rel: "noreferrer", children: "One API" })] }); return i.useEffect(() => { const c = setInterval(() => { if (a <= 0) { clearInterval(c); return } a--, r() }, 200); return () => clearTimeout(c) }, []), e.jsx("div", { style: { textAlign: "center" }, children: u ? e.jsx("div", { className: "custom-footer", dangerouslySetInnerHTML: { __html: u } }) : o }) }, { Sider: Lo, Content: Ro, Header: No, Footer: el } = Fe, $o = () => { const [n, u] = i.useContext(Ft), [s, a] = i.useContext(du), [r, o] = i.useContext(Gt), { i18n: c } = Ce(), h = () => { let g = localStorage.getItem("user"); if (g) { let p = JSON.parse(g); u({ type: "login", payload: p }) } }, F = async () => { try { const g = await W.get("/api/status"), { success: p, data: m } = g.data; p ? (a({ type: "set", payload: m }), Ga(m)) : b("Unable to connect to server") } catch { b("Failed to load status") } }; return i.useEffect(() => { h(), F().catch(console.error); let g = Yn(); g && (document.title = g); let p = kn(); if (p) { let d = document.querySelector("link[rel~='icon']"); d && (d.href = p) } const m = localStorage.getItem("i18nextLng"); m && c.changeLanguage(m) }, [c]), e.jsxs(Fe, { style: { height: "100vh", display: "flex", flexDirection: "column" }, children: [e.jsx(No, { children: e.jsx(Po, {}) }), e.jsxs(Fe, { style: { flex: 1, overflow: "hidden" }, children: [e.jsx(Lo, { children: r.showSider ? e.jsx(Mo, {}) : null }), e.jsxs(Fe, { children: [e.jsx(Ro, { style: { overflowY: "auto", padding: r.shouldInnerPadding ? "24px" : "0" }, children: e.jsx(Io, {}) }), e.jsx(Fe.Footer, { children: e.jsx(Oo, {}) })] })] }), e.jsx(xa, {})] }) }, Uo = {
  主页: "Home", 控制台: "Console", "$%.6f 额度": "$%.6f quota", "%d 点额度": "%d point quota", 尚未实现: "Not yet implemented", 余额不足: "Insufficient quota", 危险操作: "Dangerous operation", 输入你的账户名: "Enter your account name", 确认删除: "Confirm deletion", 确认绑定: "Confirm binding", "您正在删除自己的帐户，将清空所有数据且不可恢复": "You are deleting your account. All data will be cleared and cannot be recovered.", "通道「%s」（#%d）已被禁用": "Channel %s (#%d) has been disabled", "通道「%s」（#%d）已被禁用，原因：%s": "Channel %s (#%d) has been disabled, reason: %s", 测试已在运行中: "Test is already running", "响应时间 %.2fs 超过阈值 %.2fs": "Response time %.2fs exceeds threshold %.2fs", 通道测试完成: "Channel test completed", "通道测试完成，如果没有收到禁用通知，说明所有通道都正常": "Channel test completed. If no disable notification received, all channels are functioning normally", "无法连接至 GitHub 服务器，请稍后重试！": "Unable to connect to GitHub server. Please try again later!", "返回值非法，用户字段为空，请稍后重试！": "Invalid return value, user field is empty. Please try again later!", "管理员未开启通过 GitHub 登录以及注册": "Administrator has not enabled GitHub login and registration", 管理员关闭了新用户注册: "Administrator has disabled new user registration", 用户已被封禁: "User has been banned", "该 GitHub 账户已被绑定": "This GitHub account is already bound", 邮箱地址已被占用: "Email address is already in use", "%s邮箱验证邮件": "%s Email verification", "<p>您好，你正在进行%s邮箱验证。</p>": "<p>Hello, you are verifying your %s email.</p>", "<p>您的验证码为: <strong>%s</strong></p>": "<p>Your verification code is: <strong>%s</strong></p>", "<p>验证码 %d 分钟内有效，如果不是本人操作，请忽略。</p>": "<p>Verification code is valid for %d minutes. If you did not request this, please ignore.</p>", 无效的参数: "Invalid parameter", 该邮箱地址未注册: "This email address is not registered", "%s密码重置": "%s Password reset", "<p>您好，你正在进行%s密码重置。</p>": "<p>Hello, you are resetting your %s password.</p>", "<p>点击<a href='%s'>此处</a>进行密码重置。</p>": "<p>Click <a href='%s'>here</a> to reset your password.</p>", "<p>重置链接 %d 分钟内有效，如果不是本人操作，请忽略。</p>": "<p>Reset link is valid for %d minutes. If you did not request this, please ignore.</p>", 重置链接非法或已过期: "Reset link is invalid or expired", "无法启用 GitHub OAuth，请先填入 GitHub Client ID 以及 GitHub Client Secret！": "Unable to enable GitHub OAuth. Please enter GitHub Client ID and GitHub Client Secret first!", "无法启用微信登录，请先填入微信登录相关配置信息！": "Unable to enable WeChat login. Please enter WeChat login configuration first!", "无法启用 Turnstile 校验，请先填入 Turnstile 校验相关配置信息！": "Unable to enable Turnstile verification. Please enter Turnstile verification configuration first!", "兑换码名称长度必须在1-20之间": "Redemption code name must be between 1-20 characters", 兑换码个数必须大于0: "Number of redemption codes must be greater than 0", "一次兑换码批量生成的个数不能大于 100": "Cannot generate more than 100 redemption codes at once", "当前分组上游负载已饱和，请稍后再试": "Current group upstream load is saturated. Please try again later", 令牌名称过长: "Token name is too long", "令牌已过期，无法启用，请先修改令牌过期时间，或者设置为永不过期": "Token has expired and cannot be enabled. Please modify token expiration time or set to never expire", "令牌可用额度已用尽，无法启用，请先修改令牌剩余额度，或者设置为无限额度": "Token quota is depleted and cannot be enabled. Please modify remaining quota or set to unlimited", 管理员关闭了密码登录: "Administrator has disabled password login", "无法保存会话信息，请重试": "Unable to save session information. Please try again", "管理员关闭了通过密码进行注册，请使用第三方账户验证的形式进行注册": "Administrator has disabled password registration. Please register using third-party account verification", "输入不合法 ": "Invalid input ", "管理员开启了邮箱验证，请输入邮箱地址和验证码": "Administrator has enabled email verification. Please enter email address and verification code", 验证码错误或已过期: "Verification code is incorrect or expired", 无权获取同级或更高等级用户的信息: "No permission to access information of users at same or higher level", "请重试，系统生成的 UUID 竟然重复了！": "Please try again, system generated UUID is duplicated!", 输入不合法: "Invalid input", 无权更新同权限等级或更高权限等级的用户信息: "No permission to update user information at same or higher permission level", "管理员将用户额度从 %s修改为 %s": "Administrator modified user quota from %s to %s", 无权删除同权限等级或更高权限等级的用户: "No permission to delete users at same or higher permission level", 无法创建权限大于等于自己的用户: "Cannot create users with permissions greater than or equal to your own", 用户不存在: "User does not exist", 无法禁用超级管理员用户: "Cannot disable super administrator user", 无法删除超级管理员用户: "Cannot delete super administrator user", 普通管理员用户无法提升其他用户为管理员: "Regular administrator cannot promote other users to administrator", 该用户已经是管理员: "This user is already an administrator", 无法降级超级管理员用户: "Cannot downgrade super administrator user", 该用户已经是普通用户: "This user is already a regular user", 管理员未开启通过微信登录以及注册: "Administrator has not enabled WeChat login and registration", 该微信账号已被绑定: "This WeChat account is already bound", "无权进行此操作，未登录且未提供 access token": "No permission for this operation: not logged in and no access token provided", "无权进行此操作，access token 无效": "No permission for this operation: invalid access token", "无权进行此操作，权限不足": "No permission for this operation: insufficient permissions", 普通用户不支持指定渠道: "Regular users cannot specify channels", "无效的渠道 ID": "Invalid channel ID", 该渠道已被禁用: "This channel has been disabled", 无效的请求: "Invalid request", 无可用渠道: "No available channels", "Turnstile token 为空": "Turnstile token is empty", "Turnstile 校验失败，请刷新重试！": "Turnstile verification failed. Please refresh and try again!", "id 为空！": "ID is empty!", 未提供兑换码: "No redemption code provided", "无效的 user id": "Invalid user ID", 无效的兑换码: "Invalid redemption code", 该兑换码已被使用: "This redemption code has been used", "通过兑换码充值 %s": "Recharge %s via redemption code", 未提供令牌: "No token provided", 该令牌状态不可用: "This token status is unavailable", 该令牌已过期: "This token has expired", 该令牌额度已用尽: "This token's quota is depleted", 无效的令牌: "Invalid token", "id 或 userId 为空！": "ID or userID is empty!", "quota 不能为负数！": "Quota cannot be negative!", 令牌额度不足: "Insufficient token quota", 用户额度不足: "Insufficient user quota", 您的额度即将用尽: "Your quota is almost depleted", 您的额度已用尽: "Your quota is depleted", "%s，当前剩余额度为 %d，为了不影响您的使用，请及时充值。<br/>充值链接：<a href='%s'>%s</a>": "%s, current remaining quota is %d. To avoid service interruption, please recharge promptly.<br/>Recharge link: <a href='%s'>%s</a>", "affCode 为空！": "Affiliate code is empty!", "新用户注册赠送 %s": "New user registration bonus: %s", "使用邀请码赠送 %s": "Invitation code bonus: %s", "邀请用户赠送 %s": "Referral bonus: %s", 用户名或密码为空: "Username or password is empty", "用户名或密码错误，或用户已被封禁": "Username or password is incorrect, or user has been banned", "email 为空！": "Email is empty!", "GitHub id 为空！": "GitHub ID is empty!", "WeChat id 为空！": "WeChat ID is empty!", "username 为空！": "Username is empty!", "邮箱地址或密码为空！": "Email address or password is empty!", "OpenAI 接口聚合管理，支持多种渠道包括 Azure，可用于二次分发管理 key，仅单可执行文件，已打包好 Docker 镜像，一键部署，开箱即用": "OpenAI API aggregation management system supporting multiple channels including Azure. Can be used for key management and redistribution. Single executable file, pre-packaged Docker image, one-click deployment, ready to use", 未知类型: "Unknown type", 不支持: "Not supported", "操作成功完成！": "Operation completed successfully!", 已启用: "Enabled", 已禁用: "Disabled", 未知状态: "Unknown status", " 秒": "s", " 分钟 ": "m", " 小时 ": "h", " 天 ": "d", " 个月 ": "M", " 年 ": "y", 未测试: "Not tested", "通道 ${name} 测试成功，耗时 ${time.toFixed(2)} 秒。": "Channel ${name} test successful, took ${time.toFixed(2)} seconds.", "已成功开始测试所有已启用通道，请刷新页面查看结果。": "Successfully started testing all enabled channels. Please refresh page to view results.", "通道 ${name} 余额更新成功！": "Channel ${name} quota updated successfully!", "已更新完毕所有已启用通道余额！": "Updated quota for all enabled channels!", "搜索渠道的 ID，名称和密钥 ...": "Search channel ID, name and key...", 名称: "Name", 分组: "Group", 类型: "Type", 状态: "Status", 响应时间: "Response time", 余额: "Balance", 操作: "Actions", 未更新: "Not updated", 测试: "Test", 更新余额: "Update balance", 删除: "Delete", "删除渠道 {channel.name}": "Delete channel {channel.name}", 禁用: "Disable", 启用: "Enable", 编辑: "Edit", 添加新的渠道: "Add new channel", 测试所有已启用通道: "Test all enabled channels", 更新所有已启用通道余额: "Update balance for all enabled channels", 刷新: "Refresh", "处理中...": "Processing...", "绑定成功！": "Binding successful!", "登录成功！": "Login successful!", "操作失败，重定向至登录界面中...": "Operation failed, redirecting to login page...", "出现错误，第 ${count} 次重试中...": "Error occurred, retry attempt ${count}...", 首页: "Home", 渠道: "Channels", 令牌: "Tokens", 兑换: "Redeem", 充值: "Recharge", 用户: "Users", 日志: "Logs", 设置: "Settings", 关于: "About", 价格: "Pricing", 聊天: "Chat", "注销成功!": "Logout successful!", 注销: "Logout", 登录: "Login", 注册: "Register", "加载{name}中...": "Loading {name}...", "未登录或登录已过期，请重新登录！": "Not logged in or session expired. Please login again!", 用户登录: "User Login", 密码: "Password", "忘记密码？": "Forgot password?", 点击重置: "Click to reset", "； 没有账户？": "; No account?", 点击注册: "Click to register", "微信扫码关注公众号，输入「验证码」获取验证码（三分钟内有效）": 'Scan WeChat QR code to follow official account, enter "verification code" to get code (valid for 3 minutes)', 全部用户: "All users", 当前用户: "Current user", "全部'": "All'", "充值'": "Recharge'", "消费'": "Consume'", "管理'": "Manage'", "系统'": "System'", " 充值 ": " Recharge ", " 消费 ": " Consume ", " 管理 ": " Manage ", " 系统 ": " System ", " 未知 ": " Unknown ", 时间: "Time", 详情: "Details", 选择模式: "Select mode", 选择明细分类: "Select detail category", "模型倍率不是合法的 JSON 字符串": "Model ratio is not a valid JSON string", 通用设置: "General Settings", 充值链接: "Recharge Link", 例如发卡网站的购买链接: "E.g., purchase link from card issuing website", 聊天页面链接: "Chat Page Link", "例如 ChatGPT Next Web 的部署地址": "E.g., ChatGPT Next Web deployment address", 单位美元额度: "Quota per USD", 一单位货币能兑换的额度: "Quota exchangeable per unit currency", 启用额度消费日志记录: "Enable quota consumption logging", 以货币形式显示额度: "Display quota as currency", "相关 API 显示令牌额度而非用户额度": "Related APIs show token quota instead of user quota", 保存通用设置: "Save General Settings", 监控设置: "Monitoring Settings", 最长响应时间: "Maximum Response Time", 单位秒: "Unit: seconds", 当运行通道全部测试时: "When running all channel tests", 超过此时间将自动禁用通道: "Channels exceeding this time will be automatically disabled", 额度提醒阈值: "Quota reminder threshold", 低于此额度时将发送邮件提醒用户: "Email reminder will be sent when quota falls below this", 失败时自动禁用通道: "Automatically disable channel on failure", 保存监控设置: "Save Monitoring Settings", 额度设置: "Quota Settings", 新用户初始额度: "Initial quota for new users", 例如: "For example", 请求预扣费额度: "Pre-deduction quota for requests", 请求结束后多退少补: "Adjust after request completion", 邀请新用户奖励额度: "Referral bonus quota", 新用户使用邀请码奖励额度: "New user invitation code bonus quota", 保存额度设置: "Save Quota Settings", 倍率设置: "Ratio Settings", 模型倍率: "Model ratio", "为一个 JSON 文本": "Is a JSON text", 键为模型名称: "Key is model name", 值为倍率: "Value is ratio", 分组倍率: "Group ratio", 键为分组名称: "Key is group name", 保存倍率设置: "Save Ratio Settings", 已是最新版本: "Is the latest version", 检查更新: "Check for updates", 公告: "Announcement", "在此输入新的公告内容，支持 Markdown & HTML 代码": "Enter the new announcement content here, supports Markdown & HTML code", 保存公告: "Save Announcement", 个性化设置: "Personalization Settings", 系统名称: "System Name", 在此输入系统名称: "Enter the system name here", 设置系统名称: "Set system name", Cryptomus支付有效期: "Cryptomus Payment Lifetime", "有効期限（分）を入力してください：最小5分、最大720分": "Enter the Lifetime (minutes): Minimum 5, Maximum 720", 设置有效期: "Set the Lifetime", 图片地址: "Image URL", "在此输入 Logo 图片地址": "Enter the Logo image URL here", 首页内容: "Home Page Content", "在此输入首页内容，支持 Markdown & HTML 代码，设置后首页的状态信息将不再显示。如果输入的是一个链接，则会使用该链接作为 iframe 的 src 属性，这允许你设置任意网页作为首页": "Enter the home page content here, supports Markdown", 保存首页内容: "Save Home Page Content", "在此输入新的关于内容，支持 Markdown & HTML 代码。如果输入的是一个链接，则会使用该链接作为 iframe 的 src 属性，这允许你设置任意网页作为关于页面": "Enter new about content here, support Markdown", 保存关于: "Save About", "移除 One API 的版权标识必须首先获得授权，项目维护需要花费大量精力，如果本项目对你有意义，请主动支持本项目": "Removal of One API copyright mark must first be authorized. Project maintenance requires a lot of effort. If this project is meaningful to you, please actively support it.", 页脚: "Footer", "在此输入新的页脚，留空则使用默认页脚，支持 HTML 代码": "Enter the new footer here, leave blank to use the default footer, supports HTML code.", 设置页脚: "Set Footer", 新版本: "New Version", 关闭: "Close", 密码已重置并已复制到剪贴板: "Password has been reset and copied to clipboard", 密码重置确认: "Password Reset Confirmation", 邮箱地址: "Email address", 提交: "Submit", 请稍后几秒重试: "Please retry in a few seconds", 正在检查用户环境: "Checking user environment", 重置邮件发送成功: "Reset mail sent successfully", 请检查邮箱: "Please check your email", 密码重置: "Password Reset", 令牌已重置并已复制到剪贴板: "Token has been reset and copied to clipboard", 邀请链接已复制到剪切板: "Invitation link has been copied to clipboard", 微信账户绑定成功: "WeChat account binding succeeded", 验证码发送成功: "Verification code sent successfully", 邮箱账户绑定成功: "Email account binding succeeded", 注意: "Note", 此处生成的令牌用于系统管理: "The token generated here is used for system management", "而非用于请求 OpenAI 相关的服务": "Not for requesting OpenAI related services", 请知悉: "Please be aware", 更新个人信息: "Update Personal Information", 生成系统访问令牌: "Generate System Access Token", 复制邀请链接: "Copy Invitation Link", 账号绑定: "Account Binding", 绑定微信账号: "Bind WeChat Account", 微信扫码关注公众号: "Scan the QR code with WeChat to follow the official account", 输入: "Enter", 验证码: "Verification Code", 获取验证码: "Get Verification Code", 三分钟内有效: "Valid for three minutes", 绑定: "Bind", "绑定 GitHub 账号": "Bind GitHub Account", 绑定邮箱地址: "Bind Email Address", 输入邮箱地址: "Enter Email Address", 未使用: "Unused", 已使用: "Used", 操作成功完成: "Operation successfully completed", "搜索兑换码的 ID 和名称": "Search for ID and name", 额度: "Quota", 创建时间: "Creation Time", 兑换时间: "Redemption Time", 尚未兑换: "Not yet redeemed", 已复制到剪贴板: "Copied to clipboard", 无法复制到剪贴板: "Unable to copy to clipboard", 请手动复制: "Please copy manually", 已将兑换码填入搜索框: "The voucher code has been filled into the search box", 复制: "Copy", 添加新的兑换码: "Add a new voucher", "密码长度不得小于 8 位": "Password length must not be less than 8 characters", 两次输入的密码不一致: "The two passwords entered do not match", 注册成功: "Registration succeeded", "请稍后几秒重试，Turnstile 正在检查用户环境": "Please retry in a few seconds, Turnstile is checking user environment", "验证码发送成功，请检查你的邮箱": "Verification code sent successfully, please check your email", 新用户注册: "New User Registration", "输入用户名，最长 12 位": "Enter username, up to 12 characters", "输入密码，最短 8 位，最长 20 位": "Enter password, at least 8 characters and up to 20 characters", 输入验证码: "Enter Verification Code", 已有账户: "Already have an account", 点击登录: "Click to log in", 服务器地址: "Server Address", 更新服务器地址: "Update Server Address", 配置登录注册: "Configure Login/Registration", 允许通过密码进行登录: "Allow login via password", 允许通过密码进行注册: "Allow registration via password", 通过密码注册时需要进行邮箱验证: "Email verification is required when registering via password", "允许通过 GitHub 账户登录 & 注册": "Allow login & registration via GitHub account", "允许通过微信登录 & 注册": "Allow login & registration via WeChat", "允许新用户注册（此项为否时，新用户将无法以任何方式进行注册": "Allow new user registration (if this option is off, new users will not be able to register in any way", "启用 Turnstile 用户校验": "Enable Turnstile user verification", "配置 SMTP": "Configure SMTP", 用以支持系统的邮件发送: "To support the system email sending", "SMTP 服务器地址": "SMTP Server Address", "例如：smtp.qq.com": "For example: smtp.qq.com", "SMTP 端口": "SMTP Port", "默认: 587": "Default: 587", "SMTP 账户": "SMTP Account", 通常是邮箱地址: "Usually an email address", 发送者邮箱: "Sender email", 通常和邮箱地址保持一致: "Usually consistent with the email address", "SMTP 访问凭证": "SMTP Access Credential", 敏感信息不会发送到前端显示: "Sensitive information will not be displayed in the frontend", "保存 SMTP 设置": "Save SMTP Settings", "配置 GitHub OAuth App": "Configure GitHub OAuth App", "用以支持通过 GitHub 进行登录注册": "To support login & registration via GitHub", 点击此处: "click here", "管理你的 GitHub OAuth App": "Manage your GitHub OAuth App", "输入你注册的 GitHub OAuth APP 的 ID": "Enter your registered GitHub OAuth APP ID", "保存 GitHub OAuth 设置": "Save GitHub OAuth Settings", "配置 WeChat Server": "Configure WeChat Server", 用以支持通过微信进行登录注册: "To support login & registration via WeChat", "了解 WeChat Server": "Learn about WeChat Server", "WeChat Server 访问凭证": "WeChat Server Access Credential", 微信公众号二维码图片链接: "WeChat Public Account QR Code Image Link", 输入一个图片链接: "Enter an image link", "保存 WeChat Server 设置": "Save WeChat Server Settings", "配置 Turnstile": "Configure Turnstile", 用以支持用户校验: "To support user verification", "管理你的 Turnstile Sites，推荐选择 Invisible Widget Type": "Manage your Turnstile Sites, recommend selecting Invisible Widget Type", "输入你注册的 Turnstile Site Key": "Enter your registered Turnstile Site Key", "保存 Turnstile 设置": "Save Turnstile Settings", 已过期: "Expired", 已耗尽: "Exhausted", "搜索令牌的名称 ...": "Search for the name of the token...", 已用额度: "Quota used", 剩余额度: "Remaining quota", 过期时间: "Expiration time", 无: "None", 无限制: "Unlimited", 永不过期: "Never expires", "无法复制到剪贴板，请手动复制，已将令牌填入搜索框": "Unable to copy to clipboard, please copy manually, the token has been entered into the search box", 删除令牌: "Delete Token", 添加新的令牌: "Add New Token", 普通用户: "Normal User", 管理员: "Admin", 超级管理员: "Super Admin", 未知身份: "Unknown Identity", 已激活: "Activated", 已封禁: "Banned", "搜索用户的 ID，用户名，显示名称，以及邮箱地址 ...": "Search user ID, username, display name, and email address...", 用户名: "Username", 统计信息: "Statistics", 用户角色: "User Role", 未绑定邮箱地址: "Email not bound", 请求次数: "Number of Requests", 提升: "Promote", 降级: "Demote", 删除用户: "Delete User", 添加新的用户: "Add New User", 自定义: "Custom", 等价金额: "Equivalent Amount", "未登录或登录已过期，请重新登录": "Not logged in or login has expired, please log in again", "请求次数过多，请稍后再试": "Too many requests, please try again later", "服务器内部错误，请联系管理员": "Server internal error, please contact the administrator", "本站仅作演示之用，无服务端": "This site is for demonstration purposes only, no server-side", "超级管理员未设置充值链接！": "Super administrator has not set the recharge link!", "错误：": "Error: ", "新版本可用：${data.version}，请使用快捷键 Shift + F5 刷新页面": "New version available: ${data.version}, please refresh the page using shortcut Shift + F5", 无法正常连接至服务器: "Unable to connect to the server normally", 管理渠道: "Manage Channels", 系统状况: "System Status", 系统信息: "System Information", 系统信息总览: "System Information Overview", 版本: "Version", 源码: "Source Code", 启动时间: "Startup Time", 系统配置: "System Configuration", 系统配置总览: "System Configuration Overview", 邮箱验证: "Email Verification", 未启用: "Not Enabled", "GitHub 身份验证": "GitHub Authentication", 微信身份验证: "WeChat Authentication", "Turnstile 用户校验": "Turnstile User Verification", 创建新的渠道: "Create New Channel", 镜像: "Mirror", "请输入镜像站地址，格式为：https://domain.com，可不填，不填则使用渠道默认值": "Please enter the mirror site address, the format is: https://domain.com, it can be left blank, if left blank, the default value of the channel will be used", 模型: "Model", 请选择该通道所支持的模型: "Please select the model supported by the channel", 填入基础模型: "Fill in the basic model", 填入所有模型: "Fill in all models", 清除所有模型: "Clear all models", 密钥: "Key", 请输入密钥: "Please enter the key", 批量创建: "Batch Create", 更新渠道信息: "Update Channel Information", 我的令牌: "My Tokens", 管理兑换码: "Manage Redeem Codes", 兑换码: "Redeem Code", 管理用户: "Manage Users", 额度明细: "Quota Details", 个人设置: "Personal Settings", 运营设置: "Operation Settings", 系统设置: "System Settings", 其他设置: "Other Settings", 项目仓库地址: "Project Repository Address", "可在设置页面设置关于内容，支持 HTML & Markdown": "You can set the content about in the settings page, support HTML & Markdown", 由: "developed by", "开发，基于": "based on", "MIT 协议": "MIT License", 充值额度: "Recharge Quota", 获取兑换码: "Get Redeem Code", 一个月后过期: "Expires after one month", 一天后过期: "Expires after one day", 一小时后过期: "Expires after one hour", 一分钟后过期: "Expires after one minute", 创建新的令牌: "Create New Token", "令牌分组，默认为用户的分组": "Token group, default is the your's group", "IP白名单（请勿过度信任此功能）": "IP whitelist (do not overly trust this function)", "注意，令牌的额度仅用于限制令牌本身的最大额度使用量，实际的使用受到账户的剩余额度限制。": "Note that the quota of the token is only used to limit the maximum quota usage of the token itself, and the actual usage is limited by the remaining quota of the account.", 设为无限额度: "Set to unlimited quota", 更新令牌信息: "Update Token Information", "请输入充值码！": "Please enter the recharge code!", 请输入名称: "Please enter a name", "请输入密钥，一行一个": "Please enter the key, one per line", 请输入额度: "Please enter the quota", 令牌创建成功: "Token created successfully", 令牌更新成功: "Token updated successfully", "充值成功！": "Recharge successful!", 更新用户信息: "Update User Information", 请输入新的用户名: "Please enter a new username", 请输入新的密码: "Please enter a new password", 显示名称: "Display Name", 请输入新的显示名称: "Please enter a new display name", "已绑定的 GitHub 账户": "GitHub Account Bound", "此项只读，要用户通过个人设置页面的相关绑��按钮进��绑���，不可直接修改": "This item is read-only. Users need to bind through the relevant binding button on the personal settings page, and cannot be modified directly", 已绑定的微信账户: "WeChat Account Bound", 已绑定的邮箱账户: "Email Account Bound", "用户信息更新成功！": "User information updated successfully!", "使用明细（总消耗额度：{renderQuota(stat.quota)}）": "Usage Details (Total Consumption Quota: {renderQuota(stat.quota)})", 用户名称: "User Name", 令牌名称: "Token Name", 留空则查询全部用户: "Leave blank to query all users", 留空则查询全部令牌: "Leave blank to query all tokens", 模型名称: "Model Name", 留空则查询全部模型: "Leave blank to query all models", 起始时间: "Start Time", 结束时间: "End Time", 查询: "Query", 提示: "Prompt", 补全: "Completion", 消耗额度: "Used Quota", "渠道不存在：%d": "Channel does not exist: %d", "数据库一致性已被破坏，请联系管理员": "Database consistency has been broken, please contact the administrator", "使用近似的方式估算 token 数以减少计算量": "Estimate the number of tokens in an approximate way to reduce computational load", "请填写ChannelName和ChannelKey！": "Please fill in the ChannelName and ChannelKey!", "请至少选择一个Model！": "Please select at least one Model!", 加载关于内容失败: "Failed to load content about", "用户账户创建成功！": "User account created successfully!", 生成数量: "Generate quantity", 请输入生成数量: "Please enter the quantity to generate", 创建新用户账户: "Create new user account", "渠道更新成功！": "Channel updated successfully!", "渠道创建成功！": "Channel created successfully!", 请选择分组: "Please select a group", 更新兑换码信息: "Update redemption code information", 创建新的兑换码: "Create a new redemption code", 未找到所请求的页面: "The requested page was not found", "过期时间格式错误！": "Expiration time format error!", "请输入过期时间，格式为 yyyy-MM-dd HH:mm:ss，-1 表示无限制": "Please enter the expiration time, the format is yyyy-MM-dd HH:mm:ss, -1 means no limit", "此项可选，为一个 JSON 文本，键为用户请求的模型名称，值为要替换的模型名称，例如：": "This is optional, it's a JSON text, the key is the model name requested by the user, and the value is the model name to be replaced, for example:", "此项可选，输入镜像站地址，格式为：": "This is optional, enter the mirror site address, the format is:", 模型映射: "Model mapping", "请输入默认 API 版本，例如：2023-03-15-preview，该配置可以被实际的请求查询参数所覆盖": "Please enter the default API version, for example: 2023-03-15-preview, this configuration can be overridden by the actual request query parameters", 默认: "default", 图片演示: "Image demo", "参数替换为你的部署名称（模型名称中的点会被剔除）": "Replace the parameter with your deployment name (dots in the model name will be removed)", "模型映射必须是合法的 JSON 格式！": "Model mapping must be in valid JSON format!", 取消无限额度: "Cancel unlimited quota", 取消: "Cancel", 请输入新的剩余额度: "Please enter the new remaining quota", 请输入单个兑换码中包含的额度: "Please enter the quota included in a single redemption code", 请输入用户名: "Please enter username", 请输入显示名称: "Please enter display name", 请输入密码: "Please enter password", 模型部署名称必须和模型名称保持一致: "The model deployment name must be consistent with the model name", "，因为 One API 会把请求体中的 model": ", because One API will take the model in the request body", "请输入 AZURE_OPENAI_ENDPOINT": "Please enter AZURE_OPENAI_ENDPOINT", "请输入自定义渠道的 Base URL": "Please enter the Base URL of the custom channel", "Homepage URL 填": "Fill in the Homepage URL", "Authorization callback URL 填": "Fill in the Authorization callback URL", 请为通道命名: "Please name the channel", "此项可选，用于修改请求体中的模型名称，为一个 JSON 字符串，键为请求中模型名称，值为要替换的模型名称，例如：": "This is optional, used to modify the model name in the request body, it's a JSON string, the key is the model name in the request, and the value is the model name to be replaced, for example:", 模型重定向: "Model redirection", 请输入渠道对应的鉴权密钥: "Please enter the authentication key corresponding to the channel", "注意，": "Note that, ", "，图片演示。": "related image demo.", "令牌创建成功，请在列表页面点击复制获取令牌！": "Token created successfully, please click copy on the list page to get the token!", 代理: "Proxy", "此项可选，用于通过代理站来进行 API 调用，请输入代理站地址，格式为：https://domain.com": "This is optional, used to make API calls through the proxy site, please enter the proxy site address, the format is: https://domain.com", "取消密码登录将导致所有未绑定其他登录方式的用户（包括管理员）无法通过密码登录，确认取消？": "Canceling password login will cause all users (including administrators) who have not bound other login methods to be unable to log in via password, confirm cancel?", "按照如下格式输入：": "Enter in the following format:", 模型版本: "Model version", "请输入星火大模型版本，注意是接口地址中的版本号，例如：v2.1": "Please enter the version of the Starfire model, note that it is the version number in the interface address, for example: v2.1", 点击查看: "click to view", "请确保已在 Azure 上创建了 gpt-35-turbo 模型，并且 apiVersion 已正确填写！": "Please make sure that the gpt-35-turbo model has been created on Azure, and the apiVersion has been filled in correctly!", "建议收藏所有地址，以防失联。": "It is recommended to bookmark all addresses to prevent losing contact.", "无法正常请求API的用户，请联系管理员。": "For users who cannot request the API normally, please contact the administrator.", 温馨提示: "Kind tips", "获取API URL列表时发生错误，请稍后重试。": "An error occurred while retrieving the API URL list, please try again later.", "，时间：": ",time:", "已用/剩余": "Used/Remaining", "，点击更新": ", click Update", "确定是否要清空此渠道记录额度？": "Are you sure you want to clear the record quota of this channel?", 此修改将不可逆: "This modification will be irreversible", 优先级: "Priority", 权重: "Weight", 测试操作项目组: "Test operation project team", "确定是否要删除此渠道？": "Are you sure you want to delete this channel?", "确定是否要复制此渠道？": "Are you sure you want to copy this channel?", 复制渠道的所有信息: "Copy all information for a channel", 展开操作: "Expand operation", _复制: "_copy", "渠道未找到，请刷新页面后重试。": "Channel not found, please refresh the page and try again.", 渠道复制成功: "Channel copy successful", "渠道复制失败: ": "Channel copy failed:", "已成功开始测试所有通道，请刷新页面查看结果。": "Testing of all channels has been started successfully, please refresh the page to view the results.", "请先选择要删除的通道！": "Please select the channel you want to delete first!", 搜索渠道关键词: "Search channel keywords", 模型关键字: "model keyword", 选择分组: "Select group", 使用ID排序: "Sort by ID", 是否用ID排序: "Whether to sort by ID", "确定？": "Sure?", "确定是否要删除禁用通道？": "Are you sure you want to delete the disabled channel?", 开启批量操作: "Enable batch selection", 是否开启批量操作: "Whether to enable batch selection", "确定是否要删除所选通道？": "Are you sure you want to delete the selected channels?", "确定是否要修复数据库一致性？": "Are you sure you want to repair database consistency?", "进行该操作时，可能导致渠道访问错误，请仅在数据库出现问题时使用": "When performing this operation, it may cause channel access errors. Please only use it when there is a problem with the database.", "当前没有可用的启用令牌，请确认是否有令牌处于启用状态！": "There are currently no enablement tokens available, please confirm if one is enabled!", API令牌: "API Token", 使用日志: "Usage log", Midjourney日志: "Midjourney", 数据看板: "Dashboard", 模型列表: "Model list", 常见问题: "FAQ", 免费体验: "Free trial", 新用户注册赠送$: "Free $ for new user registration", 测试金额: "Test amount", "请稍后几秒重试，Turnstile 正在检查用户环境！": "Please try again in a few seconds, Turnstile is checking the user environment!", "您正在使用默认密码！": "You are using the default password!", "请立刻修改默认密码！": "Please change the default password immediately!", "请输入用户名和密码！": "Please enter username and password!", "用户名/邮箱": "Username/email", 微信扫码登录: "WeChat scan code to log in", 刷新成功: "Refresh successful", 刷新失败: "Refresh failed", "用时/首字": "Time/first word", 重试: "Retry", 用户信息: "User information", "无法复制到剪贴板，请手动复制": "Unable to copy to clipboard, please copy manually", 消费: "Consume", 管理: "Manage", 系统: "System", 用时: "time", 首字时间: "First word time", 是否流式: "Whether to stream", 非流: "not stream", "渠道 ID": "Channel ID", 用户ID: "User ID", 花费: "Spend", 列设置: "Column settings", 补偿: "compensate", 错误: "mistake", 未知: "unknown", 全选: "Select all", 组名必须唯一: "Group name must be unique", "解析 JSON 出错:": "Error parsing JSON:", "解析 GroupModel 时发生错误: ": "An error occurred while parsing GroupModel:", "GroupModel 未定义，无法更新分组": "GroupModel is not defined, cannot update grouping", 重置成功: "Reset successful", "加载数据出错:": "Error loading data:", "加载数据时发生错误: ": "An error occurred while loading data:", 保存成功: "Saved successfully", "部分保存失败，请重试": "Partial saving failed, please try again", 请检查输入: "Please check your input", "如何区分不同分组不同模型的价格：供参考的配置方式": "How to distinguish the prices of different models in different groups: configuration method for reference", 获取价格顺序: "Get price order", "确定同步远程数据吗？": "Are you sure you want to synchronize remote data?", "此修改将不可逆！建议同步前先备份自己的设置！": "This modification will be irreversible! It is recommended to back up your settings before synchronizing!", "模型固定价格(按次计费模型用)": "Model fixed price (for pay-per-view models)", "模型倍率(按量计费模型用)": "Model magnification (for pay-as-you-go model)", "为一个 JSON 文本，键为模型名称，值为倍率": "is a JSON text, the key is the model name, and the value is the magnification", 隐藏: "Hide", 分组名称: "Group name", 提交结果: "Results", 模式: "Mode", 任务状态: "Status", 耗时: "Time consuming", 结果图片: "Result", 失败原因: "Failure reason", 全部: "All", 成功: "Success", 未启动: "No start", 队列中: "In queue", 窗口等待: "window wait", 失败: "Failed", 绘图: "Drawing", 放大: "Upscalers", 微妙放大: "Upscale (Subtle)", 创造放大: "Upscale (Creative)", 强变换: "Low Variation", 弱变换: "High Variation", 图生文: "Describe", 图混合: "Blend", 重绘: "Vary", "局部重绘-提交": "Vary Region", "自定义变焦-提交": "Custom Zoom-Submit", 窗口处理: "window handling", 缩词后生图: "epigenetic diagram of abbreviation", 图生文按钮生图: "Picture and text button", "任务 ID": "Task ID", 速度模式: "speed mode", "错误：未登录或登录已过期，请重新登录！": "Error: Not logged in or your login has expired, please log in again!", "错误：请求次数过多，请稍后再试！": "Error: Too many requests, please try again later!", "错误：服务器内部错误，请联系管理员！": "Error: Internal server error, please contact the administrator!", "本站仅作演示之用，无服务端！": "This site is for demonstration purposes only, no server!", "已用额度：": "Used amount:", "请求次数：": "Number of requests:", 平移: "Pan", 上传文件: "Upload", 图生文后生图: "Pictures give rise to text and later pictures", 已提交: "Submitted", 重复提交: "Duplicate submission", 未提交: "Not submitted", 缩词: "Shorten", 变焦: "zoom", 按次计费: "Pay per view", 按量计费: "Pay as you go", 标签: "Label", 人民币: "RMB", 说明: "illustrate", 可用性: "Availability", 数据加载失败: "Data loading failed", "发生错误，请重试": "An error occurred, please try again", "本站汇率1美金=": "The exchange rate of this site is 1 USD =", 模糊搜索: "fuzzy search", 选择标签: "Select label", 令牌分组: "Token grouping", 隐: "hidden", 本站当前已启用模型: "The model is currently enabled on this site", 个: "indivual", "倍率是本站的计算方式，不同模型有着不同的倍率，并非官方价格的多少倍，请务必知晓。": "The magnification is the calculation method of this website. Different models have different magnifications, which are not multiples of the official price. Please be sure to know.", "所有各厂聊天模型请统一使用OpenAI方式请求，支持OpenAI官方库<br/>Claude()Claude官方格式请求": "Please use the OpenAI method to request all chat models from each factory, and support the OpenAI official library<br/>Claude()Claude official format request", 复制选中模型: "Copy selected model", 分组说明: "Group description", 倍率是为了方便换算不同价格的模型: "The magnification is to facilitate the conversion of models with different prices.", 点击查看倍率说明: "Click to view the magnification description", 显: "show", 当前分组可用: "Available in current group", 当前分组不可用: "The current group is unavailable", "提示：": "input:", "补全：": "output:", "模型价格：": "Model price:", "模型：": "Model:", "分组：": "Grouping:", 最终价格: "final price", 计费类型: "Billing type", 美元: "Dollar", 倍率: "Ratio", "常见问题不是合法的 JSON 字符串": "FAQ is not a valid JSON string", 常见问题更新失败: "FAQ update failed", 活动内容已更新: "Event content has been updated", 活动内容更新失败: "Event content update failed", 页脚内容已更新: "Footer content updated", 页脚内容更新失败: "Footer content update failed", "Logo 图片地址": "Logo image address", 在此输入图片地址: "Enter image address here", "在此输入首页内容，支持 Markdown & HTML 代码，设置后首页的状态信息将不再显示。如果输入的是一个链接，则会使用该链接作为 iframe 的 src 属性，这允许你设置任意网页作为首页。": "Enter the home page content here, support Markdown", 令牌分组说明: "Token grouping description", "在此输入新的关于内容，支持 Markdown & HTML 代码。如果输入的是一个链接，则会使用该链接作为 iframe 的 src 属性，这允许你设置任意网页作为关于页面。": "Enter new about content here, support Markdown", API地址列表: "API address list", "在此输入新的常见问题，json格式；键为问题，值为答案。": "Enter a new FAQ here in json format; the key is the question and the value is the answer.", 活动内容: "Activity content", "在此输入新的活动内容。": "Enter new event content here.", 总计: "Total", 无数据: "No data", 小时: "Hour", 新密码: "New Password", "重置邮件发送成功，请检查邮箱！": "The reset email was sent successfully, please check your email!", "请输入你的账户名以确认删除！": "Please enter your account name to confirm deletion!", "账户已删除！": "Account has been deleted!", "微信账户绑定成功！": "WeChat account bound successfully!", "两次输入的密码不一致！": "The passwords entered twice are inconsistent!", "密码修改成功！": "Password changed successfully!", 划转金额最低为: "The minimum transfer amount is", "请输入邮箱！": "Please enter your email!", "验证码发送成功，请检查邮箱！": "The verification code was sent successfully, please check your email!", "请输入邮箱验证码！": "Please enter the email verification code!", 请输入要划转的数量: "Please enter the amount to be transferred", 当前余额: "Current balance", 单独并发限制: "Individual concurrency limits", 未设置单独并发限制: "No individual concurrency limit is set", 无效的用户单独并发限制数据: "Invalid user individual concurrency limit data", 未绑定: "Not bound", 修改绑定: "Modify binding", 绑定邮箱: "Bind email", 确认新密码: "Confirm new password", 历史消耗: "Consumption", 查看: "Check", 修改密码: "Change password", 删除个人账户: "Delete personal account", 已绑定: "Bound", 获取二维码失败: "Failed to obtain QR code", 获取当前设置失败: "Failed to get current settings", 设置已更新: "Settings updated", 更新设置失败: "Update settings failed", 确认解绑: "Confirm unbinding", "您确定要解绑WxPusher吗？": "Are you sure you want to unbind WxPusher?", 解绑失败: "Unbinding failed", 订阅事件: "Subscribe to events", 通知方式: "Notification method", 留空将通知到账号邮箱: "Leave this blank to be notified to the account email", 查看接入文档: "View access documentation", 企业微信机器人Key: "Enterprise WeChat Robot Key", "您已绑定WxPusher，可以点击下方解绑": "You have bound WxPusher, you can click below to unbind", 请扫描二维码绑定WxPusher: "Please scan the QR code to bind WxPusher", "预警额度（需订阅事件）": "Alert quota (need to subscribe to events)", " 时，将收到预警邮件（2小时最多1次）": "When, you will receive an early warning email (maximum once every 2 hours)", 兑换人ID: "Redeemer ID", "确定是否要删除此兑换码？": "Are you sure you want to delete this redemption code?", "已复制到剪贴板！": "Copied to clipboard!", 搜索关键字: "Search keywords", "关键字(id或者名称)": "Keyword (id or name)", 复制所选兑换码: "Copy selected redemption code", "请至少选择一个兑换码！": "Please select at least one redemption code!", "密码长度不得小于 8 位！": "Password must be at least 8 characters long!", "注册成功！": "Registration successful!", "验证码发送成功，请检查你的邮箱！": "The verification code was sent successfully, please check your email!", 确认密码: "Confirm Password", 邀请码: "Invitation code", 输入邀请码: "Enter invitation code", 账户: "Account", 邮箱: "Mail", "已有账户？": "Already have an account?", 创意任务: "Tasks", 用户管理: "User Management", "任务ID（点击查看详情）": "Task ID (click to view details)", 进度: "schedule", 花费时间: "spend time", 生成音乐: "generate music", 生成歌词: "Generate lyrics", 歌曲拼接: "song splicing", 上传歌曲: "Upload songs", 生成视频: "Generate video", 扩展视频: "Extended video", 获取无水印: "Get no watermark", 生成图片: "Generate pictures", 可灵: "Kling", 正在提交: "Submitting", 执行中: "processing", 平台: "platform", 排队中: "Queuing", "已启用：限制模型": "Enabled: restricted model", "AMA 问天": "AMA Wentian", 项目操作按钮组: "Project action button group", "AMA 问天（BotGem）": "AMA Wentian (BotGem)", "确定是否要删除此令牌？": "Are you sure you want to delete this token?", 管理员未设置聊天链接: "The administrator has not set up a chat link", 复制所选令牌: "Copy selected token", "请至少选择一个令牌！": "Please select at least one token!", 管理员未设置查询页链接: "The administrator has not set the query page link", 复制所选令牌到剪贴板: "Copy selected token to clipboard", 查看API地址: "View API address", 打开查询页: "Open query page", "时间(仅显示近3天)": "Time (only displays the last 3 days)", "请输入兑换码！": "Please enter the redemption code!", "兑换成功！": "Redemption successful!", "成功兑换额度：": "Successful redemption amount:", 请求失败: "Request failed", "管理员未开启在线充值！": "The administrator has not enabled online recharge!", 充值数量不能小于: "The recharge amount cannot be less than", "管理员未开启Stripe在线充值！": "The administrator has not enabled Stripe online recharge!", "当前充值1美金=": "Current recharge = 1 USD =", "请选择充值方式！": "Please choose a recharge method!", 元: "CNY", 充值记录: "Recharge record", 返利记录: "Rebate record", "确定要充值 $": "Confirm to top up $", "兑换中...": "Redemming", "微信/支付宝 实付金额：": "WeChat/Alipay actual payment amount:", "Stripe 实付金额：": "Stripe actual payment amount:", "支付中...": "Paying", 支付宝: "Alipay", 待使用收益: "Proceeds to be used", 邀请人数: "Number of people invited", 兑换余额: "Exchange balance", 在线充值: "Online recharge", "充值数量，最低 ": "Recharge quantity, minimum", 请选择充值金额: "Please select the recharge amount", 微信: "WeChat", 邀请返利: "Invite rebate", 总收益: "total revenue", 邀请信息: "Invitation information", 代理加盟: "Agent to join", 代理商信息: "Agent information", 分红记录: "Dividend record", 提现记录: "Withdrawal records", 代理商管理: "Agent management", 自定义输入: "custom input", 加载token失败: "Failed to load token", 配置聊天: "Configure chat", 模型消耗分布: "Model consumption distribution", 模型调用次数占比: "Proportion of model calls", 用户消耗分布: "User consumption distribution", 时间粒度: "Time granularity", 天: "day", 模型概览: "Model overview", 用户概览: "User overview", 正在策划中: "Under planning", 请求首页内容失败: "Requesting homepage content failed", 返回首页: "Return to home page", "获取用户数据时发生错误，请稍后重试。": "An error occurred while retrieving user data, please try again later.", 无额度: "No limit", 累计消费: "Accumulated consumption", 累计请求: "Cumulative requests", "你好，": "Hello,", 线路监控: "line monitoring", 查看全部: "View all", 高延迟: "high latency", 异常: "abnormal", API地址: "API address", 的未命名令牌: "unnamed token", "令牌更新成功！": "Token updated successfully!", "(origin) Discord原链接": "(origin) Discord original link", 请选择过期时间: "Please select expiration time", 数量: "quantity", 请选择或输入创建令牌的数量: "Please select or enter the number of tokens to create", 请选择渠道: "Please select a channel", "允许的IP，一行一个，不填写则不限制": "Allowed IPs, one per line, not filled in means no restrictions", IP黑名单: "IP blacklist", "不允许的IP，一行一个": "IPs not allowed, one per line", 请选择该渠道所支持的模型: "Please select the model supported by this channel", 次: "Second-rate", 达到限速报错内容: "Error content when the speed limit is reached", 不填则使用默认报错: "If not filled in, the default error will be reported.", "Midjouney 设置 (可选)": "Midjouney settings (optional)", "令牌纬度控制 Midjouney 配置，设置优先级：令牌 {": "Token latitude controls Midjouney configuration, setting priority: token {", "图片代理地址最好用自己的，本站绘图量大，公用代理地址可能有时网速不佳": "It is best to use your own image proxy address. This site has a large amount of drawings, and public proxy addresses may sometimes have poor network speeds.", "【突发备用号池】用于应对高强度风控情况，当普通号池全部重试失败，任务进入备用号池执行并额外计费。": "[Sudden backup number pool] is used to deal with high-intensity risk control situations. When all retries in the ordinary number pool fail, the task will be executed in the backup number pool and additional charges will be incurred.", 绘图模式: "Drawing mode", 请选择模式: "Please select mode", 图片代理方式: "Picture agency method", "用于替换 https://cdn.discordapp.com 的域名": "The domain name used to replace https://cdn.discordapp.com", 一个月: "A month", 一天: "One day", 令牌渠道分组选择: "Token channel grouping selection", "只可使用对应分组包含的模型。": "Only models contained in the corresponding group can be used.", 渠道分组: "Channel grouping", "安全设置(可选)": "Security settings (optional)", "IP 限制": "IP restrictions", "启用模型限制（非必要，不建议启用）": "Enable model restrictions (not necessary, not recommended)", 秒: "Second", 更新令牌后需等待几分钟生效: "It will take a few minutes to take effect after updating the token.", 一小时: "One hour", 新建数量: "New quantity", "加载失败，请稍后重试": "Loading failed, please try again later", 未设置: "Not set", API文档: "API documentation", "不是合法的 JSON 字符串": "Not a valid JSON string", 个人中心: "Personal center", 代理商: "Agent", 钱包: "Wallet", 备注: "Remark", 工作台: "Workbench", "已复制：": "Copied:", 提交时间: "Submission time", "无法正常连接至服务器！": "Unable to connect to the server properly!", 无记录: "No record", 日间模式: "day mode", 活动福利: "Activity benefits", "聊天/绘画": "Chat/Draw", 跟随系统: "Follow the system", 黑夜模式: "Dark mode", 管理员设置: "Admin", 待更新: "To be updated", 定价: "Pricing", "支付中..": "Paying", 查看图片: "View pictures", 并发限制: "Concurrency limit", 正常: "normal", 周期: "cycle", "同步频率10-20分钟": "Synchronization frequency 10-20 minutes", 模型调用占比: "Model call proportion", "次，平均每天": "times, average per day", "，平均每天": ", on average every day", "启用突发备用号池（建议勾选，极大降低故障率）": "Enable burst backup number pool (it is recommended to check this box to greatly reduce the failure rate)", 查看说明: "View instructions", 添加令牌: "Create token", "令牌纬度控制 Midjouney 配置，设置优先级：令牌 > 路径参数 > 系统默认": "Token latitude controls Midjouney configuration, setting priority: token > path parameter > system default", 启用速率限制: "Enable rate limiting", 复制BaseURL: "Copy BaseURL", 总消耗额度: "Total consumption amount", 近一分钟内消耗Token数: "Number of tokens consumed in the past minute", 近一分钟内消耗额度: "Quota consumed in the past minute", 近一分钟内请求次数: "Number of requests in the past minute", 预估一天消耗量: "Estimated daily consumption", "模型固定价格：": "Model fixed price:", "仅供参考，以实际扣费为准": "For reference only, actual deduction shall prevail", 导出CSV: "Export CSV", 流: "stream", 任务ID: "Task ID", 周: "week", "总计：": "Total:", 划转: "transfer", 可用额度: "Available credit", "邀请码：": "Invitation code:", 最低: "lowest", 划转额度: "Transfer amount", 邀请链接: "Invitation link", 更多优惠: "More offers", 企业微信: "Enterprise WeChat", 点击解绑WxPusher: "Click to unbind WxPusher", 点击显示二维码: "Click to display the QR code", "二维码已过期，点击重新获取": "The QR code has expired, click to get it again", 邮件: "Mail", 个人信息: "Personal information", 余额不足预警: "Insufficient balance warning", 促销活动通知: "Promotion notification", "修改密码、邮箱、微信等": "Change password, email, WeChat, etc.", 更多选项: "More options", 模型调价通知: "Model price adjustment notice", 系统公告通知: "System announcement notification", 订阅管理: "Subscription management", "防失联-定期通知": "Prevent loss of contact - regular notifications", "订阅事件后，当事件触发时，您将会收到相应的通知": "After subscribing to the event, you will receive the corresponding notification when the event is triggered.", "当余额低于 ": "When the balance is lower than", 保存: "save", 计费说明: "Billing instructions", 高稳定性: "High stability", 没有账号请先: "If you don't have an account, please", 注册账号: "Register an account", 第三方登录: "Third party login", 欢迎回来: "welcome back", 忘记密码: "forget the password", "想起来了？": "Remember?", 退出: "Quit", 确定: "OK", "请输入星火大模型版本，注意是接口地址中的版本号，例如：v2[1]": "Please enter the Spark model version, note that it is the version number in the interface address, for example: v2.1", 等待中: "Waiting", "所有各厂聊天模型请统一使用OpenAI方式请求，支持OpenAI官方库": "Please use the OpenAI method to request all chat models from each factory, and support the OpenAI official library.", "实付金额：": "Actual payment amount: ", 金额: "Amount", 充值金额: "Recharge amount", "易支付 实付金额：": "Easy Pay Actual payment amount:", "微信扫码关注公众号，输入 ": "Scan the QR code on WeChat to follow the official account and enter", " 获取验证码（三分钟内有效）": "Get verification code (valid within three minutes)", 不可用模型: "Unavailable model", 关: "close", 加载首页内容失败: "Failed to load home page content", 打开聊天: "Open chat", 新窗口打开: "New window opens", "禁用（仍可为用户单独开启）": "Disabled (can still be turned on individually for users)", 重新配置: "Reconfigure", 隐藏不可用模型: "Hide unavailable models", " 时，将收到预警通知（2小时最多1次）": "When, you will receive an early warning notification (maximum once every 2 hours)", 在iframe中加载: "Load in iframe", 补全倍率: "Completion ratio", 保存分组数据失败: "Failed to save group data", "保存失败，请重试": "Save failed, please try again", 没有可用的使用信息: "No usage information available", 使用详情: "Usage details", 收起: "Collapse", 计费详情: "Billing details", 提示Token: "Tip Token", 补全Token: "Complete Token", 提示Token详情: "Prompt Token details", 补全Token详情: "Complete Token details", 输出Token详情: "Output Token details", 缓存Token: "CacheToken", 内部缓存Token: "Internal cache token", 图像Token: "ImageToken", 音频Token: "AudioToken", 开: "open", 推理Token: "ReasoningToken", 文本Token: "TextToken", 显示禁用渠道: "Show disabled channels", 输入Token详情: "Enter Token details", 输出Token: "OutputToken", 隐藏禁用渠道: "Hide disabled channels", 今日不再提醒: "No more reminders today", "平台/类型": "Platform/Type", 平台和类型: "Platforms and types", 当前选择分组: "Currently selected group", 表情迁移: "Expression migration", "音频输入：": "Audio input:", "音频输出：": "Audio output:", 风格重绘: "style repaint", 发送测试通知失败: "Failed to send test notification", 开始时间: "start time", 当前所选分组不可用: "The currently selected group is unavailable", 接口凭证: "Interface credentials", 文字输入: "Text input", 文字输出: "text output", 日志详情: "Log details", 未完成: "Not completed", 测试单个渠道操作项目组: "Test a single channel operation project group", 测试通知: "Test notification", 测试通知发送成功: "Test notification sent successfully", 点击此处查看接入文档: "Click here to view access documentation", 类型1: "Type 1", "类型1 (Imagine)": "Type 1 (Imagine)", 类型1价格: "Type 1 price", 类型2: "Type 2", "类型2 (Upscale)": "Type 2 (Upscale)", 类型2价格: "Type 2 price", 类型3价格: "Type 3 price", 计费过程: "Binning process", 语音输入: "Voice input", 语音输出: "Voice output", 请在右侧切换到可用分组: "Please switch to available groups on the right", "请联系管理员~": "Please contact the administrator~", 调用消费: "Call consumption", 质量: "quality", 速度: "speed", 钉钉机器人Key: "DingTalk Robot Key", "需要@的用户手机号": "Need @ user mobile phone number", "（提示": "(hint", 下载文件: "Download file", "https...xxx.com.webhook": "", "搜索渠道的 ID，名称和密钥 ": "", "搜索用户的 ID，用户名，显示名称，以及邮箱地址 ": "", "操作失败，重定向至登录界面中": "", 支付中: "", 等级: "grade", 钉钉: "DingTalk", "模型价格：${{price}} * 分组倍率：{{ratio}} = ${{total}}": "Model price: ${{price}} * Group ratio: {{ratio}} = ${{total}}", "提示：${{price}} * {{ratio}} = ${{total}} / 1M tokens": "Prompt: ${{price}} * {{ratio}} = ${{total}} / 1M tokens", "补全：${{price}} * {{ratio}} = ${{total}} / 1M tokens": "Completion: ${{price}} * {{ratio}} = ${{total}} / 1M tokens", "音频提示：${{price}} * {{ratio}} * {{audioRatio}} = ${{total}} / 1M tokens": "Audio prompt: ${{price}} * {{ratio}} * {{audioRatio}} = ${{total}} / 1M tokens", "音频提示 {{input}} tokens / 1M tokens * ${{price}} * {{audioRatio}} + 音频补全 {{completion}} tokens / 1M tokens * ${{price}} * {{audioRatio}} * {{audioCompRatio}}": "Audio prompt {{input}} tokens / 1M tokens * ${{price}} * {{audioRatio}} + Audio completion {{completion}} tokens / 1M tokens * ${{price}} * {{audioRatio}} * {{audioCompRatio}}", "音频补全：${{price}} * {{ratio}} * {{audioRatio}} * {{audioCompRatio}} = ${{total}} / 1M tokens": "Audio completion: ${{price}} * {{ratio}} * {{audioRatio}} * {{audioCompRatio}} = ${{total}} / 1M tokens", "（文字 + 音频）* 分组倍率 {{ratio}} = ${{total}}": "(Text + Audio) * Group ratio {{ratio}} = ${{total}}", "文字提示 {{input}} tokens / 1M tokens * ${{price}} + 文字补全 {{completion}} tokens / 1M tokens * ${{compPrice}} +": "Text prompt {{input}} tokens / 1M tokens * ${{price}} + Text completion {{completion}} tokens / 1M tokens * ${{compPrice}} +", "提示 {{input}} tokens / 1M tokens * ${{price}} + 补全 {{completion}} tokens / 1M tokens * ${{compPrice}} * 分组 {{ratio}} = ${{total}}": "Prompt {{input}} tokens / 1M tokens * ${{price}} + Completion {{completion}} tokens / 1M tokens * ${{compPrice}} * Group {{ratio}} = ${{total}}", "价格：${{price}} * 分组：{{ratio}}": "Price: ${{price}} * Group: {{ratio}}", "模型: {{ratio}} * 分组: {{groupRatio}}": "Model: {{ratio}} * Group: {{groupRatio}}", 统计额度: "Statistical quota", 统计Tokens: "Statistical Tokens", 统计次数: "Statistical count", 平均RPM: "Average RPM", 平均TPM: "Average TPM", 消耗分布: "Consumption distribution", 调用次数分布: "Models call distribution", 添加渠道: "Add channel", 测试所有通道: "Test all channels", 删除禁用通道: "Delete disabled channels", 修复数据库一致性: "Fix database consistency", 删除所选通道: "Delete selected channels", 标签聚合模式: "Enable tag mode", "没有账户？": "No account? ", "注意，模型部署名称必须和模型名称保持一致，因为 One API 会把请求体中的 model 参数替换为你的部署名称（模型名称中的点会被剔除）": "Note: The model deployment name must match the model name because One API will replace the model parameter in the request body with your deployment name (dots in the model name will be removed)", "请输入 AZURE_OPENAI_ENDPOINT，例如：https://docs-test-001.openai.azure.com": "Please enter AZURE_OPENAI_ENDPOINT, e.g.: https://docs-test-001.openai.azure.com", "默认 API 版本": "Default API Version", "请输入默认 API 版本，例如：2023-06-01-preview，该配置可以被实际的请求查询参数所覆盖": "Please enter default API version, e.g.: 2023-06-01-preview. This configuration can be overridden by actual request query parameters", 请为渠道命名: "Please name the channel", 请选择可以使用该渠道的分组: "Please select groups that can use this channel", "请在系统设置页面编辑分组倍率以添加新的分组：": "Please edit Group ratios in system settings to add new groups:", 部署地区: "Deployment Region", "请输入部署地区，例如：us-central1\n支持使用模型映射格式": `Please enter deployment region, e.g.: us-central1
Supports model mapping format`, 填入模板: "Fill Template", 鉴权json: "Authentication JSON", 请输入鉴权json: "Please enter authentication JSON", 组织: "Organization", "组织，可选，不填则为默认组织": "Organization (optional), default if empty", "请输入组织org-xxx": "Please enter organization org-xxx", 默认测试模型: "Default Test Model", 不填则为模型列表第一个: "First model in list if empty", "是否自动禁用（仅当自动禁用开启时有效），关闭后不会自动禁用该渠道：": "Auto-disable (only effective when auto-disable is enabled). When turned off, this channel will not be automatically disabled:", "状态码复写（仅影响本地判断，不修改返回到上游的状态码）": "Status Code Override (only affects local judgment, does not modify status code returned upstream)", "此项可选，用于复写返回的状态码，比如将claude渠道的400错误复写为500（用于重试），请勿滥用该功能，例如：": "Optional, used to override returned status codes, e.g. rewriting Claude channel's 400 error to 500 (for retry). Do not abuse this feature. Example:", 渠道标签: "Channel Tag", 渠道优先级: "Channel Priority", 渠道权重: "Channel Weight", "仅支持 OpenAI 接口格式": "Only OpenAI interface format is supported", 请填写密钥: "Please enter the key", 获取模型列表成功: "Successfully retrieved model list", 获取模型列表失败: "Failed to retrieve model list", "请填写渠道名称和渠道密钥！": "Please enter channel name and key!", "请至少选择一个模型！": "Please select at least one model!", "提交失败，请勿重复提交！": "Submission failed, please do not submit repeatedly!", "某些模型已存在！": "Some models already exist!", "如果你对接的是上游One API或者New API等转发项目，请使用OpenAI类型，不要使用此类型，除非你知道你在做什么。": "If you are connecting to upstream One API or New API forwarding projects, please use OpenAI type. Do not use this type unless you know what you are doing.", "完整的 Base URL，支持变量{model}": "Complete Base URL, supports variable {model}", "请输入完整的URL，例如：https://api.openai.com/v1/chat/completions": "Please enter complete URL, e.g.: https://api.openai.com/v1/chat/completions", "此项可选，用于通过代理站来进行 API 调用": "Optional, used for API calls through proxy sites", 私有部署地址: "Private Deployment Address", "请输入私有部署地址，格式为：https://fastgpt.run/api/openapi": "Please enter private deployment address, format: https://fastgpt.run/api/openapi", "注意非Chat API，请务必填写正确的API地址，否则可能导致无法使用": "Note: For non-Chat API, please make sure to enter the correct API address, otherwise it may not work", "请输入到 /suno 前的路径，通常就是域名，例如：https://api.example.com": "Please enter the path before /suno, usually the domain, e.g.: https://api.example.com", 填入相关模型: "Fill Related Models", "新建渠道时，请求通过当前浏览器发出；编辑已有渠道，请求通过后端服务器发出": "When creating a new channel, requests are sent through the current browser; when editing an existing channel, requests are sent through the backend server", 获取模型列表: "Get Model List", 填入: "Fill", 输入自定义模型名称: "Enter Custom Model Name", "知识库 ID": "Knowledge Base ID", "请输入知识库 ID，例如：123456": "Please enter knowledge base ID, e.g.: 123456", 可选值: "Optional value", 异步任务: "Async task", 你好: "Hello", "你好，请问有什么可以帮助您的吗？": "Hello, how may I help you?", 用户分组: "Your default group", 每页条数: "Items per page", "令牌无法精确控制使用额度，只允许自用，请勿直接将令牌分发给他人。": "Tokens cannot accurately control usage, only for self-use, please do not distribute tokens directly to others.", 添加兑换码: "Add redemption code", 复制所选兑换码到剪贴板: "Copy selected redemption codes to clipboard", "第 {{start}} - {{end}} 条，共 {{total}} 条": "Items {{start}} - {{end}} of {{total}}", 新建兑换码: "Code", "兑换码更新成功！": "Redemption code updated successfully!", "兑换码创建成功！": "Redemption code created successfully!", 兑换码创建成功: "Redemption Code Created", "兑换码创建成功，是否下载兑换码？": "Redemption code created successfully. Do you want to download it?", "兑换码将以文本文件的形式下载，文件名为兑换码的名称。": "The redemption code will be downloaded as a text file, with the filename being the redemption code name.", 模型价格: "Model price", 可用分组: "Available groups", "您的默认分组为：{{group}}，分组倍率为：{{ratio}}": "Your default group is: {{group}}, group ratio: {{ratio}}", "按量计费费用 = 分组倍率 × 模型倍率 × （提示token数 + 补全token数 × 补全倍率）/ 500000 （单位：美元）": "The cost of pay-as-you-go = Group ratio × Model ratio × (Prompt token number + Completion token number × Completion ratio) / 500000 (Unit: USD)", 模糊搜索模型名称: "Fuzzy search model name", "您还未登陆，显示的价格为默认分组倍率: {{ratio}}": "You are not logged in, the displayed price is the default group ratio: {{ratio}}", 你的分组无权使用该模型: "Your group is not authorized to use this model", 您的分组可以使用该模型: "Your group can use this model", "当前查看的分组为：{{group}}，倍率为：{{ratio}}": "Current group: {{group}}, ratio: {{ratio}}", 添加用户: "Add user", 角色: "Role", 已绑定的GitHub账户: "已绑定的GitHub账户", 已绑定的Telegram账户: "已绑定的Telegram账户", 新额度: "New quota", "需要添加的额度（支持负数）": "Need to add quota (supports negative numbers)", "此项只读，需要用户通过个人设置页面的相关绑定按钮进行绑定，不可直接修改": "Read-only, user's personal settings, and cannot be modified directly", "请输入新的密码，最短 8 位": "Please enter a new password, at least 8 characterss", 添加额度: "Add quota", 以下信息不可修改: "The following information cannot be modified", 确定要充值吗: "Check to confirm recharge", 充值数量: "Recharge quantity", 实付金额: "Actual payment amount", "是否确认充值？": "Confirm recharge?", 我的钱包: "My wallet", 默认聊天页面链接: "Default chat page link", "聊天页面 2 链接": "Chat page 2 link", 失败重试次数: "Failed retry times", 额度查询接口返回令牌额度而非用户额度: "Displays token quota instead of user quota", 默认折叠侧边栏: "Default collapse sidebar", "聊天链接功能已经弃用，请使用下方聊天设置功能": "Chat link function has been deprecated, please use the chat settings below", 你似乎并没有修改什么: "You seem to have not modified anything", 令牌聊天设置: "Chat settings", "必须将上方聊天链接全部设置为空，才能使用下方聊天设置功能": "Must set all chat links above to empty to use the chat settings below", "链接中的{key}将自动替换为sk-xxxx，{address}将自动替换为系统设置的服务器地址，末尾不带/和/v1": "The {key} in the link will be automatically replaced with sk-xxxx, the {address} will be automatically replaced with the server address in system settings, and the end will not have / and /v1", 聊天配置: "Chat configuration", 保存聊天设置: "Save chat settings", 绘图设置: "Drawing settings", 启用绘图功能: "Enable drawing function", "允许回调（会泄露服务器 IP 地址）": "Allow callback (will leak server IP address)", "允许 AccountFilter 参数": "Allow AccountFilter parameter", 开启之后将上游地址替换为服务器地址: "After enabling, the upstream address will be replaced with the server address", 开启之后会清除用户提示词中的: "After enabling, the user prompt will be cleared", 检测必须等待绘图成功才能进行放大等操作: "Detection must wait for drawing to succeed before performing zooming and other operations", 保存绘图设置: "Save drawing settings", 以及: "and", 参数: "parameter", 屏蔽词过滤设置: "Sensitive word filtering settings", 启用屏蔽词过滤功能: "Enable sensitive word filtering function", "启用 Prompt 检查": "Enable Prompt check", 屏蔽词列表: "Sensitive word list", "一行一个屏蔽词，不需要符号分割": "One line per sensitive word, no symbols are required", 保存屏蔽词过滤设置: "Save sensitive word filtering settings", 日志设置: "Log settings", 日志记录时间: "Log record time", 请选择日志记录时间: "Please select log record time", 清除历史日志: "Clear historical logs", "条日志已清理！": "logs have been cleared!", 保存日志设置: "Save log settings", 数据看板设置: "Data dashboard settings", "启用数据看板（实验性）": "Enable data dashboard (experimental)", 数据看板更新间隔: "Data dashboard update interval", 数据看板默认时间粒度: "Data dashboard default time granularity", 保存数据看板设置: "Save data dashboard settings", 请选择最长响应时间: "Please select longest response time", 成功时自动启用通道: "Enable channel when successful", 分钟: "minutes", 设置过短会影响数据库性能: "Setting too short will affect database performance", "仅修改展示粒度，统计精确到小时": "Only modify display granularity, statistics accurate to the hour", "当运行通道全部测试时，超过此时间将自动禁用通道": "When running all channel tests, the channel will be automatically disabled when this time is exceeded", 设置公告: "Set notice", "设置 Logo": "Set Logo", 设置首页内容: "Set home page content", 设置关于: "Set about", 公告已更新: "Notice updated", 系统名称已更新: "System name updated", 有效期已更新: "LifeTime updated", 有效期更新失败: "LifeTime update failed", 有效期必须在5到720分钟之间: "The validity period must be between 5 and 720 minutes.", "Logo 已更新": "Logo updated", 首页内容已更新: "Home page content updated", 关于已更新: "About updated", 模型测试: "model test", "当前未开启Midjourney回调，部分项目可能无法获得绘图结果，可在运营设置中开启。": "Current Midjourney callback is not enabled, some projects may not be able to obtain drawing results, which can be enabled in the operation settings.", "Telegram 身份验证": "Telegram authentication", "Linux DO 身份验证": "Linux DO authentication", 协议: "License", 修改子渠道权重: "Modify sub-channel weight", "确定要修改所有子渠道权重为 ": "Confirm to modify all sub-channel weights to ", " 吗？": "?", 修改子渠道优先级: "Modify sub-channel priority", "确定要修改所有子渠道优先级为 ": "Confirm to modify all sub-channel priorities to ", 分组设置: "Group settings", 用户可选分组: "User selectable groups", 保存分组倍率设置: "Save group ratio settings", 模型倍率设置: "Model ratio settings", 可视化倍率设置: "Visual model ratio settings", "确定重置模型倍率吗？": "Confirm to reset model ratio?", 模型固定价格: "Model price per call", "模型补全倍率（仅对自定义模型有效）": "Model completion ratio (only effective for custom models)", 保存模型倍率设置: "Save model ratio settings", 重置模型倍率: "Reset model ratio", "一次调用消耗多少刀，优先级大于模型倍率": "How much USD one call costs, priority over model ratio", 仅对自定义模型有效: "Only effective for custom models", 添加模型: "Add model", 应用更改: "Apply changes", 更多: "Expand more", 个模型: "models", 可用模型: "Available models", 时间范围: "Time range", 批量设置标签: "Batch set tag", 请输入要设置的标签名称: "Please enter the tag name to be set", 请输入标签名称: "Please enter the tag name", "支持搜索用户的 ID、用户名、显示名称和邮箱地址": "Support searching for user ID, username, display name, and email address", 已注销: "Logged out"
}, zo = { 首页: "首页", 控制台: "控制台", 定价: "定价", 关于: "关于", 登录: "登录", 注册: "注册", 退出: "退出", 语言: "语言", 展开侧边栏: "展开侧边栏", 关闭侧边栏: "关闭侧边栏", "注销成功!": "注销成功!" }; Pe.use(ya).use(Ca).init({ resources: { en: { translation: Uo }, zh: { translation: zo } }, fallbackLng: "zh", interpolation: { escapeValue: !1 } }); const Wo = qn.createRoot(document.getElementById("root")); Wo.render(e.jsx(kt.StrictMode, { children: e.jsx(So, { children: e.jsx(Ha, { children: e.jsx(ga, { children: e.jsx(Ya, { children: e.jsx(lo, { children: e.jsx($o, {}) }) }) }) }) }) })); export { W as A, du as S, Ft as U, Gt as a, b, ve as c, Xo as d, Yo as e, Zo as g, Ve as i, xu as m, En as r, fu as s, Xe as t };
